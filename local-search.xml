<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CSS教程</title>
    <link href="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/"/>
    <url>/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<!-- more --><h1 id="xUWXD">一、CSS基础</h1><h2 id="JkDXB">1.1 CSS简介</h2><p><code>CSS</code>全称：层叠样式表（Cascading Style Sheets）</p><p><code>CSS</code>是一种标记语言，用于给HTML结构设置样式</p><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1727428021910-ab5ebe71-43b9-4dc0-bb0d-46e76c5dfc15.png"></p><h2 id="skJOr">1.2 CSS编写位置</h2><h3 id="oIHaT">1.2.1 行内样式/内联样式</h3><ul><li>写在HTML标签的<code>style</code>属性中，只对当前标签有效</li><li>语法：【名1:值1;名2:值2;】的形式</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">h1</span> style=&quot;<span class="hljs-attribute">color</span>:red;<span class="hljs-attribute">font-size</span>:<span class="hljs-number">60px</span>;&quot;&gt;欢迎来到尚硅谷学习&lt;/<span class="hljs-selector-tag">h1</span>&gt;<br></code></pre></td></tr></table></figure><ul><li>未体现出结构与样式分离的思想，不推荐大量使用</li></ul><h3 id="QhzWw">1.2.2 内部样式</h3><ul><li>写在HTML页面中，将CSS代码单独放在<code>style</code>标签中</li><li>语法：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style&gt;<br>  <span class="hljs-selector-tag">h1</span> &#123;<br>    <span class="hljs-attribute">color</span>: red;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">40px</span>;<br>  &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><ul><li><code>&lt;style&gt;</code>标签理论上可以放在 HTML 文档的任何地方，但一般都放在<code>&lt;head&gt;</code>标签中</li><li>结构与样式未完全分离，多个HTML页面无法复用样式</li></ul><h3 id="grR0Y">1.2.3 外部样式</h3><ul><li>写在单独的<code>.css</code>文件中，在HTML文件中引用</li><li>语法：<ul><li>在<code>.css</code>文件中写CSS代码</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span>&#123;<br>  <span class="hljs-attribute">color</span>: red;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">40px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><pre><code class="hljs">- 在HTML文件的`&lt;head&gt;`标签中，用`link`标签引入`.css`文件</code></pre><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;link rel=&quot;stylesheet&quot; href=&quot;./xxx<span class="hljs-selector-class">.css</span>&quot;&gt;<br></code></pre></td></tr></table></figure><ul><li>结构与样式完全分离，推荐使用</li></ul><h3 id="E0BuI">1.2.4 导入式样式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-keyword">@import</span>(01.css)  </span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>若网页加载较慢，会出现html结构，但是没有样式的情况</p><h2 id="GsCJu">1.3 样式表的优先级</h2><p><font style="color:#DF2A3F;background-color:#E8F7CF;"></font><strong><font style="color:#DF2A3F;background-color:#E8F7CF;">行内样式</font></strong><font style="color:#DF2A3F;background-color:#E8F7CF;"> &gt; </font><strong><font style="color:#DF2A3F;background-color:#E8F7CF;">内部样式</font></strong><font style="color:#DF2A3F;background-color:#E8F7CF;"> &#x3D; </font><strong><font style="color:#DF2A3F;background-color:#E8F7CF;">外部样式</font></strong>  </p><ul><li>内部样式和外部样式的优先级相同，后面的会覆盖前面的</li><li>同一个样式表中，优先级也与编写顺序有关，后面的会覆盖前面的</li></ul><h2 id="E2wr9">1.4 CSS语法规范</h2><p>CSS代码 - 两部分组成：</p><ul><li>选择器：找到要添加样式的元素</li><li>声明块：设置具体的样式<ul><li>由一个或多个声明组成</li><li>声明的格式：<code>属性名:属性值;</code></li></ul></li></ul><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1717059922712-53902870-9d81-44e8-9e4a-d8d16698a3b1.png"></p><p>注释的写法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 给h1元素添加样式 */</span><br><span class="hljs-selector-tag">h1</span> &#123;<br><span class="hljs-comment">/* 设置文字颜色为红色 */</span><br><span class="hljs-attribute">color</span>: red;<br><span class="hljs-comment">/* 设置文字大小为40px */</span><br><span class="hljs-attribute">font-size</span>: <span class="hljs-number">40px</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="EcF7j">1.5 CSS代码风格</h2><ul><li>展开风格 - 开发时推荐，便于维护和调试</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">40px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>紧凑风格 - 项目上线时推荐，减小文件体积</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span>&#123;<span class="hljs-attribute">color</span>:red;<span class="hljs-attribute">font-size</span>:<span class="hljs-number">40px</span>;&#125;<br></code></pre></td></tr></table></figure><blockquote><p>不区分大小写，推荐小写</p></blockquote><h1 id="HX1pH">二、CSS选择器</h1><h2 id="sXSDP">2.1 基本选择器</h2><h3 id="n1bd1">2.1.1 通配选择器</h3><ul><li>作用：选中所有的HTML元素</li><li>语法：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">* &#123;<br>  属性名: 属性值;<br>&#125;<br></code></pre></td></tr></table></figure><p>通配符选择效率低，设置的部分公共样式不是所有标签都需要添加</p><p>实际上线的网站不允许使用 * 去清除默认内外边距</p><h3 id="bdynI">2.1.2 元素选择器</h3><ul><li>作用：选中HTML页面中的某个元素，统一设置样式 </li><li>语法：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">标签名 &#123;<br>  属性名: 属性值;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Hfmyu">2.1.3 类选择器</h3><ul><li>作用：根据元素的<code>class</code>属性值，选中某些元素</li><li>语法：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">.类名 &#123;<br>  属性名: 属性值;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>注意<ul><li><code>class</code>类名命名规则<ul><li>不要使用纯数字、中文</li><li>尽量使用数字和英文字母的组合</li><li>多个单词，使用<code>-</code>连接</li><li>见名知意</li></ul></li><li>一个元素不能写多个<code>class</code>属性，但是一个<code>class</code>属可以写多个属性值，用空格隔开</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;!-- 该写法错误，元素的属性不能重复，后写的会失效 --&gt;<br>&lt;<span class="hljs-selector-tag">h1</span> class=&quot;<span class="hljs-attribute">speak</span>&quot; class=&quot;big&quot;&gt;你好啊&lt;/<span class="hljs-selector-tag">h1</span>&gt;<br>&lt;!-- 该写法正确，class属性，能写多个值 --&gt;<br>&lt;<span class="hljs-selector-tag">h1</span> class=&quot;<span class="hljs-attribute">speak</span> big&quot;&gt;你好啊&lt;/<span class="hljs-selector-tag">h1</span>&gt;<br></code></pre></td></tr></table></figure><p>实际中：类上样式CSS、ID上行为JS</p><h3 id="sAeNT">2.1.4 ID选择器</h3><ul><li>作用：根据元素的<code>ID</code>属性值，精准的选中某个元素</li><li>语法：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#id</span>值 &#123;<br>  属性名: 属性值;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>注意<ul><li><code>ID</code>属性值命名规则<ul><li>尽量由字母、数字、下划线、短杠组成</li><li>最好以字母开头</li><li>不包含空格，区分大小写</li></ul></li><li>一个元素只能拥有一个<code>ID</code>属性值，多个元素的<code>ID</code>属性值不能相同</li><li>一个元素可以同时拥有<code>ID</code>属性和<code>class</code>属性</li></ul></li></ul><h2 id="LT05U">2.2 CSS复合选择器</h2><p>复合选择器由多个基础选择器，通过不同方式组合而成</p><h3 id="T2nHG">2.2.1 交集选择器</h3><ul><li>作用：选中同时符合多个条件的元素</li><li>语法：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">选择器<span class="hljs-number">1</span>选择器<span class="hljs-number">2</span>选择器<span class="hljs-number">3</span>...选择器n &#123;<br>  <br>&#125;<br></code></pre></td></tr></table></figure><ul><li>注意<ul><li>有标签名，标签名要写在前面</li><li><code>ID</code>选择器、通配选择器 在 交集选择器中几乎不用，没有意义</li><li>交集选择器中 不可能出现 两个元素选择器</li><li>频率最高的选择器组合是：元素选择器 + 类选择器</li></ul></li></ul><h3 id="eHiHS">2.2.2 并集选择器</h3><ul><li>作用：选中多个选择器对应的元素，又称分组选择器</li><li>语法：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css">选择器<span class="hljs-number">1</span>, <br>选择器<span class="hljs-number">2</span>, <br>选择器<span class="hljs-number">3</span>, <br>... <br>选择器n &#123;<br>  <br>&#125;<br></code></pre></td></tr></table></figure><ul><li>注意<ul><li>并集选择器一般是竖排写</li><li>任何形式的选择器都可以成为并集选择器的一部分</li><li>并集选择器用于集体声明，可以缩小样式表体积</li></ul></li></ul><h3 id="tVx3M">2.2.3 HTML元素间的关系</h3><ul><li><code>父元素</code>：直接包裹某个元素的元素，就是该元素的父元素</li><li><code>子元素</code>：被父元素直接包含的元素（简记：儿子元素）</li><li><code>祖先元素</code>：父亲的父亲……，一直往外找，都是祖先；父元素也是祖先元素</li><li><code>后代元素</code>：儿子的儿子……，一直往里找，都是后代；子元素也是后代元素</li><li><code>兄弟元素</code>：具有相同父元素的元素，互为兄弟元素</li></ul><h3 id="y1ObU">2.2.4 后代选择器</h3><ul><li>作用：选中指定元素中，符合要求的后代元素</li><li>语法：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">选择器<span class="hljs-number">1</span> 选择器<span class="hljs-number">2</span> 选择器<span class="hljs-number">3</span> ...... 选择器n &#123;<br>  <br>&#125;<br></code></pre></td></tr></table></figure><ul><li>注意<ul><li>后代选择器，选中的是后代，不选中祖先</li></ul></li></ul><h3 id="TQPcF">2.2.5 子代选择器</h3><ul><li>作用：选中指定元素中，符合要求的子元素</li><li>语法：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">选择器<span class="hljs-number">1</span> &gt; 选择器<span class="hljs-number">2</span> &gt; 选择器<span class="hljs-number">3</span> &gt; ...... 选择器n &#123;<br>  <br>&#125;<br></code></pre></td></tr></table></figure><ul><li>注意<ul><li>子代选择器，选中的是子代，不选中父亲</li></ul></li></ul><h3 id="NPssa">2.2.6 兄弟选择器</h3><ul><li>相邻兄弟选择器<ul><li>作用：选中指定元素后，符合条件的相邻兄弟元素</li><li>语法：</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">选择器<span class="hljs-number">1</span>+选择器<span class="hljs-number">2</span> &#123;<br>  <br>&#125;<br></code></pre></td></tr></table></figure><ul><li>通用兄弟选择器<ul><li>作用：选中指定元素后，符合条件的所有兄弟元素</li><li>语法：</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">选择器<span class="hljs-number">1</span>~选择器<span class="hljs-number">2</span> &#123;<br>  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="zSwj1">2.2.7 属性选择器</h3><ul><li>作用：选中属性值符合一定要求的元素  </li><li>语法：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-number">1</span>. <span class="hljs-selector-attr">[属性名]</span>       选中具有某个属性的元素。<br><span class="hljs-number">2</span>. <span class="hljs-selector-attr">[属性名=<span class="hljs-string">&quot;值&quot;</span>]</span>  选中包含某个属性，且属性值等于指定值的元素。<br><span class="hljs-number">3</span>. <span class="hljs-selector-attr">[属性名^=<span class="hljs-string">&quot;值&quot;</span>]</span> 选中包含某个属性，且属性值以指定的值开头的元素。<br><span class="hljs-number">4</span>. <span class="hljs-selector-attr">[属性名$=<span class="hljs-string">&quot;值&quot;</span>]</span> 选中包含某个属性，且属性值以指定的值结尾的元素。<br><span class="hljs-number">5</span>. <span class="hljs-selector-attr">[属性名*=<span class="hljs-string">&quot;值&quot;</span>]</span> 选择包含某个属性，属性值包含指定值的元素。’<br></code></pre></td></tr></table></figure><h3 id="EDg4D">2.2.8 伪类选择器</h3><ul><li>作用：选中特殊状态的元素</li></ul><p><strong>常用的伪类选择器：</strong></p><ol><li>动态伪类（巧记：LVHA）<ol><li><code>:link</code>超链接未被访问的状态</li><li><code>:visited</code>超链接访问过的状态</li><li><code>:hover</code>鼠标悬停在元素上的状态</li><li><code>:active</code>元素激活的状态（按住鼠标不松开）</li><li><code>:focus</code>获取焦点的元素（表单类元素才能使用）（点击元素、触摸元素、<code>tab</code>键触发）</li></ol></li><li>结构伪类<ol><li><code>:first-child</code> 所有兄弟元素中的第一个</li><li><code>:last-child</code> 所有兄弟元素中的最后一个</li><li><code>:nth-child(n)</code> 所有兄弟元素中的第n个</li><li><code>:nth-last-child(n)</code> 所有兄弟元素中的倒数第n个  </li><li><code>:first-of-type </code>所有同类型兄弟元素中的第一个</li><li><code>:last-of-type</code> 所有同类型兄弟元素中的最后一个</li><li><code>:nth-of-type(n)</code> 所有同类型兄弟元素中的第n个 </li><li><code>:nth-last-of-type(n)</code> 所有同类型兄弟元素中的 倒数第n个  </li><li><code>:only-child</code> 选择没有兄弟的元素（独生子女） </li><li><code>:only-of-type</code> 选择没有同类型兄弟的元素 </li><li><code>:root</code> 根元素    </li><li><code>:empty</code> 内容为空元素（空格也算内容）</li></ol></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"># 选中的是box类的第一个子元素，并且这个元素是<span class="hljs-selector-tag">p</span>元素 <br># 不是选中box类中的第一个<span class="hljs-selector-tag">p</span>元素哦<br><span class="hljs-selector-class">.box</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:first-child</span> &#123;<br><br>&#125;<br><br><span class="hljs-selector-class">.box</span> <span class="hljs-selector-pseudo">:first-child</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>关于n的值</strong></p><pre><code class="hljs">n是数字的情况- 0 / 不写 - 什么元素也选不中- n - 选中所有子元素- 1 ~ 正整数 - 选中对应序号的子元素n是关键字的情况- 2n / even - 选中序号为偶数的子元素- 2n+1 / odd - 选中序号为奇数的子元素n是公式的情况（n从0开始计算）- -n+3 - 选中的是前3个- n+4 - 选中的是第四个及以后子元素</code></pre><ol start="3"><li>否定伪类<ol><li><code>:not(选择器)</code> 排除满足括号中条件的元素</li></ol></li><li>UI伪类<ol><li><code>:checked</code> 被选中的复选框或单选按钮。</li><li><code>:enable</code> 可用的表单元素（没有 disabled 属性）</li><li><code>:disabled</code> 不可用的表单元素（有 disabled 属性）</li></ol></li><li>目标伪类<ol><li><code>:target</code> 选中锚点指向的元素</li></ol></li><li>语言伪类<ol><li><code>:lang()</code> 根据指定的语言选择元素（本质是看 lang 属性的值）</li></ol></li></ol><h3 id="CTYHF">2.2.9 伪元素选择器</h3><ul><li>作用：选中元素中的一些特殊位置</li><li>常用伪元素<ul><li><code>::first-letter</code> 选中元素中的第一个文字</li><li><code>::first-line</code> 选中元素中的第一行文字</li><li><code>::selection</code> 选中被鼠标选中的内容</li><li><code>::placeholder</code> 选中输入框的提示文字</li><li><code>::before</code> 在元素最开始的位置，创建一个子元素（必须用 content 属性指定内容）</li><li><code>::after</code> 在元素最后的位置，创建一个子元素（必须用 content 属性指定内容）</li></ul></li><li>注意事项<ul><li>伪元素只能给双标签添加，不能给单标签添加</li><li>伪元素的冒号不能有空格</li><li>伪元素里面必须写 <code>content:&quot;&quot;</code></li><li>before和after创建一个行内元素</li><li>在DOM中看不到创建的元素</li></ul></li></ul><h2 id="oHZcv">2.3 选择器的优先级</h2><blockquote><p> 行内样式 &gt; ID选择器 &gt; 类选择器 &gt; 元素选择器 &gt; 通配选择器  </p></blockquote><h3 id="jrYRz">2.3.1 选中目标标签</h3><p>计算方式：每个选择器，都可计算出一组权重，格式为：<code>(a,b,c)</code></p><p>a : ID 选择器的个数</p><p>b : 类、伪类、属性 选择器的个数</p><p>c : 元素、伪元素 选择器的个数 </p><p>并集选择器的每一个部分是分开算的 </p><h3 id="kuqjD">2.3.2 选中目标标签的祖先级</h3><ul><li>第一步：就近原则</li><li>第二步：如果距离目标一样近，比较选择器权重，权重大的层叠权重小的</li><li>第三步：如果距离目标一样近，选择器权重一样，比较书写顺序</li></ul><h3 id="PSXyt">2.3.3 特殊规则</h3><ul><li>行内样式权重大于所有选择器  </li><li><code>!important</code> 的权重，大于行内样式，大于所有选择器，权重最高<ul><li>格式：<code>属性:属性值 !important</code></li><li><code>important</code>不能提升选择器的权重，只能提升某个属性的权重到最大</li><li>就近原则中，不需要比较选择器的权重，所有important会失效</li></ul></li></ul><h1 id="gyFCx">三、CSS三大特性</h1><h2 id="ztnee">3.1 层叠性</h2><p>概念：如果发生了样式冲突，那就会根据一定的规则（选择器优先级），进行样式的层叠（覆盖）</p><ul><li>样式冲突：元素的同一个样式名，被设置了不同的值，这就是冲突</li></ul><blockquote><p>如果选择器权重都相同，需要比较CSS中代码的书写顺序，后写的层叠先写的</p></blockquote><h2 id="NO2TK">3.2 继承性</h2><p>概念：元素会自动拥有其父元素、或其祖先元素上所设置的某些样式（文字相关样式属性）</p><p>规则：优先继承离得近的</p><p>常见的可继承属性：<code>text-??</code>，<code>font-??</code>，<code>line-??</code>，<code>color</code>…</p><h2 id="MfrO9">3.3 优先级</h2><ul><li><code>!important</code> &gt; 行内样式 &gt; ID选择器 &gt; 类选择器 &gt; 元素选择器 &gt; <code>*</code> &gt; 继承的样式</li></ul><h1 id="DKA7k">四、CSS常用属性</h1><h2 id="ExuWu">4.1 像素的概念</h2><p>概念：我们的电脑屏幕是，是由一个一个“小点”组成的，每个“小点”，就是一个像素（px）  </p><p>规律：像素点越小，呈现的内容就越清晰、越细腻  </p><h2 id="JO5lX">4.2 颜色的表示</h2><h3 id="Srnjg">4.2.1 颜色名</h3><ul><li>红色：<code>red</code></li><li>绿色：<code>green</code></li><li>蓝色：<code>blue</code></li><li>紫色：<code>purple</code></li><li>橙色：<code>orange</code></li><li>灰色：<code>gray</code></li></ul><h3 id="p5AST">4.2.2 RGB / RGBA</h3><ul><li>编写方式：使用红、黄、蓝三种光的三原色进行组合<ul><li>r - 红色</li><li>g - 绿色</li><li>b - 蓝色</li><li>a - 透明度</li></ul></li><li>规律<ul><li>三种颜色值相同，呈现的是灰色，值越大，灰色越浅</li><li><code>rgb(0,0,0)</code>是黑色，<code>rgb(255,255,255)</code>是白色</li><li><code>rgba</code>来说，前三位<code>rgb</code>的形式要保持一致，要么是0~255的数字，要么是百分比</li></ul></li></ul><h3 id="nA8K9">4.2.3 HEX / HEXA</h3><ul><li>编写方式：<code>#rrggbb</code><ul><li>每一位数字的取值范围是 <code>0 ~ f</code></li><li>每种光的最小值是<code>00</code>，最大值是<code>ff</code></li><li>如果每种光的两位都是相同的，可以简写成<code>#rgb</code>，透明度也要相应简写</li></ul></li><li>IE浏览器不支持<code>HEXA</code>，支持<code>HEX</code></li></ul><h3 id="pfvzG">4.2.4 HSL / HSLA</h3><ul><li>编写方式： 色相、饱和度、亮度，来表示一个颜色的，hsl(色相,饱和度,亮度)  <ul><li>色相：取值范围是 0~360 度</li></ul></li></ul><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1717249522837-99d49076-07c5-40d4-959b-9e24e59f6ebd.png"> </p><pre><code class="hljs">- 饱和度：取值范围是 0%~100%（向色相中对应颜色中添加灰色，0% 全灰，100% 没有灰）- 亮度：取值范围是 0%~100%（ 0% 无亮度 - 黑色。 100% 全亮度 - 白色）</code></pre><h2 id="s50i1">4.3 CSS字体属性</h2><h3 id="tzRhB">4.3.1 字体大小  `font-size`</h3><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">40px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意事项：</p><ol><li>Chrome 浏览器支持的最小文字为 12px ，默认的文字大小为 16px ，并且 0px 会自动消失</li><li>不同浏览器默认的字体大小可能不一致，所以最好给一个明确的值，不要用默认大小</li><li>通常以给 body 设置 font-size 属性，这样 body 中的其他元素就都可以继承了</li></ol><p>展开说说：</p><ul><li>由于字体设计原因，文字最终呈现的大小，并不一定与 font-size 的值一致，可能大，也可能小</li><li>通常情况下，文字相对字体设计框，并不是垂直居中的，通常都靠下一些</li></ul><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1727437573159-0ffb945e-af0a-40bf-a1c3-83286ecb987f.png"></p><p>实际应用：</p><ul><li>网页中最小设置字号必须是12px，如果低于12px会出现兼容问题，现在网页中普通使用14px+</li><li>尽量使用12px、14px、16px等偶数的数字字号，ie6等老式浏览器奇数字号会有bug</li></ul><h3 id="xWbCN">4.3.2 字体族 `font-family`</h3><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;STCaiyun&quot;</span>,<span class="hljs-string">&quot;Microsoft YaHei&quot;</span>,sans-serif<br>&#125;<br></code></pre></td></tr></table></figure><p>注意事项：</p><ol><li>使用字体的英文名字兼容性会更好，具体的英文名可以自行查询，或在电脑的设置里去寻找</li><li>如果字体名包含空格，必须使用引号包裹起来</li><li>可以设置多个字体，按照从左到右的顺序逐个查找，找到就用，没有找到就使用后面的，且通常在最后写上 serif （衬线字体）或 sans-serif （非衬线字体）</li><li>windows 系统中，默认的字体就是微软雅黑</li></ol><p>常用的中文字体：</p><ul><li>宋体 SimSun</li><li>微软雅黑 Microsoft Yahei</li></ul><p>常用的英文字体：</p><ul><li>Arial</li><li>consolas</li></ul><p>电脑自带字体库：</p><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1727436893940-df35d9fe-30e5-4521-b718-a8658fd97358.png"></p><blockquote><p>英文和中文都放一个备用字体，防止用户电脑上没有设置的字体</p><p>建议英文字体写在属性值最前面</p></blockquote><h3 id="4-3-3-字体风格-font-style"><a href="#4-3-3-字体风格-font-style" class="headerlink" title="4.3.3 字体风格 font-style"></a>4.3.3 字体风格 font-style</h3><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">font-style</span>: italic;<br>&#125;<br></code></pre></td></tr></table></figure><p>常用值：</p><ul><li>normal ：正常（默认值）</li><li>italic ：斜体（使用字体自带的斜体效果）</li><li>oblique ：斜体（强制倾斜产生的斜体效果）</li></ul><h3 id="4-3-4-字体粗细-font-weight"><a href="#4-3-4-字体粗细-font-weight" class="headerlink" title="4.3.4 字体粗细 font-weight"></a>4.3.4 字体粗细 font-weight</h3><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">font-weight</span>: bold;<br>&#125;<br><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">600</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>常用值：</p><ul><li>lighter ：细</li><li>normal ： 正常</li><li>bold ：粗</li><li>bolder ：很粗 （多数字体不支持）</li></ul><p>数值：</p><ul><li>100~900 且无单位，数值越大，字体越粗 （或一样粗，具体得看字体设计时的精确程度）</li><li>100<del>300 等同于 <code>lighter</code> ， 400</del>500 等同于 <code>normal</code> ， 600 及以上等同于 <code>bold</code></li></ul><h3 id="4-3-5-字体复合写法-font"><a href="#4-3-5-字体复合写法-font" class="headerlink" title="4.3.5 字体复合写法 font"></a>4.3.5 字体复合写法 font</h3><p>编写规则：</p><ul><li>字体、字号必须都写上，且字号在前，字体在后</li><li>三个值的写法：<code>字号/行高 字体</code></li><li>加粗和斜体只能写在最前面</li><li>字体族必须是最后一位、字体大小必须是倒数第二位</li><li>各个属性间用空格隔开</li></ul><h2 id="I9rfe">4.4 CSS文本属性</h2><h3 id="SDAA7">4.4.1 文本颜色 `color`</h3><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">112</span>,<span class="hljs-number">45</span>,<span class="hljs-number">78</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>可选值：</p><ul><li>.颜色名</li><li>rgb 或 rgba</li><li>HEX 或 HEXA （十六进制）</li><li>HSL 或 HSLA</li></ul><h3 id="CZrDH">4.4.2 文本间距</h3><p>字母间距：<code>letter-spacing</code> </p><p>单词间距：<code>word-spacing</code> （通过空格识别词） </p><p>属性值：像素<code>px</code>，正值让间距增大，负值让间距缩小。  </p><h3 id="4-4-3-文本修饰-text-decoration"><a href="#4-4-3-文本修饰-text-decoration" class="headerlink" title="4.4.3 文本修饰 text-decoration"></a>4.4.3 文本修饰 text-decoration</h3><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span> &#123;<br>  <span class="hljs-attribute">text-decoration</span>: underline dotted red;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1717251068223-a0ce8431-fd97-4bb9-8c00-dcdb54a51590.png"></p><p>可选值：</p><ol><li>none ： 无装饰线（常用）</li><li>underline ：下划线（常用）</li><li>overline ： 上划线</li><li>line-through ： 删除线</li></ol><p>可搭配如下值使用：</p><ol><li>dotted ：虚线</li><li>wavy ：波浪线</li><li>也可以指定颜色</li></ol><h3 id="4-4-4-文本缩进-text-indent"><a href="#4-4-4-文本缩进-text-indent" class="headerlink" title="4.4.4 文本缩进 text-indent"></a>4.4.4 文本缩进 text-indent</h3><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">text-indent</span>:<span class="hljs-number">40px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>属性值：CSS的长度单位（正负数代表方向）</p><ul><li><code>px</code>单位：首行缩进多少像素</li><li>em单位：首行缩进多少字符</li><li>百分比：缩进文字所在标签的父标签width属性值的百分比</li></ul><h3 id="4-4-5-文本对齐-text-align"><a href="#4-4-5-文本对齐-text-align" class="headerlink" title="4.4.5 文本对齐 text-align"></a>4.4.5 文本对齐 text-align</h3><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">text-align</span>: center;<br>&#125;<br></code></pre></td></tr></table></figure><p>常用</p><ol><li>left ：左对齐（默认值）</li><li>right ：右对齐</li><li>center ：居中对齐</li></ol><h3 id="4-4-6-行高-line-height"><a href="#4-4-6-行高-line-height" class="headerlink" title="4.4.6 行高 line-height"></a>4.4.6 行高 line-height</h3><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">60px</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.5</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">150%</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1717251940004-a8c7127b-baa0-4eac-a0da-9e94995a2975.png"></p><p>可选值：</p><ol><li>normal ：由浏览器根据文字大小决定的一个默认值</li><li>像素( px )</li><li>数字：参考自身 font-size 的倍数（很常用）</li><li>百分比：参考自身 font-size 的百分比</li></ol><p>注意事项：</p><ul><li><code>line-height</code>过小，文字会产生重叠，最小值是0，不能为负数</li><li><code>line-height</code>可以继承的，且为了能更好的呈现文字，最好写数值</li><li>设置了<code>height</code>，高度就是<code>height</code>的值</li><li>未设置<code>height</code>，高度根据<code>line-height</code>计算</li></ul><p>应用场景：</p><ul><li>多行文字，控制行与行之间的距离</li><li>单行文字，让<code>height</code>等于<code>line-height</code>，可以实现文字垂直居中</li></ul><h3 id="NF8xZ">4.4.7 文本对齐_垂直</h3><p><strong>顶部：</strong>无需任何属性，在垂直方向上，默认就是顶部对齐</p><p><strong>居中：</strong>单行文字，<code>line-height = height</code></p><p><strong>底部：</strong>单行文字，<code>line-height = ( height × 2 ) - font-size - x</code></p><h3 id="K1ad8">4.4.8 vertical-align</h3><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html">vertical-align: baseline; //基线<br>vertical-align: middle;<br>vertical-align: top;<br>vertical-align: bottom;<br><br>vertical-align: sub; //下标基线<br>vertical-align: super; //上标基线<br>vertical-align: text-top; //字体顶部对齐<br>vertical-align: text-bottom; //字体底部对齐<br></code></pre></td></tr></table></figure><p>作用：用于指定行内元素或表格单元格元素的垂直对齐方式</p><h2 id="gOHVS">4.5 CSS列表属性</h2><p>列表相关的属性，可以作用在 ul 、 ol 、 li 元素上</p><table><thead><tr><th>CSS 属性名</th><th>功能</th><th>属性值</th></tr></thead><tbody><tr><td>list-style-type</td><td>设置列表符号</td><td>常用值如下： <br>none ：不显示前面的标识（很常用！） <br>square ：实心方块 <br>disc ：圆形 <br>decimal ：数字 <br>lower-roman ：小写罗马字 <br>upper-roman ：大写罗马字 <br>lower-alpha ：小写字母 <br>upper-alpha ：大写字母</td></tr><tr><td>list-style-position</td><td>设置列表符号的位置</td><td>inside ：在 li 的里面 <br>outside ：在 li 的外边</td></tr><tr><td>list-style-image</td><td>自定义列表符号</td><td>url(图片地址)</td></tr><tr><td>list-style</td><td>复合属性</td><td>没有数量、顺序的要求</td></tr></tbody></table><h2 id="wKx1Y">4.6 CSS表格属性</h2><h3 id="cgeSI">4.6.1 边框相关属性（其他元素也能用）</h3><table><thead><tr><th>CSS 属性名</th><th>功能</th><th>属性值</th></tr></thead><tbody><tr><td>border-width</td><td>边框宽度</td><td>CSS 中可用的长度值</td></tr><tr><td>border-color</td><td>边框颜色</td><td>CSS 中可用的颜色值</td></tr><tr><td>border-style</td><td>边框样式</td><td>none 默认值 <br>solid 实线<br>dashed 虚线 <br>dotted 点线 <br>double 双实线</td></tr><tr><td>border</td><td>边框复合属性</td><td>没有数量、顺序的要求</td></tr></tbody></table><h3 id="SG47K">4.6.2 表格独有属性（只有table标签才能使用）</h3><table><thead><tr><th>CSS 属性名</th><th>功能</th><th>属性值</th></tr></thead><tbody><tr><td>table-layout</td><td>设置列宽度</td><td>auto ：自动，列宽根据内容计算（默认值）<br>fixed ：固定列宽，平均分</td></tr><tr><td>border-spacing</td><td>单元格间距</td><td>CSS 中可用的长度值<br>生效的前提：单元格边框不能合并</td></tr><tr><td>border-collapse</td><td>合并单元格边框</td><td>collapse ：合并<br>separate ：不合并</td></tr><tr><td>empty-cells</td><td>隐藏没有内容的单元格</td><td>show ：显示，默认 <br>hide ：隐藏 生效前提：单元格不能合并</td></tr><tr><td>caption-side</td><td>设置表格标题位置</td><td>top ：上面（默认值） <br>bottom ：在表格下面</td></tr></tbody></table><h2 id="woEQm">4.7 CSS背景属性</h2><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1726534909903-adf72a4f-2f6c-439e-a739-d8597028c41b.png"></p><p><code>background-position</code></p><ul><li>百分比值<ul><li>100% 表示的是父元素宽度减去图片宽度</li><li>如果设置为50% 50%，则图片在父元素中居中显示</li></ul></li></ul><p><code>background-attachment</code></p><ul><li>参考的位置是浏览器视口</li><li>属性值：scroll、fixed</li></ul><h2 id="KXWJO">4.8 CSS鼠标属性</h2><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1726535364534-8ecacb63-ddeb-4659-a6fd-dd0ad53a5898.png"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 自定义鼠标光标 */</span><br><span class="hljs-attribute">cursor</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;./arrow.png&quot;</span>),pointer;<br></code></pre></td></tr></table></figure><h1 id="五、CSS盒模型"><a href="#五、CSS盒模型" class="headerlink" title="五、CSS盒模型"></a>五、CSS盒模型</h1><h2 id="5-1-CSS长度单位"><a href="#5-1-CSS长度单位" class="headerlink" title="5.1 CSS长度单位"></a>5.1 CSS长度单位</h2><ol><li><code>px</code> ：像素</li><li><code>em</code> ：相对元素 font-size 的倍数</li><li><code>rem</code> ：相对根字体大小，html标签就是根</li><li><code>%</code> ：相对父元素计算</li></ol><p>:::success<br> 注意：CSS 中设置长度，必须加单位，否则样式无效！  </p><p>:::</p><h2 id="xdnTv">5.2 元素的显示模式</h2><h3 id="P0LFD">5.2.1 块元素</h3><p>又称：块级元素<br>特点：</p><ol><li>在页面中独占一行，不会与任何元素共用一行，是从上到下排列的</li><li>默认宽度：撑满父元素</li><li>默认高度：由内容撑开</li><li>可以通过 CSS 设置宽高</li></ol><h3 id="f5dLl">5.2.2 行内元素</h3><p>又称：内联元素<br>特点:</p><ol><li>在页面中不独占一行，一行中不能容纳下的行内元素，会在下一行继续从左到右排列</li><li>默认宽度：由内容撑开</li><li>默认高度：由内容撑开</li><li>无法通过 CSS 设置宽高</li></ol><h3 id="YnI9m">5.2.3 行内块元素</h3><p>又称：内联块元素<br>特点：</p><ol><li>在页面中不独占一行，一行中不能容纳下的行内元素，会在下一行继续从左到右排列</li><li>默认宽度：由内容撑开</li><li>默认高度：由内容撑开</li><li>可以通过 CSS 设置宽高</li></ol><h2 id="AeSAg">5.3 各元素的显示模式</h2><ul><li><strong><font style="color:rgb(102, 102, 102);">块元素(block)</font></strong></li></ul><p><font style="color:rgb(102, 102, 102);">1.主体结构标签：</font><code>&lt;font style=&quot;color:rgb(102, 102, 102);&quot;&gt;&lt;html&gt;、&lt;body&gt;&lt;/font&gt;</code></p><p><font style="color:rgb(102, 102, 102);">2.排版标签：</font><code>&lt;font style=&quot;color:rgb(102, 102, 102);&quot;&gt;&lt;h1&gt;&lt;h6&gt;、&lt;hr&gt;、p&gt;、pre&gt;、&lt;div&gt;&lt;/font&gt;</code></p><p><font style="color:rgb(102, 102, 102);">3.列表标签：</font><code>&lt;font style=&quot;color:rgb(102, 102, 102);&quot;&gt;&lt;ul&gt;、&lt;ol&gt;、&lt;li&gt;、&lt;dl&gt;、&lt;dt&gt;、&lt;dd&gt;&lt;/font&gt;</code></p><p><font style="color:rgb(102, 102, 102);">4.表格标签：</font><code>&lt;font style=&quot;color:rgb(102, 102, 102);&quot;&gt;&lt;table&gt;、&lt;tbody&gt;、&lt;thead&gt;、&lt;tfoot&gt;、&lt;tr&gt;、&lt;caption&gt;&lt;/font&gt;</code></p><p><font style="color:rgb(102, 102, 102);">5.</font><code>&lt;font style=&quot;color:rgb(102, 102, 102);&quot;&gt;&lt;form&gt;与&lt;option&gt;&lt;/font&gt;</code></p><ul><li><strong><font style="color:rgb(102, 102, 102);">行内元素(inline)</font></strong></li></ul><p><font style="color:rgb(102, 102, 102);">1.文本标签：</font><code>&lt;font style=&quot;color:rgb(102, 102, 102);&quot;&gt;&lt;br&gt;、&lt;em&gt;、&lt;strong&gt;、&lt;sup&gt;、&lt;sub&gt;、&lt;del&gt;、&lt;ins&gt;&lt;/font&gt;</code></p><p><font style="color:rgb(102, 102, 102);">2.</font><code>&lt;font style=&quot;color:rgb(102, 102, 102);&quot;&gt;&lt;a&gt;与&lt;label&gt;&lt;/font&gt;</code></p><ul><li><strong><font style="color:rgb(102, 102, 102);">行内块元素(inline-block)</font></strong></li></ul><p><font style="color:rgb(102, 102, 102);">1.图片：</font><code>&lt;font style=&quot;color:rgb(102, 102, 102);&quot;&gt;&lt;img&gt;&lt;/font&gt;</code></p><p><font style="color:rgb(102, 102, 102);">2.单元格：</font><code>&lt;font style=&quot;color:rgb(102, 102, 102);&quot;&gt;&lt;td&gt;、&lt;th&gt;&lt;/font&gt;</code></p><p><font style="color:rgb(102, 102, 102);">3.表单控件：</font><code>&lt;font style=&quot;color:rgb(102, 102, 102);&quot;&gt;&lt;input&gt;、&lt;textarea&gt;、&lt;select&gt;、&lt;button&gt;&lt;/font&gt;</code></p><p><font style="color:rgb(102, 102, 102);">4.框架标签：</font><code>&lt;font style=&quot;color:rgb(102, 102, 102);&quot;&gt;&lt;iframe&gt;&lt;/font&gt;</code></p><h2 id="wSUPe">5.4 修改元素的显示模式</h2><p>修改CSS中的<code>display</code>属性：</p><table><thead><tr><th align="left"><font style="color:rgb(102, 102, 102);">值</font></th><th align="left"><font style="color:rgb(102, 102, 102);">描述</font></th></tr></thead><tbody><tr><td align="left"><font style="color:rgb(102, 102, 102);">none</font></td><td align="left"><font style="color:rgb(102, 102, 102);">元素会被隐藏</font></td></tr><tr><td align="left"><font style="color:rgb(102, 102, 102);">block</font></td><td align="left"><font style="color:rgb(102, 102, 102);">元素将作为块级元素显示</font></td></tr><tr><td align="left"><font style="color:rgb(102, 102, 102);">inline</font></td><td align="left"><font style="color:rgb(102, 102, 102);">元素将作为内联元素显示</font></td></tr><tr><td align="left"><font style="color:rgb(102, 102, 102);">inline-block</font></td><td align="left"><font style="color:rgb(102, 102, 102);">元素将作为行内块元素显示</font></td></tr></tbody></table><h2 id="SLeG0">5.5 盒子模型的组成</h2><p>CSS 会把所有的 HTML 元素都看成一个盒子，所有的样式也都是基于这个盒子</p><ol><li>margin（外边距）： 盒子与外界的距离</li><li>border（边框）： 盒子的边框</li><li>padding（内边距）： 紧贴内容的补白区域</li><li>content（内容）：元素中的文本或后代元素都是它的内容</li></ol><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1726536777716-581e3507-5824-496e-ba8c-6a66c37a9941.png"></p><p>盒子的大小 &#x3D; <code>content</code> + 左右 <code>padding</code> + 左右 <code>border</code></p><p>:::success<br>注意：外边距 margin 不会影响盒子的大小，但会影响盒子的位置  </p><p>:::</p><h2 id="p1B1N">5.6 盒子内容区</h2><table><thead><tr><th align="left"><font style="color:rgb(102, 102, 102);">CSS 属性名</font></th><th align="left"><font style="color:rgb(102, 102, 102);">功能</font></th><th align="left"><font style="color:rgb(102, 102, 102);">属性值</font></th></tr></thead><tbody><tr><td align="left"><font style="color:rgb(102, 102, 102);">width</font></td><td align="left"><font style="color:rgb(102, 102, 102);">设置内容区域宽度</font></td><td align="left"><font style="color:rgb(102, 102, 102);">长度</font></td></tr><tr><td align="left"><font style="color:rgb(102, 102, 102);">max-width</font></td><td align="left"><font style="color:rgb(102, 102, 102);">设置内容区域的最大宽度</font></td><td align="left"><font style="color:rgb(102, 102, 102);">长度</font></td></tr><tr><td align="left"><font style="color:rgb(102, 102, 102);">min-width</font></td><td align="left"><font style="color:rgb(102, 102, 102);">设置内容区域的最小宽度</font></td><td align="left"><font style="color:rgb(102, 102, 102);">长度</font></td></tr><tr><td align="left"><font style="color:rgb(102, 102, 102);">height</font></td><td align="left"><font style="color:rgb(102, 102, 102);">设置内容区域的高度</font></td><td align="left"><font style="color:rgb(102, 102, 102);">长度</font></td></tr><tr><td align="left"><font style="color:rgb(102, 102, 102);">max-height</font></td><td align="left"><font style="color:rgb(102, 102, 102);">设置内容区域的最大高度</font></td><td align="left"><font style="color:rgb(102, 102, 102);">长度</font></td></tr><tr><td align="left"><font style="color:rgb(102, 102, 102);">min-height</font></td><td align="left"><font style="color:rgb(102, 102, 102);">设置内容区域的最小高度</font></td><td align="left"><font style="color:rgb(102, 102, 102);">长度</font></td></tr></tbody></table><p>:::success<br> 注意： </p><p>max-width 、 min-width 一般不与 width 一起使用</p><p>max-height 、 min-height 一般不与 height 一起使用 </p><h2 id="5-7-默认宽度"><a href="#5-7-默认宽度" class="headerlink" title="5.7 默认宽度"></a>5.7 默认宽度</h2><p>默认宽度：就是不设置 width 属性时，元素所呈现出来的宽度 </p><p>总宽度 &#x3D; 父的 <code>content</code> — 自身的左右 <code>margin </code> </p><p>内容区的宽度 &#x3D; 父的 <code>content</code> — 自身的左右 <code>margin</code> — 自身的左右 <code>border</code> — 自身的左右 <code>padding </code> </p><p><code>width</code>属性和height属性的三种值</p><ul><li>auto</li><li>px</li><li>%</li></ul><h2 id="5-8-盒子内边距（padding）"><a href="#5-8-盒子内边距（padding）" class="headerlink" title="5.8 盒子内边距（padding）"></a>5.8 盒子内边距（padding）</h2><table><thead><tr><th align="left"><font style="color:rgb(102, 102, 102);">CSS属性名</font></th><th align="left"><font style="color:rgb(102, 102, 102);">功能</font></th><th align="left"><font style="color:rgb(102, 102, 102);">属性值</font></th></tr></thead><tbody><tr><td align="left"><font style="color:rgb(102, 102, 102);">padding-top</font></td><td align="left"><font style="color:rgb(102, 102, 102);">上内边距</font></td><td align="left"><font style="color:rgb(102, 102, 102);">长度</font></td></tr><tr><td align="left"><font style="color:rgb(102, 102, 102);">padding-right</font></td><td align="left"><font style="color:rgb(102, 102, 102);">右内边距</font></td><td align="left"><font style="color:rgb(102, 102, 102);">长度</font></td></tr><tr><td align="left"><font style="color:rgb(102, 102, 102);">padding-bottom</font></td><td align="left"><font style="color:rgb(102, 102, 102);">下内边距</font></td><td align="left"><font style="color:rgb(102, 102, 102);">长度</font></td></tr><tr><td align="left"><font style="color:rgb(102, 102, 102);">padding-left</font></td><td align="left"><font style="color:rgb(102, 102, 102);">左内边距</font></td><td align="left"><font style="color:rgb(102, 102, 102);">长度</font></td></tr><tr><td align="left"><font style="color:rgb(102, 102, 102);">padding</font></td><td align="left"><font style="color:rgb(102, 102, 102);">复合属性</font></td><td align="left"><font style="color:rgb(102, 102, 102);">长度,可以设置1~4个值</font></td></tr></tbody></table><p>padding 复合属性的使用规则：</p><ol><li>padding: 10px; 四个方向内边距都是 10px 。</li><li>padding: 10px 20px; 上 10px ，左右 20px 。（上下、左右）</li><li>padding: 10px 20px 30px; 上 10px ，左右 20px ，下 30px 。（上、左右、下）</li><li>padding: 10px 20px 30px 40px; 上 10px ，右 20px ，下 30px ，左 40px 。（上、右、下、左）</li></ol><p>:::success<br>注意：</p><ol><li>padding 的值不能为负数</li><li>行内元素 的 左右内边距是没问题的，上下内边距不能完美的设置</li><li>块级元素、行内块元素，四个方向内边距都可以完美设置</li></ol><p>:::</p><h2 id="5-9-盒子边框（border）"><a href="#5-9-盒子边框（border）" class="headerlink" title="5.9 盒子边框（border）"></a>5.9 盒子边框（border）</h2><p>顺序为：宽度、样式、颜色</p><table><thead><tr><th align="left"><font style="color:rgb(102, 102, 102);">CSS属性名</font></th><th align="left"><font style="color:rgb(102, 102, 102);">功能</font></th><th align="left"><font style="color:rgb(102, 102, 102);">属性值</font></th></tr></thead><tbody><tr><td align="left"><font style="color:rgb(102, 102, 102);">border-style</font></td><td align="left"><font style="color:rgb(102, 102, 102);">边框线风格   </font><font style="color:rgb(102, 102, 102);">复合了四个方向的边框风格</font></td><td align="left"><font style="color:rgb(102, 102, 102);">none:   </font><font style="color:rgb(102, 102, 102);">默认值   </font><font style="color:rgb(102, 102, 102);">solid : 实线   </font><font style="color:rgb(102, 102, 102);">dashed: 虚线   </font><font style="color:rgb(102, 102, 102);">dotted :   </font><font style="color:rgb(102, 102, 102);">点线   </font><font style="color:rgb(102, 102, 102);">double: 双实线</font></td></tr><tr><td align="left"><font style="color:rgb(102, 102, 102);">border-width</font></td><td align="left"><font style="color:rgb(102, 102, 102);">边框线宽度   </font><font style="color:rgb(102, 102, 102);">复合了四个方向的边框宽度</font></td><td align="left"><font style="color:rgb(102, 102, 102);">长度,默认 3px</font></td></tr><tr><td align="left"><font style="color:rgb(102, 102, 102);">border-color</font></td><td align="left"><font style="color:rgb(102, 102, 102);">边框线颜色   </font><font style="color:rgb(102, 102, 102);">复合了四个方向的边框颜色</font></td><td align="left"><font style="color:rgb(102, 102, 102);">颜色,默认黑色</font></td></tr><tr><td align="left"><font style="color:rgb(102, 102, 102);">border</font></td><td align="left"><font style="color:rgb(102, 102, 102);">复合属性</font></td><td align="left"><font style="color:rgb(102, 102, 102);">值 没有顺序和数量要求。</font></td></tr><tr><td align="left"><font style="color:rgb(102, 102, 102);">border-left</font></td><td align="left"><font style="color:rgb(102, 102, 102);">分别设置各个方向的边框</font></td><td align="left"><font style="color:rgb(102, 102, 102);">同上</font></td></tr><tr><td align="left"><font style="color:rgb(102, 102, 102);">border-left-style</font></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"><font style="color:rgb(102, 102, 102);">border-left-width</font></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"><font style="color:rgb(102, 102, 102);">border-left-color</font></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"><font style="color:rgb(102, 102, 102);">border-right</font></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"><font style="color:rgb(102, 102, 102);">border-right-style</font></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"><font style="color:rgb(102, 102, 102);">border-right-width</font></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"><font style="color:rgb(102, 102, 102);">border-right-color</font></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"><font style="color:rgb(102, 102, 102);">border-top</font></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"><font style="color:rgb(102, 102, 102);">border-top-style</font></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"><font style="color:rgb(102, 102, 102);">border-top-width</font></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"><font style="color:rgb(102, 102, 102);">border-top-color</font></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"><font style="color:rgb(102, 102, 102);">border-bottom</font></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"><font style="color:rgb(102, 102, 102);">border-bottom-style</font></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"><font style="color:rgb(102, 102, 102);">border-bottom-width</font></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"><font style="color:rgb(102, 102, 102);">border-bottom-color</font></td><td align="left"></td><td align="left"></td></tr></tbody></table><p>边框相关属性共 20 个</p><p>border-style 、 border-width 、 border-color 其实也是复合属性 </p><h2 id="ZNVmN">5.10 盒子外边距（margin）</h2><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1726542598560-f34063df-6d27-4d9f-8536-5de94e032faf.png"></p><h3 id="ITXvi">5.10.1 margin注意事项</h3><p>:::success</p><ol><li>子元素的 margin ，是参考父元素的 content 计算的。（因为是父亲的 content 中承装着子元素）</li><li>上 margin 、左 margin ：影响自己的位置；下 margin 、右 margin ：影响后面兄弟元素的位置</li><li>块级元素、行内块元素，均可以完美地设置四个方向的 margin ；但行内元素，左右margin 可以完美设置，上下 margin 设置无效</li><li>margin 的值也可以是 auto ，如果给一个块级元素设置左右 margin 都为 auto ，该块级元素会在父元素中水平居中</li><li>margin 的值可以是负值</li></ol><p>:::</p><h3 id="pEUYl">5.10.2 margin塌陷问题</h3><p><strong>什么是margin塌陷？</strong></p><p>第一个子元素的上 margin 会作用在父元素上，最后一个子元素的下 margin 会作用在父元素上  </p><p><strong>如何解决margin塌陷？</strong></p><ul><li>方案一： 给父元素设置不为 0 的 padding</li><li>方案二： 给父元素设置宽度不为 0 的 border</li><li>方案三：给父元素设置 css 样式 overflow:hidden</li></ul><h3 id="gormM">5.10.3 margin合并问题</h3><p><strong>什么是margin合并？</strong></p><p>上面兄弟元素的下外边距和下面兄弟元素的上外边距会合并，取一个最大的值，而不是相加  </p><p><strong>如何解决margin合并？</strong></p><p>无需解决，布局的时候上下的兄弟元素，只给一个设置上下外边距就可以了</p><h2 id="fk9A9">5.11 处理内容溢出</h2><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1726546276744-027ac87d-988d-449c-9cf3-ce8176ab7cb9.png"><br>注意：</p><ol><li>overflow-x 、 overflow-y 不能一个是 hidden ，一个是 visible ，是实验性属性，不建议使用</li><li>overflow 常用的值是 hidden 和 auto ，除了能处理溢出的显示方式，还可以解决很多疑难杂症</li></ol><h2 id="XEKRu">5.12 隐藏元素的方式</h2><h3 id="RZQ7o">5.12.1 方式一：`visibility` 属性 </h3><p>visibility 属性默认值是 show ，如果设置为 hidden ，元素会隐藏</p><p>元素看不见了，还占有原来的位置（元素的大小依然保持） </p><h3 id="ib4Gr">5.12.2 方式二： `display` 属性 </h3><p>设置 display:none ，就可以让元素隐藏</p><p>彻底地隐藏，不但看不见，也不占用任何位置，没有大小宽高</p><h2 id="N8NnE">5.13 样式的继承</h2><p>有些样式会继承，元素如果本身设置了某个样式，就使用本身设置的样式；但如果本身没有设置某个样 式，会从父元素开始一级一级继承（优先继承离得近的祖先元素）  </p><h3 id="QjHAr">5.13.1 会继承的CSS属性</h3><p>字体属性、文本属性（除了vertical-align）、文字颜色  </p><h3 id="w2Lc3">5.13.2 不会继承的CSS属性</h3><p>边框、背景、内边距、外边距、宽高、溢出方式  </p><p>:::success<br> 一个规律：能继承的属性，都是不影响布局的，简单说：都是和盒子模型没关系的</p><p>:::</p><h2 id="kovpA">5.14 默认样式</h2><p>元素一般都有些默认的样式</p><p>优先级：元素的默认样式 &gt; 继承的样式</p><p>如果重置该元素的默认样式，选择器要直接选择到该元素</p><h2 id="RB4PB">5.15 布局小技巧</h2><ol><li>行内元素、行内块元素，可以父元素当做文本处理<ol><li><code>text-align</code> - 水平对齐方式</li><li><code>line-height</code></li><li><code>text-indent</code></li></ol></li><li>如何让子元素在父元素中水平居中<ol><li>若子元素为块元素，给父元素加上<code>margin: 0 auto</code></li><li>若子元素为行内元素、行内块元素，给父元素加上<code>text-align:center</code></li></ol></li><li>如何让子元素在父元素中垂直居中<ol><li>若子元素为块元素，给子元素加上<code>margin-top</code>，值为（父元素content - 子元素盒子总高）&#x2F; 2</li><li>若子元素为行内元素、行内块元素，给父元素加上<code>height=line-height</code>，子元素加上<code>vertical-align:middle</code><ol><li>若想绝对居中，设置父元素的<code>font-size:0</code></li></ol></li></ol></li></ol><h2 id="mjO4M">5.16 元素之间的空白问题</h2><p>产生原因：</p><p>行内元素、行内块元素，彼此之间的换行会被浏览器解析为一个空白字符</p><p>解决方案：</p><p>方案一：去掉换行和空格</p><p>方案二：给父元素设置<code>font-size:0</code>，再给需要显示文字的元素，单独设置字体大小（推荐）</p><h2 id="SR4ke">5.17 行内块的幽灵空白问题</h2><p>产生原因：</p><p>行内块元素与文本的基线对齐，而文本的基线与文本最底端之间是有一定距离的</p><p>解决方案：</p><ul><li>方案一： 给行内块设置 vertical ，值不为 baseline 即可，设置为 middel 、 bottom 、top 均可</li><li>方案二： 若父元素中只有一张图片，设置图片为 display:block </li><li>方案三： 给父元素设置 font-size: 0 。如果该行内块内部还有文本，则需单独设置 font-size·</li></ul><h2 id="5-18-盒模型扩展"><a href="#5-18-盒模型扩展" class="headerlink" title="5.18 盒模型扩展"></a>5.18 盒模型扩展</h2><p>清除默认样式</p><ul><li>标签选择器清除默认边距，或者通配符清除</li><li>ul和ol清除列表前缀：list-style</li><li>a标签清除下划线：color和text-decoration</li><li>清除默认加粗效果：font-weight</li></ul><h1 id="uur0U">六、浮动</h1><h2 id="umggo">6.1 浮动的简介</h2><p>实现文字环绕图片效果，主流的页面布局方式之一</p><h2 id="qAa9o">6.2 元素浮动后的特点</h2><ol><li>脱离文档流</li><li>不管浮动前是什么元素，浮动后默认的宽与高是由内容撑开的，可以设置宽高</li><li>不会独占一行，可以与其他元共用一行</li><li>不会margin合并和margin塌陷，能够完美的设置四个方向的margin和padding</li><li>不会像行内块一样被当作文本处理（没有行内块的空白问题）</li></ol><h2 id="OkiWO">6.3 解决浮动产生的影响</h2><h3 id="lIYbl">6.3.1 元素浮动后会有哪些影响</h3><p>对兄弟元素的影响： 后面的兄弟元素，会占据浮动元素之前的位置，在浮动元素的下面；对前面的兄弟无影响  </p><p>对父元素的影响： 不能撑起父元素的高度，导致父元素高度塌陷；但父元素的宽度依然束缚浮动的元 素  </p><h3 id="NBD9b">6.3.2  解决浮动产生的影响（清除浮动） </h3><ol><li>方案一： 给父元素指定高度。</li><li>方案二： 给父元素也设置浮动，带来其他影响。</li><li>方案三： 给父元素设置 overflow:hidden。</li><li>方案四： 在所有浮动元素的最后面，添加一个块级元素，并给该块级元素设置 clear:both 。</li><li>方案五： 给浮动元素的父元素，设置伪元素，通过伪元素清除浮动，原理与方案四相同。（推荐使用）</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.parent</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">clear</span>: both;<br>  <span class="hljs-attribute">visibility</span>: hidden;<br>&#125;<br></code></pre></td></tr></table></figure><p>布局中的一个原则：设置浮动的时候，兄弟元素要么全都浮动，要么全都不浮动  </p><h2 id="vxNoU">6.4 浮动相关属性</h2><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1726549223559-e653414d-4b63-4b82-a5b5-3e559369b69d.png"></p><h2 id="6-5-浮动案例"><a href="#6-5-浮动案例" class="headerlink" title="6.5 浮动案例"></a>6.5 浮动案例</h2><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/image-20240929134529407.png" alt="image-20240929134529407"></p><h1 id="I1ABz">七、定位</h1><h2 id="aIWzA">7.1 相对定位</h2><h3 id="Iy4Vq">7.1.1 如何设置相对定位</h3><ul><li>给元素设置<code>position:relative</code>即可实现相对定位</li><li>可以使用<code>left</code>、<code>right</code>、<code>top</code>、<code>bottom</code>四个属性调整位置</li></ul><h3 id="mf2qV">7.1.2 相对定位的参考点在哪里</h3><ul><li>相对自己原来的位置</li></ul><h3 id="uk55c">7.1.3 相对定位的特点</h3><ol><li>不会脱离文档流，元素位置的变化，只是视觉效果上的变化，不会对其他元素产生任何影响 </li><li>定位元素的显示层级比普通元素高，无论什么定位，显示层级都是一样的<ol><li>默认规则<ol><li>定位元素在普通元素之上</li><li>都发生定位的两个元素，后写的元素会盖在先写的元素之上</li></ol></li></ol></li><li><code>left</code>和<code>right</code>不能一起设置，<code>top</code>和<code>bottom</code>不能一起设置</li><li>相对定位的元素，也能继续浮动，但不推荐</li><li>相对定位的元素，也能通过<code>margin</code>调整位置，但不推荐</li></ol><p>:::success<br> 注意：绝大多数情况下，相对定位，会与绝对定位配合使用</p><h3 id="7-1-4-案例"><a href="#7-1-4-案例" class="headerlink" title="7.1.4 案例"></a>7.1.4 案例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.nav</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">1000px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: lightblue;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">100px</span> auto;</span><br><span class="language-css">            <span class="hljs-attribute">list-style</span>: none;</span><br><span class="language-css">            <span class="hljs-attribute">font</span>: <span class="hljs-number">18px</span>/<span class="hljs-number">50px</span> skyblue;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.nav</span> <span class="hljs-selector-tag">li</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">float</span>: left;</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.nav</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">a</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">text-decoration</span>: none;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.nav</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">border-top</span>: <span class="hljs-number">4px</span> solid orange;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">            <span class="hljs-attribute">top</span>: -<span class="hljs-number">4px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;xxx&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;xxx&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;xxx&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;xxx&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;xxx&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/image-20240929192749865.png" alt="image-20240929192749865"></p><h2 id="KJOWI">7.2 绝对定位</h2><h3 id="AiIOU">7.1.1 如何设置绝对定位</h3><ul><li>给元素设置<code>position:absolute</code>即可实现相对定位</li><li>可以使用<code>left</code>、<code>right</code>、<code>top</code>、<code>bottom</code>四个属性调整位置</li></ul><h3 id="QSYz8">7.1.2 绝对定位的参考点在哪里</h3><ul><li>参考它的包含块</li></ul><p><strong>什么是包含块？</strong></p><ol><li>对于没有脱离文档流的元素：包含块就是父元素</li><li>对于脱离文档流的元素：包含块是第一个拥有定位属性（子绝父相）的祖先元素（如果所有祖先都没定位，那包含块就是整个页面）</li></ol><h3 id="tBgGb">7.1.3 绝对定位的特点</h3><ol><li><em>脱离文档流</em>，会对后面的兄弟元素、父元素有影响</li><li>left 不能和 right 一起设置， top 和 bottom 不能一起设置</li><li>绝对定位、浮动不能同时设置，如果同时设置，浮动失效，以定位为主</li><li>绝对定位的元素，也能通过 margin 调整位置，但不推荐这样做</li><li>无论是什么元素（行内、行内块、块级）设置为绝对定位之后，都变成了定位元素</li></ol><p>何为定位元素？ —— 默认宽、高都被内容所撑开，且能自由设置宽高  </p><h3 id="7-1-4-压盖效果"><a href="#7-1-4-压盖效果" class="headerlink" title="7.1.4 压盖效果"></a>7.1.4 压盖效果</h3> <img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/image-20240929194115161.png" alt="image-20240929194115161" style="zoom: 67%;"><p>定位元素不区分定位类型，都会去压盖标准流或浮动的元素</p><p>如果都是定位元素，后写的会压盖先写的</p><p>如何更改压盖顺序？</p><ul><li>可以设置一个z-index属性（数字）<ul><li>属性值大的会压盖属性值小的。设置z-index属性的会压盖没有设置的</li><li>z-index属性只能设置给定位元素才有效果</li><li>父子盒模型，如果父子盒都进行了定位，与其他的父子级有压盖的部分：<ul><li>父级盒子：如果不设置z-index，后写的压盖先写的；如果设置了z-index，值大的压盖值小的</li><li>子级盒子：如果父级没有设置z-index属性，子级z-index大的会压盖小的；如果父级设置z-index值，无论子级值是多少，都是父级值大的子级别压盖父级值小的子级 &#x3D;&gt; 从父效应</li></ul></li></ul></li></ul><h2 id="Zr87D">7.3 固定定位</h2><h3 id="CzbVB">7.1.1 如何设置固定定位</h3><ul><li>给元素设置<code>position:fixed</code>即可实现相对定位</li><li>可以使用<code>left</code>、<code>right</code>、<code>top</code>、<code>bottom</code>四个属性调整位置</li></ul><h3 id="wDpor">7.1.2 固定定位的参考点在哪里</h3><ul><li>参考它的视口</li></ul><p>什么是视口？—— 对于 PC 浏览器来说，视口就是我们看网页的那扇“窗户</p><h3 id="wJyCT">7.1.3固定定位的特点</h3><ol><li><em>脱离文档流</em>，会对后面的兄弟元素、父元素有影响</li><li>left 不能和 right 一起设置， top 和 bottom 不能一起设置。</li><li>固定定位和浮动不能同时设置，如果同时设置，浮动失效，以固定定位为主</li><li>固定定位的元素，也能通过 margin 调整位置，但不推荐这样做</li><li>无论是什么元素（行内、行内块、块级）设置为固定定位之后，都变成了定位元素</li></ol><h2 id="hetVI">7.4 粘性定位</h2><h3 id="BCrXx">7.1.1 如何设置粘性定位</h3><ul><li>给元素设置<code>position:sticky</code>即可实现相对定位</li><li>可以使用<code>left</code>、<code>right</code>、<code>top</code>、<code>bottom</code>四个属性调整位置，不过最常用的是 <code>top</code> 值</li></ul><h3 id="aNOnn">7.1.2 粘性定位的参考点在哪里</h3><ul><li>离它最近的一个拥有“滚动机制”的祖先元素，即便这个祖先不是最近的真实可滚动祖先</li></ul><h3 id="Uv492">7.1.3固定定位的特点</h3><ul><li>不会脱离文档流，它是一种专门用于窗口滚动时的新的定位方式</li><li>最常用的值是 top 值</li><li>粘性定位和浮动可以同时设置，但不推荐这样做</li><li>粘性定位的元素，也能通过 margin 调整位置，但不推荐这样做</li></ul><p>:::success<br> 粘性定位和相对定位的特点基本一致，不同的是：粘性定位可以在元素到达某个位置时将其固定</p><p>:::</p><h2 id="dUScY">7.5 定位层级</h2><ol><li>定位元素的显示层级比普通元素高，无论什么定位，显示层级都是一样的</li><li>如果位置发生重叠，默认情况是：后面的元素，会显示在前面元素之上</li><li>可以通过 css 属性 z-index 调整元素的显示层级</li><li>z-index 的属性值是数字，没有单位，值越大显示层级越高</li><li>只有定位的元素设置 z-index 才有效</li><li>如果 z-index 值大的元素，依然没有覆盖掉 z-index 值小的元素，那么请检查其包含块的层级</li></ol><h2 id="qSMDc">7.6 定位的特殊应用</h2><p>:::success<br>注意：</p><ol><li>发生固定定位、绝对定位后，元素都变成了定位元素，默认宽高被内容撑开，且依然可以设置宽高</li><li>发生相对定位后，元素依然是之前的显示模式</li><li>以下所说的特殊应用，只针对 绝对定位 和 固定定位 的元素，不包括相对定位的元素</li></ol><p>:::</p><p><strong>让定位元素的宽充满包含块</strong></p><ol><li>宽度想与包含块一致，可以给定位元素同时设置 left 和 right 为 0</li><li>高度想与包含块一致， top 和 bottom 设置为 0</li></ol><p><strong>让定位元素在包含块中居中</strong></p><p> 方案一</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">left</span>:<span class="hljs-number">0</span>; <br><span class="hljs-attribute">right</span>:<span class="hljs-number">0</span>; <br><span class="hljs-attribute">top</span>:<span class="hljs-number">0</span>; <br><span class="hljs-attribute">bottom</span>:<span class="hljs-number">0</span>; <br><span class="hljs-attribute">margin</span>:auto;  <br></code></pre></td></tr></table></figure><p> 方案二</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br><span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br><span class="hljs-attribute">margin-left</span>: 负的宽度一半;<br><span class="hljs-attribute">margin-top</span>: 负的高度一半;<br></code></pre></td></tr></table></figure><p>:::success<br>注意：该定位的元素必须设置宽高！！！  </p><h2 id="7-7-定位案例"><a href="#7-7-定位案例" class="headerlink" title="7.7 定位案例"></a>7.7 定位案例</h2><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/image-20240930102943023.png" alt="image-20240930102943023" style="zoom: 50%;"><h1 id="L9RSp">八、布局</h1><h2 id="qLy5Z">8.1 版心</h2><p>在 PC 端网页中，一般都会有一个固定宽度且水平居中的盒子，来显示网页的主要内容，这是网页的版心</p><p>版心的宽度一般是 960 ~ 1200 像素之间</p><p>版心可以是一个，也可以是多个 </p><h2 id="bUbSo">8.2 常用布局名词  </h2><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1726551906674-b7ada3b1-ea9c-46f2-9017-050d0029742e.png"></p><h2 id="Jfze1">8.3 重置默认样式</h2><p><strong>方式一： 使用全局选择器（实际开发不会使用）</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">* &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>  ......<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>方式二：reset.css（选择到具有默认样式的元素，清空其默认的样式）</strong></p><p>:::success<br> 经过 reset 后的网页，好似“一张白纸”，开发人员可根据设计稿，精细的去添加具体的样式</p><p>:::</p><p><strong>方案三： Normalize.css</strong></p><p>Normalize.css 是一种最新方案，它在清除默认样式的基础上，保留了一些有价值的默认样式</p><p>官网地址：<a href="http://necolas.github.io/normalize.css/">http://necolas.github.io/normalize.css/</a></p><p>相对于 reset.css ， Normalize.css 有如下优点：</p><ol><li>保护了有价值的默认样式，而不是完全去掉它们</li><li>为大部分HTML元素提供一般化的样式</li><li>新增对 HTML5 元素的设置</li><li>对并集选择器的使用比较谨慎，有效避免调试工具杂乱</li></ol><p>:::success<br>Normalize.css 的重置，和 reset.css 相比，更加的温和，开发时可根据实际情况进行选择</p><p>:::</p><h1 id="megXv">九、CSS3简介</h1><h2 id="QXaeH">9.1 概述</h2><p>CSS3 在未来会按照模块化的方式去发展：<a href="https://www.w3.org/Style/CSS/current-work.html">CSS current work &amp; how to participate (w3.org)</a></p><p>CSS3 的新特性如下：</p><p>新增了更加实用的选择器，例如：动态伪类选择器、目标伪类选择器、伪元素选择器等等</p><p>新增了更好的视觉效果，例如：圆角、阴影、渐变等</p><p>新增了丰富的背景效果，例如：支持多个背景图片，同时新增了若干个背景相关的属性</p><p>新增了全新的布局方案 —— 弹性盒子</p><p>新增了 Web 字体，可以显示用户电脑上没有安装的字体</p><p>增强了颜色，例如： HSL 、 HSLA 、 RGBA 几种新的颜色模式，新增 opacity 属性来控制透明度</p><p>增加了 2D 和 3D 变换，例如：旋转、扭曲、缩放、位移等</p><p>增加动画与过渡效果，让效果的变换更具流线性、平滑性</p><p>……  </p><h2 id="mEW5S">9.2 CSS3私有前缀</h2><h3 id="yqwer">9.2.1 什么是私有前缀</h3><p><code>-webkit-</code></p><h3 id="hWcpY">9.2.2 为什么要有私有前缀</h3><p>W3C 标准所提出的某个 CSS 特性，在被浏览器正式支持之前，浏览器厂商会根据浏览器的内核， 使用私有前缀</p><p>来测试该 CSS 特性，在浏览器正式支持该 CSS 特性后，就不需要私有前缀了</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">-webkit-<span class="hljs-attribute">border-radius</span>: <span class="hljs-number">20px</span>;<br>-moz-<span class="hljs-attribute">border-radius</span>: <span class="hljs-number">20px</span>;<br>-ms-<span class="hljs-attribute">border-radius</span>: <span class="hljs-number">20px</span>;<br>-o-<span class="hljs-attribute">border-radius</span>: <span class="hljs-number">20px</span>;<br><span class="hljs-attribute">border-radius</span>: <span class="hljs-number">20px</span>;<br></code></pre></td></tr></table></figure><p> 查询 CSS3 兼容性的网站：<a href="https://caniuse.com/">https://caniuse.com/</a></p><h3 id="Az49Q">9.2.3 常见浏览器私有前缀</h3><p>Chrome 浏览器： -webkit-</p><p>Safari 浏览器： -webkit-</p><p>Firefox 浏览器： -moz-</p><p>Edge 浏览器： -webkit-</p><p>旧 Opera 浏览器： -o-</p><p>旧 IE 浏览器： -ms-</p><h1 id="vnJ46">十、CSS3基本语法</h1><h2 id="HEg4H">10.1 CSS3新增长度单位</h2><ol><li>rem 根元素字体大小的倍数，只与根元素字体大小有关</li><li>vw 视口宽度的百分之多少 10vw 就是视口宽度的 10% </li><li>vh 视口高度的百分之多少 10vh 就是视口高度的 10%</li><li>vmax 视口宽高中大的那个的百分之多少。（了解即可）</li><li>vmin 视口宽高中小的那个的百分之多少。（了解即可）</li></ol><h2 id="jHXNH">10.2  CSS3 新增颜色设置方式</h2><p>CSS3 新增了三种颜色设置方式，分别是： rgba 、 hsl 、 hsla</p><h2 id="PkEvD">10.3  CSS3 新增选择器  </h2><p>CSS3 新增的选择器有：动态伪类、目标伪类、语言伪类、 UI 伪类、结构伪类、否定伪类、伪元素</p><h2 id="hlfpf">10.4  CSS3 新增盒模型相关属性  </h2><h3 id="x1GmO">10.4.1 box-sizing 怪异盒模型</h3><p>使用 box-sizing 属性可以设置盒模型的两种类型</p><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1726704756322-c2e8b69f-3d09-467e-8dd1-7de813ee299a.png"></p><h3 id="tchAz">10.4.2 resize 调整盒子大小  </h3><p>使用 resize 属性可以控制是否允许用户调节元素尺寸</p><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1726704808586-5ec9b980-6fdc-49c3-b106-b67cf17ad7e6.png"></p><h3 id="10-4-3-box-shadow-盒子阴影"><a href="#10-4-3-box-shadow-盒子阴影" class="headerlink" title="10.4.3 box-shadow 盒子阴影"></a>10.4.3 box-shadow 盒子阴影</h3><p>使用 box-shadow 属性为盒子添加阴影</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">box-shadow</span>: h-shadow v-shadow blur spread color inset;<br></code></pre></td></tr></table></figure><p> 各个值的含义：</p><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1726704881766-2975c867-4395-468d-a3c4-91f21d1aa9ce.png"></p><p>默认值： box-shadow:none 表示没有阴影 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 写两个值，含义：水平位置、垂直位置 */</span><br><span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">10px</span> <span class="hljs-number">10px</span>;<br><span class="hljs-comment">/* 写三个值，含义：水平位置、垂直位置、颜色 */</span><br><span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">10px</span> <span class="hljs-number">10px</span> red;<br><span class="hljs-comment">/* 写三个值，含义：水平位置、垂直位置、模糊值 */</span><br><span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">10px</span> <span class="hljs-number">10px</span> <span class="hljs-number">10px</span>;<br><span class="hljs-comment">/* 写四个值，含义：水平位置、垂直位置、模糊值、颜色 */</span><br><span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">10px</span> <span class="hljs-number">10px</span> <span class="hljs-number">10px</span> red;<br><span class="hljs-comment">/* 写五个值，含义：水平位置、垂直位置、模糊值、外延值、颜色 */</span><br><span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">10px</span> <span class="hljs-number">10px</span> <span class="hljs-number">10px</span> <span class="hljs-number">10px</span> blue;<br><span class="hljs-comment">/* 写六个值，含义：水平位置、垂直位置、模糊值、外延值、颜色、内阴影 */</span><br><span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">10px</span> <span class="hljs-number">10px</span> <span class="hljs-number">20px</span> <span class="hljs-number">3px</span> blue inset;<br></code></pre></td></tr></table></figure><p>多层阴影：先写的阴影会盖在后写的阴影上</p><h3 id="10-4-4-opacity-不透明度"><a href="#10-4-4-opacity-不透明度" class="headerlink" title="10.4.4 opacity 不透明度"></a>10.4.4 opacity 不透明度</h3><p>opacity 属性能为整个元素添加透明效果，值是 0 到 1 之间的小数， 0是完全透明， 1表示完全不透明</p><p>:::success<br>opacity 与 rgba 的区别？</p><p>opacity 是一个属性，设置的是整个元素（包括元素里的内容）的不透明度</p><p>rgba 是颜色的设置方式，用于设置颜色，它的透明度，仅仅是调整颜色的透明度 </p><p>:::</p><h2 id="kU03g">10.5 CSS3 新增背景属性</h2><h3 id="zEn2N">10.5.1 background-origin</h3><p>作用：设置背景图的原点<br>语法</p><ol><li>padding-box ：从 padding 区域开始显示背景图像 - 默认值</li><li>border-box ： 从 border 区域开始显示背景图像</li><li>content-box ： 从 content 区域开始显示背景图像</li></ol><h3 id="wReUv">10.5.2 background-clip</h3><p>作用：设置背景图的向外裁剪的区域<br>语法</p><ol><li>border-box ： 从 border 区域开始向外裁剪背景 - 默认值</li><li>padding-box ： 从 padding 区域开始向外裁剪背景</li><li>content-box ： 从 content 区域开始向外裁剪背景</li><li>text ：背景图只呈现在文字上</li></ol><p>注意：若值为 text ，那么 backgroun-clip 要加上 -webkit- 前缀</p><h3 id="HxSQp">10.5.3 background-size</h3><p>作用：设置背景图的尺寸<br>语法：</p><ol><li>用长度值指定背景图片大小，不允许负值</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-size</span>: <span class="hljs-number">300px</span> <span class="hljs-number">200px</span>;<br></code></pre></td></tr></table></figure><ol start="2"><li>用百分比指定背景图片大小，不允许负值</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-size</span>: <span class="hljs-number">100%</span> <span class="hljs-number">100%</span>;<br></code></pre></td></tr></table></figure><ol start="3"><li>auto ： 背景图片的真实大小 - 默认值</li><li>contain ： 将背景图片等比缩放，使背景图片的宽或高，与容器的宽或高相等，再将完整<br>背景图片包含在容器内，但要注意：可能会造成容器里部分区域没有背景图片</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-size</span>: contain;<br></code></pre></td></tr></table></figure><ol start="5"><li>cover ：将背景图片等比缩放，直到完全覆盖容器，图片会尽可能全的显示在元素上，但要<br>注意：背景图片有可能显示不完整 - 相对比较好的选择</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-size</span>: cover;<br></code></pre></td></tr></table></figure><h3 id="V90eK">10.5.4 backgorund 复合属性</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background</span>: color url repeat position / size origin clip<br></code></pre></td></tr></table></figure><p>注意：</p><ol><li>origin 和 clip 的值如果一样，如果只写一个值，则 origin 和 clip 都设置；如果设置了两个值，前面的是 origin，后面的clip</li><li>size 的值必须写在 position 值的后面，并且用 &#x2F; 分开</li></ol><h3 id="vkQPC">10.5.5 多背景图</h3><p> CSS3允许元素设置多个背景图片</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 添加多个背景图 */</span><br><span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">../images/bg-lt.png</span>) no-repeat,<br><span class="hljs-built_in">url</span>(<span class="hljs-string">../images/bg-rt.png</span>) no-repeat right top,<br><span class="hljs-built_in">url</span>(<span class="hljs-string">../images/bg-lb.png</span>) no-repeat left bottom,<br><span class="hljs-built_in">url</span>(<span class="hljs-string">../images/bg-rb.png</span>) no-repeat right bottom;<br></code></pre></td></tr></table></figure><h3 id="10-5-6-文字隐藏方法"><a href="#10-5-6-文字隐藏方法" class="headerlink" title="10.5.6 文字隐藏方法"></a>10.5.6 文字隐藏方法</h3><p>给标签设置背景后，隐藏文字内容</p><ul><li>设置text-indent属性一个很大的负值，在设置溢出隐藏属性</li></ul><h3 id="10-5-7-设置列表选项前的图片样式"><a href="#10-5-7-设置列表选项前的图片样式" class="headerlink" title="10.5.7 设置列表选项前的图片样式"></a>10.5.7 设置列表选项前的图片样式</h3><p>由于给li标签设置background，背景也会在padding区域出现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.list</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid black;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">list-style</span>: none;</span><br><span class="language-css">            <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">5px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.list</span> <span class="hljs-selector-tag">li</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">../list_image.png</span>) no-repeat left center / <span class="hljs-number">15px</span> <span class="hljs-number">15px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>这是一个子项<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>这是一个子项<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>这是一个子项<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>这是一个子项<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>这是一个子项<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>这是一个子项<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/image-20240929190228467.png" alt="image-20240929190228467" style="zoom: 50%;"><h3 id="10-5-8-精灵图技术"><a href="#10-5-8-精灵图技术" class="headerlink" title="10.5.8 精灵图技术"></a>10.5.8 精灵图技术</h3><p>网页中的小背景图片如果频繁的发送网络请求，会降低网页的加载速度</p><p>将设计的小背景图合成为一张大图</p><ul><li>制作的是一张背景透明的png图片</li><li>利用背景定位技术</li></ul><p>注意事项：</p><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/image-20240929190615282.png" alt="image-20240929190615282"></p><h2 id="10-6-CSS3新增边框属性"><a href="#10-6-CSS3新增边框属性" class="headerlink" title="10.6 CSS3新增边框属性"></a>10.6 CSS3新增边框属性</h2><h3 id="10-6-1-边框圆角"><a href="#10-6-1-边框圆角" class="headerlink" title="10.6.1 边框圆角"></a>10.6.1 边框圆角</h3><ul><li><p>在 CSS3 中，使用 border-radius 属性可以将盒子变为圆角</p><ul><li><blockquote><p>x-radius &#x2F; y-radius - 椭圆角</p></blockquote></li><li><blockquote><p>radius - 圆角</p></blockquote></li></ul></li><li><p>将元素绘制成圆</p></li></ul><blockquote><p>border-radius设置成元素宽度与padding和的一半</p></blockquote><ul><li>同时设置四个角的圆角：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">border-radius</span>:<span class="hljs-number">10px</span>;<br></code></pre></td></tr></table></figure><ul><li>分开设置每个角的圆角（几乎不用）：</li></ul><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1726705694607-6d994c49-6ad1-461d-ba64-413b8507c4d2.png"></p><p>分开设置每个角的圆角，综合写法（几乎不用）：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">border</span>-raidus: 左上角x 右上角x 右下角x 左下角x / 左上y 右上y 右下y 左下y<br></code></pre></td></tr></table></figure><h3 id="aQ1TZ">10.6.2 边框外轮廓（了解）</h3><ul><li>outline-width ：外轮廓的宽度</li><li>outline-color ：外轮廓的颜色</li><li>outline-style ：外轮廓的风格</li></ul><p>none ： 无轮廓 </p><p>dotted ： 点状轮廓 </p><p>dashed ： 虚线轮廓 </p><p>solid ： 实线轮廓 </p><p>double ： 双线轮廓 </p><ul><li>outline-offset：设置外轮廓与边框的距离，正负值都可以设置</li></ul><p>:::success<br> 注意： outline-offset 不是 outline 的子属性，是一个独立的属性  </p><p>:::</p><ul><li>outline 复合属性</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">outline</span>:<span class="hljs-number">50px</span> solid blue;<br></code></pre></td></tr></table></figure><h2 id="pips9">10.7 CSS3新增文本属性  </h2><h3 id="fEHQK">10.7.1 文本阴影</h3><p>在 CSS3 中，我们可以使用 text-shadow 属性给文本添加阴影</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">text-shadow</span>: h-shadow v-shadow blur color;<br></code></pre></td></tr></table></figure><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1726706011464-3a57e5fd-b57c-444f-966d-ee262162e887.png"></p><p>默认值： text-shadow:none 表示没有阴影 </p><p>单个阴影：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.word</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font</span>: bold <span class="hljs-number">30px</span>/<span class="hljs-number">60px</span> <span class="hljs-string">&quot;微软雅黑&quot;</span>;</span><br><span class="language-css">            <span class="hljs-attribute">text-shadow</span>: <span class="hljs-number">3px</span> <span class="hljs-number">3px</span> <span class="hljs-number">5px</span> <span class="hljs-number">#f00</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;word&quot;</span>&gt;</span>文字阴影效果<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/image-20240930150733273.png" alt="image-20240930150733273"></p><p>多层阴影：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.word</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font</span>: bold <span class="hljs-number">30px</span>/<span class="hljs-number">60px</span> <span class="hljs-string">&quot;微软雅黑&quot;</span>;</span><br><span class="language-css">            <span class="hljs-attribute">text-shadow</span>: <span class="hljs-number">3px</span> <span class="hljs-number">3px</span> <span class="hljs-number">5px</span> <span class="hljs-number">#f00</span>,</span><br><span class="language-css">                <span class="hljs-number">6px</span> <span class="hljs-number">6px</span> <span class="hljs-number">3px</span> <span class="hljs-number">#0f0</span>,</span><br><span class="language-css">                <span class="hljs-number">9px</span> <span class="hljs-number">9px</span> <span class="hljs-number">3px</span> <span class="hljs-number">#00f</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;word&quot;</span>&gt;</span>文字阴影效果<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/image-20240930150905340.png" alt="image-20240930150905340"></p><h3 id="bkMCZ">10.7.2 文本换行</h3><p>在 CSS3 中，我们可以使用 white-space 属性设置文本换行方式  </p><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1726706061682-e964aa0b-b231-4a56-bdd9-f7f35737feac.png"></p><h3 id="QnpaD">10.7.3 文本溢出  </h3><p>在 CSS3 中，我们可以使用 text-overflow 属性设置文本内容溢出时的呈现模式  </p><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1726706185328-105e943d-62e4-4373-b770-d4191189970e.png"></p><p>:::success<br>注意：</p><p>要使 text-overflow 属性生效，块容器必须显式定义 overflow 为非 visible 值， white-space 为 nowrap值</p><p>:::</p><h3 id="ElfDF">10.7.4 文本修饰  </h3><p>CSS3 升级了 text-decoration 属性，让其变成了复合属性  </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">text-decoration</span>: text-decoration-line || text-decoration-style || text-decoration-color<br></code></pre></td></tr></table></figure><p>子属性及其含义：</p><p>text-decoration-line 设置文本装饰线的位置 </p><p>none ： 指定文字无装饰 （默认值）</p><p>underline ： 指定文字的装饰是下划线 </p><p>overline ： 指定文字的装饰是上划线 </p><p>line-through ： 指定文字的装饰是贯穿线 </p><p>text-decoration-style 文本装饰线条的形状 </p><p>solid ： 实线 （默认） </p><p>double ： 双线 </p><p>dotted ： 点状线条 </p><p>dashed ： 虚线 </p><p>wavy ： 波浪线 </p><p>text-decoration-color 文本装饰线条的颜色  </p><h3 id="Lq0x4">10.7.5 文本描边  </h3><p>注意：文字描边功能仅 webkit 内核浏览器支持</p><p>-webkit-text-stroke-width ：设置文字描边的宽度，写长度值</p><p>-webkit-text-stroke-color ：设置文字描边的颜色，写颜色值</p><p> -webkit-text-stroke ：复合属性，设置文字描边宽度和颜色</p><h2 id="t96fg">10.8 CSS3 新增渐变  </h2><h3 id="ErsXs">10.8.1线性渐变</h3><ul><li>多个颜色之间的渐变， 默认从上到下渐变</li></ul><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1726706461178-8cfcc7a2-ff6b-48c4-8e26-ad22d6baa2be.png"></p><ul><li>使用关键词设置线性渐变的方向</li></ul><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1726706481185-cf9d2a33-1e42-4deb-82b9-5747eea8d1a9.png"></p><ul><li>使用角度设置线性渐变的方向</li></ul><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1726706530268-3e43bf9c-3d34-43ff-8e24-8fdbe851d3a9.png"></p><ul><li>调整开始渐变的位置</li></ul><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1726706562182-c754b506-ceab-4a06-b47b-c882743b86f6.png"></p><h3 id="OHC7O">10.8.2 径向渐变  </h3><ul><li>多个颜色之间的渐变， 默认从圆心四散。（注意：不一定是正圆，要看容器本身宽高比）</li></ul><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1726706617548-6f594fdb-2116-419c-a725-a2848f0c2c3e.png"></p><ul><li>使用关键词调整渐变圆的圆心位置</li></ul><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1726706680504-f28af817-2a9f-492d-8fab-e4361db551be.png"></p><ul><li>使用像素值调整渐变圆的圆心位置</li></ul><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1726706700920-959d97d3-0edf-498d-baad-28e18c319353.png"></p><ul><li>调整渐变形状为正圆</li></ul><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1726706813116-dc23bb88-9f3c-48d7-bd5b-6ea46916362b.png"></p><ul><li>调整形状的半径</li></ul><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1726706841197-b66df969-56fb-4b20-8981-ba97c46f6266.png"></p><ul><li>调整开始渐变的位置</li></ul><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1726706876874-3d4a4d69-b444-4961-b286-52175f422fa8.png"></p><h3 id="xZ08a">10.8.3 重复渐变  </h3><p>无论线性渐变，还是径向渐变，在没有发生渐变的位置，继续进行渐变，就为重复渐变。 </p><p>使用 repeating-linear-gradient 进行重复线性渐变，具体参数同 linear-gradient</p><p>使用 repeating-radial-gradient 进行重复径向渐变，具体参数同 radial-gradient</p><h2 id="NR9yy">10.9 web字体</h2><h3 id="ihfxR">10.9.1 基本用法</h3><p>可以通过 @font-face 指定字体的具体地址，浏览器会自动下载该字体，这样就不依赖用户电脑上的字体了  </p><ul><li>语法（简写形式）</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@font-face</span> &#123;<br><span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;情书字体&quot;</span>;<br><span class="hljs-attribute">src</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;./方正手迹.ttf&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>语法（高兼容性写法）</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@font-face</span> &#123;<br><span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;atguigu&quot;</span>;<br><span class="hljs-attribute">font-display</span>: swap;<br><span class="hljs-attribute">src</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;webfont.eot&#x27;</span>); <span class="hljs-comment">/* IE9 */</span><br><span class="hljs-attribute">src</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;webfont.eot?#iefix&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;embedded-opentype&#x27;</span>), <span class="hljs-comment">/* IE6-IE8 */</span><br><span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;webfont.woff2&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;woff2&#x27;</span>),<br><span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;webfont.woff&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;woff&#x27;</span>), <span class="hljs-comment">/* chrome、firefox */</span><br><span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;webfont.ttf&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;truetype&#x27;</span>), <span class="hljs-comment">/* chrome、firefox、opera、Safari,</span><br><span class="hljs-comment">Android*/</span><br><span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;webfont.svg#webfont&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;svg&#x27;</span>); <span class="hljs-comment">/* iOS 4.1- */</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ULOSm">10.9.2 定制字体  </h3><p>中文的字体文件很大，使用完整的字体文件不现实，通常针对某几个文字进行单独定制  </p><p>可使用阿里 Web 字体定制工具：<a href="https://www.iconfont.cn/webfont">https://www.iconfont.cn/webfont</a>  </p><h3 id="yXdZm">10.9.3 字体图标</h3><p>相比图片更加清晰</p><p>灵活性高，更方便改变大小、颜色、风格等</p><p>兼容性好， IE 也能支持</p><p>:::success<br>字体图标的具体使用方式，每个平台不尽相同，最好参考平台使用指南，视频中我们是以使用最多 的阿里图标库作为演示</p><p>阿里图标官网地址：<a href="https://www.iconfont.cn/">https://www.iconfont.cn/</a>  </p><p>:::</p><h2 id="Gn5vw">10.10 2D变换</h2><p>:::success<br> 前提：二维坐标系如下图所示  </p><p>:::</p><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1726888176788-07189c6b-3c13-4977-975b-2f4170d9dc6e.png"></p><h3 id="KLU3w">10.10.1 2D位移  </h3><p>2D 位移可以改变元素的位置，具体使用方式如下：  </p><ol><li>先给元素添加 转换属性 transform  </li><li>编写 transform 的具体值，相关可选值如下：</li></ol><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1726888248626-2a80b749-bb55-4c19-8217-57713616de52.png"></p><ol start="3"><li>注意点<ol><li>位移与相对定位很相似，都不脱离文档流，不会影响到其它元素</li><li>与相对定位的区别：相对定位的百分比值，参考的是其父元素；定位的百分比值，参考的是<br>其自身</li><li>浏览器针对位移有优化，与定位相比，浏览器处理位移的效率更高。</li><li>transform 可以链式编写，例如：</li></ol></li></ol><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1726888491213-ca057572-6642-4ca7-9ccc-125edb8ea6aa.png"></p><pre><code class="hljs">5. 位移对行内元素无效。6. 位移配合定位，可实现元素水平垂直居中</code></pre><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1726888322183-c4bc56c1-fa9e-4300-a9be-0114b9add715.png"></p><h3 id="rJacP">10.10.2 2D缩放</h3><p>2D缩放是指： 让元素放大或缩小，具体使用方式如下：  </p><ol><li>先给元素添加 转换属性 transform </li><li>编写 transform 的具体值，相关可选值如下：  <img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1726888585005-31ec57d1-6cb5-4669-8e0b-dbace07b9bfd.png"></li><li>注意点</li></ol><p>:::success</p><ol><li>scale 的值，是支持写负数的，但几乎不用，因为容易让人产生误解</li><li>借助缩放，可实现小于 12px 的文字</li></ol><p>:::</p><h3 id="RIei9">10.10.3 2D旋转  </h3><p>2D 旋转是指：让元素在二维平面内，顺时针旋转或逆时针旋转，具体使用方式如下：  </p><ol><li>先给元素添加 转换属性 transform</li><li>编写 transform 的具体值，相关可选值如下：</li></ol><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1726888676186-4c011c58-c1f8-4183-8702-7d73c938bd93.png"></p><p>:::success<br> 注意： rotateZ(20deg) 相当于 rotate(20deg) ，当然到了 3D 变换的时候，还能写： rotate(x,x,x)  </p><p>:::</p><h3 id="fGnSG">10.10.4 2D扭曲（了解）  </h3><p>2D 扭曲是指：让元素在二维平面内被“拉扯”，进而“走形”，实际开发几乎不用，了解即可，具体使用方式如下：  </p><ol><li>先给元素添加 转换属性 transform</li><li>编写 transform 的具体值，相关可选值如下</li></ol><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1726888765355-2db060a2-b6ee-4e45-8a12-42c2be6b5f7d.png"></p><h3 id="xBWbI">10.10.5 多重变换  </h3><p>多个变换，可以同时使用一个 transform 来编写  </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>) <span class="hljs-built_in">rotate</span>(<span class="hljs-number">45deg</span>);<br></code></pre></td></tr></table></figure><p>:::success<br> 注意点：多重变换时，建议最后旋转  </p><p>:::</p><h3 id="pFLte">10.10.6 变换原点  </h3><p>元素变换时，默认的原点是元素的中心，使用 transform-origin 可以设置变换的原点</p><p>修改变换原点对位移没有影响， 对旋转和缩放会产生影响</p><p>如果提供两个值，第一个用于横坐标，第二个用于纵坐标</p><p>如果只提供一个，若是像素值，表示横坐标，纵坐标取 50% ；若是关键词，则另一个坐标取 50%  </p><p>:::success</p><ol><li>transform-origin: 50% 50% ， 变换原点在元素的中心位置，百分比是相对于自身 —— 默认值</li><li>transform-origin: left top ，变换原点在元素的左上角</li><li>transform-origin: 50px 50px ， 变换原点距离元素左上角 50px 50px 的位置</li><li>transform-origin: 0 ，只写一个值的时候，第二个值默认为 50%</li></ol><p>:::</p><h2 id="yU2D6">10.11 3D变换</h2><h3 id="RO3ji">10.11.1 开启3D空间  </h3><p>重要原则：元素进行 3D 变换的首要操作：父元素必须开启 3D 空间！  </p><p>使用 transform-style 开启 3D 空间，可选值如下： </p><blockquote><p>flat ： 让子元素位于此元素的二维平面内（ 2D 空间）—— 默认值   </p><p>preserve-3d ： 让子元素位于此元素的三维空间内（ 3D 空间）</p></blockquote><h3 id="WwekS">10.11.2 设置景深</h3><p> 何为景深？—— 指定观察者与 z&#x3D;0 平面的距离，能让发生 3D 变换的元素，产生透视效果，看来更加立体</p><p>:::success<br>使用 perspective 设置景深，可选值如下： </p><p>none ： 不指定透视 ——（默认值） </p><p>长度值 ： 指定观察者距离 z&#x3D;0 平面的距离，不允许负值</p><p>注意： perspective 设置给发生 3D 变换元素的父元素！  </p><p>:::</p><h3 id="lZesq">10.11. 3 透视点位置  </h3><p>所谓透视点位置，就是观察者位置；默认的透视点在元素的中心</p><p>:::success<br> 使用 perspective-origin 设置观察者位置（透视点的位置），例如：  </p><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1726889239221-88a65388-9957-4aac-9065-542433807b5c.png"></p><p> 注意：通常情况下，我们不需要调整透视点位置  </p><p>:::</p><h3 id="yjy2S">10.11.4 3D 位移  </h3><p>3D 位移是在 2D 位移的基础上，可以让元素沿 z 轴位移，具体使用方式如下：</p><ol><li>先给元素添加 转换属性 transform</li><li>编写 transform 的具体值， 3D 相关可选值如下：</li></ol><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1726889305562-2eae308d-c811-48f0-a0b0-71c7a2b6fe95.png"></p><h3 id="h499l">10.11.5 3D 旋转  </h3><p> 3D 旋转是在 2D 旋转的基础上，可以让元素沿 x 轴和 y 轴旋转，具体使用方式如下：  </p><ol><li>先给元素添加 转换属性 transform</li><li>编写 transform 的具体值， 3D 相关可选值如下：</li></ol><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1726889380624-da6c85f3-ec97-429e-9c46-af5a7678d144.png"></p><h3 id="JU2PS">10.11.6 3D 缩放  </h3><p>3D 缩放是在 2D 缩放的基础上，可以让元素沿 z 轴缩放，具体使用方式如下：  </p><ol><li>先给元素添加 转换属性 transform</li><li>编写 transform 的具体值， 3D 相关可选值如下：</li></ol><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1726889447284-a83f633d-5fd2-45b2-b88f-ee2aadf59178.png"></p><h3 id="mp7OC">10.11.7 多重变换  </h3><p>多个变换，可以同时使用一个 transform 来编写  </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateZ</span>(<span class="hljs-number">100px</span>) <span class="hljs-built_in">scaleZ</span>(<span class="hljs-number">3</span>) <span class="hljs-built_in">rotateY</span>(<span class="hljs-number">40deg</span>);<br></code></pre></td></tr></table></figure><p>:::success<br> 注意点：多重变换时，建议最后旋转  </p><p>:::</p><h3 id="A5uFK">10.11.8 背部可见性  </h3><p>使用 backface-visibility 指定元素背面，在面向用户时是否可见，常用值如下：</p><p>visible ： 指定元素背面可见，允许显示正面的镜像。—— 默认值 </p><p>hidden ： 指定元素背面不可见  </p><p>:::success<br> 注意： backface-visibility 需要加在发生 3D 变换元素的自身上  </p><p>:::</p><h2 id="vNgw8">10.12 过渡</h2><p>过渡可以在不使用 Flash 动画，不使用 JavaScript 的情况下，让元素从一种样式，平滑过渡为另一 种样式</p><h3 id="i6nnm">10.12.1 transition-property  </h3><p>作用：定义哪个属性需要过渡，只有在该属性中定义的属性（比如宽、高、颜色等）才会以有过渡 效果  </p><p>常用值：</p><ol><li>none ：不过渡任何属性</li><li>all ：过渡所有能过渡的属性</li><li>具体某个属性名 ，例如： width 、 heigth ，若有多个以逗号分隔</li></ol><p>:::success<br>不是所有的属性都能过渡，值为数字，或者值能转为数字的属性，都支持过渡，否则不支持过渡</p><p>常见的支持过渡的属性有：颜色、长度值、百分比、 z-index 、 opacity 、 2D 变换属 性、 3D 变换属性、阴影</p><p>:::</p><h3 id="FcUhX">10.12.2 transition-duration  </h3><p>作用：设置过渡的持续时间，即：一个状态过渡到另外一个状态耗时多久  </p><p>常用值：</p><ol><li>0 ：没有任何过渡时间 —— 默认值</li><li>s 或 ms ：秒或毫秒</li><li>列表 ：<br>如果想让所有属性都持续一个时间，那就写一个值<br>如果想让每个属性持续不同的时间那就写一个时间的列表</li></ol><h3 id="nEURz">10.12.3 transition-delay  </h3><p>作用：指定开始过渡的延迟时间，单位： s 或 ms  </p><h3 id="LumyW">10.12.4 transition-timing-function  </h3><p>作用：设置过渡的类型</p><p>常用值：</p><ol><li>ease ： 平滑过渡 —— 默认值</li><li>linear ： 线性过渡</li><li>ease-in ： 慢 → 快</li><li>ease-out ： 快 → 慢</li><li>ease-in-out ： 慢 → 快 → 慢</li><li>step-start ： 等同于 steps(1, start)</li><li>step-end ： 等同于 steps(1, end)</li><li>steps( integer,?) ： 接受两个参数的步进函数。第一个参数必须为正整数，指定函数的<br>步数。第二个参数取值可以是 start 或 end ，指定每一步的值发生变化的时间点。第二个<br>参数默认值为 end</li><li>cubic-bezie ( number, number, number, number)： 特定的贝塞尔曲线类型</li></ol><p> 在线制作贝赛尔曲线：<a href="https://cubic-bezier.com/">https://cubic-bezier.com</a></p><h3 id="KMCu9">10.12.5 transition 复合属性</h3><p>如果设置了一个时间，表示 duration ；如果设置了两个时间，第一是 duration ，第二个是 delay ；其他值没有</p><p>顺序要求 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transition</span>:<span class="hljs-number">1s</span> <span class="hljs-number">1s</span> linear all;<br></code></pre></td></tr></table></figure><h1 id="AeCyr">十一、动画</h1><h2 id="MQnoZ">11.1 什么是帧</h2><p>一段动画，就是一段时间内连续播放 n 个画面。每一张画面，我们管它叫做“帧”。一定时间内连续快速播放若</p><p>干个帧，就成了人眼中所看到的动画。同样时间内，播放的帧数越多，画面看起来越流畅</p><h2 id="nhn3h">11.2 什么是关键帧</h2><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1726962463671-1961c6aa-f4be-484c-a161-da35f49d89bb.png"></p><h2 id="s6A2d">11.3 动画的基本使用</h2><ul><li>第一步：定义关键帧（定义动画）  <ul><li>简单方式定义</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*写法一*/</span><br><span class="hljs-keyword">@keyframes</span> 动画名 &#123;<br>  <span class="hljs-selector-tag">from</span> &#123;<br>  <span class="hljs-comment">/*property1:value1*/</span><br>  <span class="hljs-comment">/*property2:value2*/</span><br>  &#125;<br>  <span class="hljs-selector-tag">to</span> &#123;<br>  <span class="hljs-comment">/*property1:value1*/</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><pre><code class="hljs">-  完整方式定义</code></pre><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@keyframes</span> 动画名 &#123;<br>  <span class="hljs-number">0%</span> &#123;<br>  <span class="hljs-comment">/*property1:value1*/</span><br>  &#125;<br>  <span class="hljs-number">20%</span> &#123;<br>  <span class="hljs-comment">/*property1:value1*/</span><br>  &#125;<br>  <span class="hljs-number">40%</span> &#123;<br>  <span class="hljs-comment">/*property1:value1*/</span><br>  &#125;<br>  <span class="hljs-number">60%</span> &#123;<br>  <span class="hljs-comment">/*property1:value1*/</span><br>  &#125;<br>  <span class="hljs-number">80%</span> &#123;<br>  <span class="hljs-comment">/*property1:value1*/</span><br>  &#125;<br>  <span class="hljs-number">100%</span> &#123;<br>  <span class="hljs-comment">/*property1:value1*/</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>第二步：给元素应用动画，用到的属性如下<ul><li>animation-name ：给元素指定具体的动画（具体的关键帧）</li><li>animation-duration ：设置动画所需时间</li><li>animation-delay ：设置动画延迟</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span> &#123;<br>  <span class="hljs-comment">/* 指定动画 */</span><br>  <span class="hljs-attribute">animation-name</span>: testKey;<br>  <span class="hljs-comment">/* 设置动画所需时间 */</span><br>  <span class="hljs-attribute">animation-duration</span>: <span class="hljs-number">5s</span>;<br>  <span class="hljs-comment">/* 设置动画延迟 */</span><br>  <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">0.5s</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="uPbDV">11.4 动画的其他属性  </h2><ul><li>animation-timing-function，设置动画的类型，常用值如下：</li></ul><p>:::success</p><ol><li>ease ： 平滑动画 —— 默认值</li><li>linear ： 线性过渡</li><li>ease-in ： 慢 → 快</li><li>ease-out ： 快 → 慢</li><li>ease-in-out ： 慢 → 快 → 慢</li><li>step-start ： 等同于 steps(1, start)</li><li>step-end ： 等同于 steps(1, end)</li><li>steps( integer,?) ： 接受两个参数的步进函数。第一个参数必须为正整数，指定函数的步数。第二个参数取值可以是 start 或 end ，指定每一步的值发生变化的时间点。第二个参数默认值为 end</li><li>cubic-bezie ( number, number, number, number)： 特定的贝塞尔曲线类型</li></ol><p>:::</p><ul><li>animation-iteration-count ，指定动画的播放次数，常用值如下：</li></ul><p>:::success</p><ol><li>number ：动画循环次数</li><li>infinite ： 无限循环</li></ol><p>:::</p><ul><li>animation-direction ，指定动画方向，常用值如下：</li></ul><p>:::success</p><ol><li>normal ： 正常方向 (默认)</li><li>reverse ： 反方向运行</li><li>alternate ： 动画先正常运行再反方向运行，并持续交替运行</li><li>alternate-reverse ： 动画先反运行再正方向运行，并持续交替运行</li></ol><p>:::</p><ul><li>animation-fill-mode ，设置动画之外的状态</li></ul><p>:::success</p><ol><li>forwards ： 设置对象状态为动画结束时的状态</li><li>backwards ： 设置对象状态为动画开始时的状态</li></ol><p>:::</p><ul><li>animation-play-state ，设置动画的播放状态，常用值如下：</li></ul><p>:::success</p><ol><li>running ： 运动 (默认)</li><li>paused ： 暂停</li></ol><p>:::</p><h2 id="kJGSp">11.5 动画复合属性  </h2><p>只设置一个时间表示 duration ，设置两个时间分别是： duration 和 delay ，其他属性没有数量和顺序要求。  </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.inner</span> &#123;<br>  <span class="hljs-attribute">animation</span>: atguigu <span class="hljs-number">3s</span> <span class="hljs-number">0.5s</span> linear <span class="hljs-number">2</span> alternate-reverse forwards;<br>&#125;<br></code></pre></td></tr></table></figure><p>:::success<br> 备注： animation-play-state 一般单独使用  </p><p>:::</p><h2 id="11-6-动画案例"><a href="#11-6-动画案例" class="headerlink" title="11.6 动画案例"></a>11.6 动画案例</h2><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/image-20240930214906419.png" alt="image-20240930214906419" style="zoom:50%;"><h1 id="ovHVK">十二、多列布局</h1><p>作用：专门用于实现类似于报纸的布局  </p><p>常见属性如下：</p><p>column-count ：指定列数，值是数字</p><p>column-width ：指定列宽，值是长度</p><p>columns ：同时指定列宽和列数，复合属性；值没有数量和顺序要求</p><p>column-gap ：设置列边距，值是长度</p><p>column-rule-style ：设置列与列之间边框的风格，值与 border-style 一致</p><p>column-rule-width ：设置列与列之间边框的宽度，值是长度</p><p>column-rule-color ：设置列与列之间边框的颜色</p><p>coumn-rule ：设置列边框，复合属性</p><p>column-span 指定是否跨列；值: none 、 all</p><h1 id="AwtSY">十三、伸缩盒模型  </h1><h2 id="XKWed">13.1 伸缩盒模型简介  </h2><p>2009 年， W3C 提出了一种新的盒子模型 —— Flexible Box （伸缩盒模型，又称：弹性盒 子）</p><p>它可以轻松的控制：元素分布方式、元素对齐方式、元素视觉顺序 ……. </p><p>截止目前，除了在部分 IE 浏览器不支持，其他浏览器均已全部支持</p><p>伸缩盒模型的出现，逐渐演变出了一套新的布局方案 —— flex 布局</p><p>:::success<br>小贴士：</p><ol><li>传统布局是指：基于传统盒状模型，主要靠： display 属性 + position 属性 + float属性</li><li>flex 布局目前在移动端应用比较广泛，因为传统布局不能很好的呈现在移动设备上</li></ol><p>:::</p><h2 id="WKEjx">13.2 伸缩容器、伸缩项目  </h2><p>伸缩容器： 开启了 flex 的元素，就是：伸缩容器</p><p>:::success</p><ol><li>给元素设置： display:flex 或 display:inline-flex ，该元素就变为了伸缩容器</li><li>display:inline-flex 很少使用，因为可以给多个伸缩容器的父容器，也设置为伸缩容器</li><li>一个元素可以同时是：伸缩容器、伸缩项目</li></ol><p>:::</p><p>伸缩项目：伸缩容器所有子元素自动成为了：伸缩项目  </p><p>:::success</p><ol><li>仅伸缩容器的子元素成为了伸缩项目，孙子元素、重孙子元素等后代，不是伸缩项目</li><li>无论原来是哪种元素（块、行内块、行内），一旦成为了伸缩项目，全都会“块状化”</li></ol><p>:::</p><h2 id="InbvS">13.3 主轴与侧轴  </h2><p>主轴： 伸缩项目沿着主轴排列，主轴默认是水平的，默认方向是：从左到右（左边是起点，右边 是终点）</p><p>侧轴： 与主轴垂直的就是侧轴，侧轴默认是垂直的，默认方向是：从上到下（上边是起点，下边 是终点）  </p><h2 id="ZjEZk">13.4 主轴方向  </h2><p>属性名： flex-direction<br>常用值如下：</p><ol><li>row ：主轴方向水平从左到右 —— 默认值</li><li>row-reverse ：主轴方向水平从右到左</li><li>column ：主轴方向垂直从上到下</li><li>column-reverse ：主轴方向垂直从下到上</li></ol><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1726966280571-b406f48a-07fc-4abc-92ff-d7783a327b63.png"></p><p>:::success<br>注意：改变了主轴的方向，侧轴方向也随之改变 </p><p>:::</p><h2 id="GlWee">13.5 主轴换行方式  </h2><p>属性名： flex-wrap<br>常用值如下：</p><ol><li>nowrap ：默认值，不换行</li></ol><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1726966337864-611064ea-505d-454f-b945-2d18b8ef2207.png"></p><ol start="2"><li>wrap ：自动换行，伸缩容器不够自动换行</li></ol><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1726966361077-bd18e5e1-4bfb-47e8-96a1-463424e7e2b0.png">  </p><ol start="3"><li>wrap-reverse ：反向换行</li></ol><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1726966381663-ba5be45b-e563-4781-8dd6-8c7423f3fee9.png"></p><h2 id="Pljbv">13.6 flex-flow  </h2><p>flex-flow 是一个复合属性，复合了 flex-direction 和 flex-wrap 两个属性。 值没有顺序要求  </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">flex-flow</span>: row wrap;<br></code></pre></td></tr></table></figure><h2 id="jeE63">13.7 主轴对齐方式  </h2><p>属性名： justify-content<br>常用值如下：</p><ol><li>flex-start ：主轴起点对齐 —— 默认值</li><li>flex-end ：主轴终点对齐</li><li>center ：居中对齐</li><li>space-between ：均匀分布，两端对齐（最常用）</li><li>space-around ：均匀分布，两端距离是中间距离的一半</li><li>space-evenly ：均匀分布，两端距离与中间距离一致</li></ol><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1726966464496-f2b22ed1-ec20-470e-bbbb-8d31a2c555c1.png"></p><h2 id="rOM0r">13.8 侧轴对齐方式  </h2><h3 id="CwOnd">13.8.1 一行的情况  </h3><p>所需属性： align-items<br>常用值如下：</p><ol><li>flex-start ：侧轴的起点对齐</li><li>flex-end ：侧轴的终点对齐</li><li>center ：侧轴的中点对齐</li><li>baseline : 伸缩项目的第一行文字的基线对齐</li><li>stretch ：如果伸缩项目未设置高度，将占满整个容器的高度。—— （默认值）</li></ol><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1726966947651-bad9c3b6-2b0d-4c91-9fc1-dccdc16f14e8.png"></p><h3 id="SFyvK">13.8.2 多行的情况</h3><p>所需属性： align-content<br>常用值如下：</p><ol><li>flex-start ：与侧轴的起点对齐</li><li>flex-end ：与侧轴的终点对齐</li><li>center ：与侧轴的中点对齐</li><li>space-between ：与侧轴两端对齐，中间平均分布</li><li>space-around ：伸缩项目间的距离相等，比距边缘大一倍</li><li>space-evenly : 在侧轴上完全平分</li><li>stretch ：占满整个侧轴。—— 默认值</li></ol><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1726967661817-16cbaba0-1a53-4b7f-a6dd-4c243e11fcbc.png"></p><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1726967673390-b7b3fa9b-44e8-421f-b720-ad0965459243.png"></p><h2 id="LFjvK">13.9 flex 实现水平垂直居中  </h2><p> 方法一：父容器开启 flex 布局，随后使用 justify-content 和 align-items 实现水平垂直居中  </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.outer</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#888</span>;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">justify-content</span>: center;<br>  <span class="hljs-attribute">align-items</span>: center;<br>&#125;<br><span class="hljs-selector-class">.inner</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">background-color</span>: orange;<br>&#125;<br></code></pre></td></tr></table></figure><p>方法二：父容器开启 flex 布局，随后子元素 margin: auto</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.outer</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#888</span>;<br>  <span class="hljs-attribute">display</span>: flex;<br>&#125;<br><span class="hljs-selector-class">.inner</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">background-color</span>: orange;<br>  <span class="hljs-attribute">margin</span>: auto;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="zD4eU">13.10 伸缩性</h2><h3 id="sd9pn">13.10.1 flex-basis  </h3><p>概念： flex-basis 设置的是主轴方向的基准长度，会让宽度或高度失效</p><p>备注：主轴横向：宽度失效；主轴纵向：高度失效</p><p>作用：浏览器根据这个属性设置的值，计算主轴上是否有多余空间，默认值 auto ，即：伸缩项目 的宽或高  </p><h3 id="h8QpT">13.10.2 flex-grow（伸）  </h3><p>概念： flex-grow 定义伸缩项目的放大比例，默认为 0 ，即：纵使主轴存在剩余空间，也不拉伸（放大）。<br>规则：</p><ol><li>若所有伸缩项目的 flex-grow 值都为 1 ，则：它们将等分剩余空间（如果有空间的话）</li><li>若三个伸缩项目的 flex-grow 值分别为： 1 、 2 、 3 ，则：分别瓜分到： 1&#x2F;6 、 2&#x2F;6 、3&#x2F;6 的空间</li></ol><h3 id="dwTMr">13.10.3 flex-shrink（缩）  </h3><p>概念： flex-shrink 定义了项目的压缩比例，默认为 1 ，即：如果空间不足，该项目将会缩小</p><p>收缩项目的计算，略微复杂一点，我们拿一个场景举例：  </p><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1726968032793-34049806-a1bc-44b1-a4a3-a4b8e1bf438b.png"></p><h2 id="Zv9YI">13.11 flex复合属性  </h2><p>flex 是复合属性，复合了： flex-grow 、 flex-shrink 、 flex-basis 三个属性，默认值为 0 1 auto</p><p>如果写 flex:1 1 auto ，则可简写为： flex:auto </p><p>如果写 flex:1 1 0 ，则可简写为： flex:1 </p><p>如果写 flex:0 0 auto ，则可简写为： flex:none </p><p>如果写 flex:0 1 auto ，则可简写为： flex:0 auto —— 即 flex 初始值</p><h2 id="bF0rf">13.12 项目排序  </h2><p>order 属性定义项目的排列顺序。数值越小，排列越靠前，默认为 0  </p><h2 id="xlBGY">13.13 单独对齐  </h2><p>通过 align-self 属性，可以单独调整某个伸缩项目的对齐方式 默认值为 auto ，表示继承父元素的 align-items 属性  </p><h1 id="F9YQQ">十四、响应式布局</h1><h2 id="ZkyAx">14.1 媒体查询</h2><h3 id="Jaev8">14.1.1 媒体类型</h3><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1726968269148-50d41077-f406-4de4-a19c-9a34fa3011e1.png"></p><p>:::success<br> 完整列表请参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@media">https://developer.mozilla.org/zh-CN/docs/Web/CSS/@media</a>  </p><p>:::</p><h3 id="nUCpz">14.1.2 媒体特性  </h3><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1726968304181-933122f0-ba04-4ff3-9dd7-9c757c207151.png"></p><p>:::success<br> 完整列表请参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@media">https://developer.mozilla.org/zh-CN/docs/Web/CSS/@media</a>  </p><p>:::</p><h3 id="xm52u">14.1.3 运算符</h3><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1726968341116-0a23ab35-c664-4e83-9ddc-844a746ed6b2.png"></p><h3 id="OcJ4t">14.1.4 常用阈值  </h3><p>在实际开发中，会将屏幕划分成几个区间，例如：  </p><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1726968374101-8ab71d97-e66a-47ac-bf2b-4fab64ee45f4.png"></p><h3 id="qAR3G">14.1.5 结合外部样式的用法  </h3><p> 用法一：  </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;link rel=&quot;stylesheet&quot; media=&quot;具体的媒体查询&quot; href=&quot;mystylesheet<span class="hljs-selector-class">.css</span>&quot;&gt;<br></code></pre></td></tr></table></figure><p>用法二：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>:<span class="hljs-number">768px</span>) &#123;<br><span class="hljs-comment">/*CSS-Code;*/</span><br>&#125;<br><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>:<span class="hljs-number">768px</span>) <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>:<span class="hljs-number">1200px</span>) &#123;<br><span class="hljs-comment">/*CSS-Code;*/</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="EKYOG">十五、BFC</h1><h2 id="vGEjl">15.1 什么是BFC</h2><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1726968553755-8826bb72-b2a6-47ed-b5c4-83fa0c9cf342.png"></p><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/image-20240930204742694.png" alt="image-20240930204742694"></p><h2 id="gaJ37">15.2 开启了BFC能解决什么问题  </h2><ol><li>元素开启 BFC 后，其子元素不会再产生 margin 塌陷问题</li><li>元素开启 BFC 后，自己不会被其他浮动元素所覆盖</li><li>元素开启 BFC 后，就算其子元素浮动，元素自身高度也不会塌陷</li></ol><h2 id="ipyWM">15.3 如何开启BFC  </h2><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1726968642042-64910f14-5229-4be0-a754-748be67bb0b5.png"></p><h2 id="15-4-什么是IFC"><a href="#15-4-什么是IFC" class="headerlink" title="15.4 什么是IFC"></a>15.4 什么是IFC</h2><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/image-20240930205302640.png" alt="image-20240930205302640"></p><h2 id="15-5-什么是GFC"><a href="#15-5-什么是GFC" class="headerlink" title="15.5 什么是GFC"></a>15.5 什么是GFC</h2><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/image-20240930205818507.png" alt="image-20240930205818507"></p><h2 id="15-6-什么是FFC"><a href="#15-6-什么是FFC" class="headerlink" title="15.6 什么是FFC"></a>15.6 什么是FFC</h2><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/image-20240930205858873.png" alt="image-20240930205858873"></p><h1 id="十六、重构和重绘"><a href="#十六、重构和重绘" class="headerlink" title="十六、重构和重绘"></a>十六、重构和重绘</h1><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/image-20240930210011225.png" alt="image-20240930210011225"></p><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/image-20240930210118308.png" alt="image-20240930210118308"></p><h1 id="十七、版心"><a href="#十七、版心" class="headerlink" title="十七、版心"></a>十七、版心</h1><h2 id="17-1-版心的概念"><a href="#17-1-版心的概念" class="headerlink" title="17.1 版心的概念"></a>17.1 版心的概念</h2><p>版心：网页中主要内容所在的区域，一般在浏览器窗口中水平居中显示，让用户的视线更集中</p><p>常见的版心宽度值包括960px、980px、1000px、1200px</p><p>制作方法：使用标准流中的margin居中方法</p><h2 id="17-2-页面布局流程"><a href="#17-2-页面布局流程" class="headerlink" title="17.2 页面布局流程"></a>17.2 页面布局流程</h2><ol><li>确定页面的版心（可视区域）</li><li>分析页面中的行模块，以及每个行模块中的列模块</li><li>制作HTML页面，CSS文件</li><li>CSS初始化，通过DIV+CSS布局控制网页的各个模块</li></ol><h2 id="17-3-网页布局案例"><a href="#17-3-网页布局案例" class="headerlink" title="17.3 网页布局案例"></a>17.3 网页布局案例</h2><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/image-20241001091036217.png" alt="image-20241001091036217" style="zoom:50%;"><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/image-20241001091048246.png" alt="image-20241001091048246" style="zoom:50%;"><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/image-20241001091101807.png" alt="image-20241001091101807" style="zoom:50%;"><h1 id="十八、网页开发"><a href="#十八、网页开发" class="headerlink" title="十八、网页开发"></a>十八、网页开发</h1><h2 id="18-1-head标签"><a href="#18-1-head标签" class="headerlink" title="18.1 head标签"></a>18.1 head标签</h2><p><code>title</code>标签设置</p><p>网站图标设置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;shortcut icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;favicon.ico&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image/x-icon&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="18-2-CSS分级引入"><a href="#18-2-CSS分级引入" class="headerlink" title="18.2 CSS分级引入"></a>18.2 CSS分级引入</h2><ul><li>清除默认样式的CSS<ul><li>命名习惯  <code>reset.css</code></li><li>雅虎 YUI</li></ul></li><li>网站的公共样式CSS<ul><li>命名习惯 <code>common.css</code> <code>模块名.css</code></li></ul></li><li>每个页面自己独有的CSS<ul><li>命名习惯 <ul><li>一般文件名与HTML的文件名保持一致 <code>index.css</code></li><li>可以使用多个单词的拼写 <code>index_banner.css</code></li></ul></li></ul></li></ul><p><a href="https://blog.csdn.net/m0_67401270/article/details/123321807">https://blog.csdn.net/m0_67401270&#x2F;article&#x2F;details&#x2F;123321807</a></p><p><font style="color:rgb(51, 51, 51);background-color:rgb(248, 248, 248);">当 ‘margin属性为四个参数时，分别代表：上、右、下、左外边距</font></p><p><font style="color:rgb(51, 51, 51);background-color:rgb(248, 248, 248);">a标签的瞄伪类</font></p><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1716784039687-633ee108-45a9-4c1a-a1b3-ea1e75c1573f.png"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:link</span> <span class="hljs-comment">/* 未访问的链接 */</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:visited</span> <span class="hljs-comment">/* 已访问的链接 */</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> <span class="hljs-comment">/* 鼠标移动到链接上 */</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:active</span>  <span class="hljs-comment">/* 选定的链接 */</span><br></code></pre></td></tr></table></figure><p><strong><font style="color:rgb(51, 51, 51);">BFC</font></strong></p><ul><li><strong><font style="color:rgb(51, 51, 51);"> 根元素 </font></strong></li><li><strong><font style="color:rgb(51, 51, 51);"> float属性不为none </font></strong></li><li><strong><font style="color:rgb(51, 51, 51);"> position为absolute或fixed </font></strong></li><li><strong><font style="color:rgb(51, 51, 51);"> display为inline-block, table-cell, table-caption, flex, inline-flex </font></strong></li><li><strong><font style="color:rgb(51, 51, 51);"> overflow不为visible </font></strong></li></ul><h1 id="UeSXp">**<font style="color:rgb(51, 51, 51);">六、HTML Tips</font>**</h1><h2 id="eMQyq">**<font style="color:rgb(51, 51, 51);">哪些情况触发reflow和repaint</font>**</h2><p><font style="color:rgb(34, 34, 34);">repaint是某个DOM元素进行重绘；reflow是整个页面进行重排，也就是页面所有DOM元素渲染</font></p><p><strong><font style="color:rgb(51, 51, 51);">style变动造成repaint和reflow。 </font></strong></p><p><font style="color:rgb(34, 34, 34);">不涉及任何DOM元素的排版问题的变动为repaint，例如元素的color&#x2F;text-align&#x2F;text-decoration等等属性的变动。 </font></p><p><font style="color:rgb(34, 34, 34);">除上面所提到的DOM元素style的修改基本为reflow。例如元素的任何涉及长、宽、行高、边框、display等style的修改。</font></p><p><strong><font style="color:rgb(34, 34, 34);">触发repaint：</font></strong><font style="color:rgb(34, 34, 34);">   </font></p><p><font style="color:rgb(34, 34, 34);">     color的修改，如color&#x3D;#ddd；        </font></p><p><font style="color:rgb(34, 34, 34);">     text-align的修改，如text-align&#x3D;center；        </font></p><p><font style="color:rgb(34, 34, 34);">     a:hover也会造成重绘。        </font></p><p><font style="color:rgb(34, 34, 34);">     :hover引起的颜色等不导致页面回流的style变动   </font></p><p><font style="color:rgb(34, 34, 34);"> </font><strong><font style="color:rgb(34, 34, 34);">触发reflow：</font></strong><font style="color:rgb(34, 34, 34);">   </font></p><p><font style="color:rgb(34, 34, 34);">     width&#x2F;height&#x2F;border&#x2F;margin&#x2F;padding的修改，如width&#x3D;778px；        </font></p><p><font style="color:rgb(34, 34, 34);">     动画，:hover等伪类引起的元素表现改动，display&#x3D;none等造成页面回流；        </font></p><p><font style="color:rgb(34, 34, 34);">     appendChild等DOM元素操作；        </font></p><p><font style="color:rgb(34, 34, 34);">     font类style的修改；        </font></p><p><font style="color:rgb(34, 34, 34);">     background的修改，注意着字面上可能以为是重绘，但是浏览器确实回流了，经过浏览器厂家的优化，部分background的修改只触发repaint，当然IE不用考虑；        </font></p><p><font style="color:rgb(34, 34, 34);">     scroll页面，这个不可避免；        </font></p><p><font style="color:rgb(34, 34, 34);">     resize页面，桌面版本的进行浏览器大小的缩放，移动端的话，还没玩过能拖动程序，resize程序窗口大小的多窗口操作系统；    </font></p><p><font style="color:rgb(34, 34, 34);">     读取元素的属性（这个无法理解，但是技术达人是这么说的，那就把它当做定理吧）：读取元素的某些属性（offsetLeft、offsetTop、offsetHeight、offsetWidth、scrollTop&#x2F;Left&#x2F;Width&#x2F;Height、clientTop&#x2F;Left&#x2F;Width&#x2F;Height、getComputedStyle()、currentStyle(in IE))；   </font></p><p><font style="color:rgb(34, 34, 34);"></font></p><p><font style="color:rgb(34, 34, 34);"></font></p><p>目前没有浏览器支持 box-flex 属性。 </p><p><font style="color:rgb(34, 34, 34);">Firefox 支持替代的 -moz-box-flex 属性。 </font></p><p><font style="color:rgb(34, 34, 34);">Safari、Opera 以及 Chrome 支持替代的 -webkit-box-flex 属性。</font></p><p><font style="color:rgb(34, 34, 34);"></font></p><ol><li><font style="color:rgb(51, 51, 51);background-color:rgb(248, 248, 248);"> css加载不会阻塞DOM树的解析 </font></li><li><font style="color:rgb(51, 51, 51);background-color:rgb(248, 248, 248);"> css加载会阻塞DOM树的渲染 </font></li><li><font style="color:rgb(51, 51, 51);background-color:rgb(248, 248, 248);"> css加载会阻塞后面js语句的执行</font></li></ol><p><font style="color:rgb(51, 51, 51);background-color:rgb(248, 248, 248);"></font></p><p><img src="/2024/09/28/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/CSS%E6%95%99%E7%A8%8B/1716797013519-cee157bb-e64e-4f91-b1ba-a21f6c5f4b22.png"></p>]]></content>
    
    
    <categories>
      
      <category>未分类</category>
      
    </categories>
    
    
    <tags>
      
      <tag>未分类</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript教程</title>
    <link href="/2024/09/25/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/JavaScript%E6%95%99%E7%A8%8B/"/>
    <url>/2024/09/25/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/JavaScript%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<!-- more --><h1 id="一、JS基础"><a href="#一、JS基础" class="headerlink" title="一、JS基础"></a>一、JS基础</h1><h2 id="1-1-引入JS的方式"><a href="#1-1-引入JS的方式" class="headerlink" title="1.1 引入JS的方式"></a>1.1 引入JS的方式</h2><ol><li>写在<code>button</code>按钮的<code>onclick</code>属性里面，点击按钮，执行JS代码</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;button onclick=<span class="hljs-string">&quot;console.log(&#x27;点击按钮&#x27;)&quot;</span>&gt;点击按钮&lt;/button&gt;<br></code></pre></td></tr></table></figure><ol start="2"><li>写在超链接的href属性中，点击超链接，执行JS代码（不推荐使用）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;a href=<span class="hljs-string">&quot;javascript:alert(&#x27;让你点你就点！&#x27;);&quot;</span>&gt;你也点我一下&lt;/a&gt;<br>&lt;!-- 没有javascript限定符，点击超链接会显示一串英文 --&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:;&quot;</span>&gt;</span>你也点我一下<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br>&lt;!-- 点击没有任何反应，只是用于<span class="hljs-variable constant_">JS</span>处理一些功能 --&gt;<br></code></pre></td></tr></table></figure><ol start="3"><li>写在<code>script</code>标签里面【内部方式】</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;写在script标签里面的JS代码&quot;</span>);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><ol start="4"><li>写在外部的JS文件中，通过<code>script</code>标签引入（推荐使用）【外部方式】</li></ol><p>​此时不能在标签内部写代码，即使编写，浏览器也会忽略</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script src=<span class="hljs-string">&quot;./js/script.js&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="1-2-注释"><a href="#1-2-注释" class="headerlink" title="1.2 注释"></a>1.2 注释</h2><h3 id="1-2-1-单行注释"><a href="#1-2-1-单行注释" class="headerlink" title="1.2.1 单行注释"></a>1.2.1 单行注释</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//单行注释</span><br></code></pre></td></tr></table></figure><h3 id="1-2-2-多行注释"><a href="#1-2-2-多行注释" class="headerlink" title="1.2.2 多行注释"></a>1.2.2 多行注释</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">  多行注释</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h2 id="1-3-结束符"><a href="#1-3-结束符" class="headerlink" title="1.3 结束符"></a>1.3 结束符</h2><p><code>;</code>代表一段代码的结束，可以省略不写，使用回车替代</p><h2 id="1-4-输入和输出"><a href="#1-4-输入和输出" class="headerlink" title="1.4 输入和输出"></a>1.4 输入和输出</h2><h3 id="1-4-1-输出"><a href="#1-4-1-输出" class="headerlink" title="1.4.1 输出"></a>1.4.1 输出</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">alert</span>()<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">wirte</span>()<br></code></pre></td></tr></table></figure><h3 id="1-4-2-输入"><a href="#1-4-2-输入" class="headerlink" title="1.4.2 输入"></a>1.4.2 输入</h3><p> 向 <code>prompt()</code> 输入任意内容会以弹窗形式出现在浏览器中，一般提示用户输入一些内容  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">prompt</span>()<br></code></pre></td></tr></table></figure><h2 id="1-5-变量"><a href="#1-5-变量" class="headerlink" title="1.5 变量"></a>1.5 变量</h2><h3 id="1-5-1-声明"><a href="#1-5-1-声明" class="headerlink" title="1.5.1 声明"></a>1.5.1 声明</h3><p>声明（定义）变量有两部分构成：声明关键字、变量名（标识）  </p><p>关键字是<code>let</code>、<code>var</code></p><h3 id="1-5-2-赋值"><a href="#1-5-2-赋值" class="headerlink" title="1.5.2 赋值"></a>1.5.2 赋值</h3><p>声明（定义）变量相当于创造了一个空的“容器”，通过赋值向这个容器中添加数据  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> age;<br>age = <span class="hljs-number">18</span>;<br></code></pre></td></tr></table></figure><h3 id="1-5-3-关键字"><a href="#1-5-3-关键字" class="headerlink" title="1.5.3 关键字"></a>1.5.3 关键字</h3><p><font style="color:#DF2A3F;">以下是使用 let 时的注意事项：</font></p><ol><li>允许声明和赋值同时进行</li><li>不允许重复声明</li><li>允许同时声明多个变量并赋值</li><li>JavaScript 中内置的一些关键字不能被当做变量名</li></ol><p><font style="color:#DF2A3F;">以下是使用 var 时的注意事项：</font></p><ol><li>允许声明和赋值同时进行</li><li>允许重复声明</li><li>允许同时声明多个变量并赋值</li></ol><h3 id="1-5-4-变量命名规则"><a href="#1-5-4-变量命名规则" class="headerlink" title="1.5.4 变量命名规则"></a>1.5.4 变量命名规则</h3><ol><li>只能是字母、数字、下划线、$，且不能以数字开头</li><li>区分大小写</li><li>JavaScript 内部已占用于单词（关键字或保留字）不允许使用</li><li>见名知意</li></ol><h2 id="1-6-常量"><a href="#1-6-常量" class="headerlink" title="1.6 常量"></a>1.6 常量</h2><p>使用 const 声明的变量称为“常量”  </p><p>使用场景：当某个变量永远不会改变的时候，就可以使用 const 来声明，而不是let  </p><p>命名规范：和变量一致</p><p>注意： 常量不允许重新赋值,声明的时候必须赋值（初始化）  </p><h2 id="1-7-数据类型"><a href="#1-7-数据类型" class="headerlink" title="1.7 数据类型"></a>1.7 数据类型</h2><p>通过<code>typeof</code>关键字检测数据类型</p><h3 id="1-7-1-数值类型"><a href="#1-7-1-数值类型" class="headerlink" title="1.7.1 数值类型"></a>1.7.1 数值类型</h3><p>JavaScript 中的数值类型与数学中的数字是一样的，分为正数、负数、小数等</p><h3 id="1-7-2-字符串类型"><a href="#1-7-2-字符串类型" class="headerlink" title="1.7.2 字符串类型"></a>1.7.2 字符串类型</h3><p>通过单引号（ <code>&#39;&#39;</code> ） 、双引号（<code>&quot;&quot;</code>）或反引号（&#96;&#96;&#96;&#96;）包裹的数据都叫字符串</p><p>单引号和双引号没有本质上的区别，推荐使用单引号</p><p>注意事项：</p><ol><li>无论单引号或是双引号必须成对使用</li><li>单引号&#x2F;双引号可以互相嵌套，但是不以自已嵌套自已</li><li>必要时可以使用转义符<code>\</code>，输出单引号或双引号</li></ol><h3 id="1-7-3-布尔类型"><a href="#1-7-3-布尔类型" class="headerlink" title="1.7.3 布尔类型"></a>1.7.3 布尔类型</h3><p>表示肯定或否定时在计算机中对应的是布尔类型数据，它有两个固定的值 true 和 false ， 表示肯定的数据用 </p><p>true ，表示否定的数据用 false</p><h3 id="1-7-4-undefined"><a href="#1-7-4-undefined" class="headerlink" title="1.7.4 undefined"></a>1.7.4 undefined</h3><p>未定义是比较特殊的类型，只有一个值undefined，只声明变量，不赋值的情况下，变量的默认值为undefined，</p><p>一般很少直接为某个变量赋值undefined</p><h2 id="1-8-类型转换"><a href="#1-8-类型转换" class="headerlink" title="1.8 类型转换"></a>1.8 类型转换</h2><h3 id="1-8-1-隐式转换"><a href="#1-8-1-隐式转换" class="headerlink" title="1.8.1 隐式转换"></a>1.8.1 隐式转换</h3><p>某些运算符被执行时，系统内部自动将数据类型进行转换，这种转换称为隐式转换</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>  <span class="hljs-keyword">let</span> num = <span class="hljs-number">13</span> <span class="hljs-comment">// 数值</span><br>  <span class="hljs-keyword">let</span> num2 = <span class="hljs-string">&#x27;2&#x27;</span> <span class="hljs-comment">// 字符串</span><br>  <span class="hljs-comment">// 结果为 132</span><br>  <span class="hljs-comment">// 原因是将数值 num 转换成了字符串，相当于 &#x27;13&#x27;</span><br>  <span class="hljs-comment">// 然后 + 将两个字符串拼接到了一起</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num + num2)<br>  <span class="hljs-comment">// 结果为 11</span><br>  <span class="hljs-comment">// 原因是将字符串 num2 转换成了数值，相当于 2</span><br>  <span class="hljs-comment">// 然后数值 13 减去 数值 2</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num - num2)<br>  <span class="hljs-keyword">let</span> a = <span class="hljs-title function_">prompt</span>(<span class="hljs-string">&#x27;请输入一个数字&#x27;</span>)<br>  <span class="hljs-keyword">let</span> b = <span class="hljs-title function_">prompt</span>(<span class="hljs-string">&#x27;请再输入一个数字&#x27;</span>)<br>  <span class="hljs-title function_">alert</span>(a + b);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="1-8-2-显式转换"><a href="#1-8-2-显式转换" class="headerlink" title="1.8.2 显式转换"></a>1.8.2 显式转换</h3><p>通过<code>Number()</code>显式转换成数值类型，当转换失败时结果为NaN（Not a Number）</p><h2 id="1-9-运算符"><a href="#1-9-运算符" class="headerlink" title="1.9 运算符"></a>1.9 运算符</h2><h3 id="1-9-1-算术运算符"><a href="#1-9-1-算术运算符" class="headerlink" title="1.9.1 算术运算符"></a>1.9.1 算术运算符</h3><img src="/2024/09/25/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/JavaScript%E6%95%99%E7%A8%8B/1727015562212-cf80c213-e330-4701-be2d-c867f4f3725e.png" style="zoom: 67%;"><p>计算失败的时候，显示的结果是NaN</p><h3 id="1-9-2-赋值运算符"><a href="#1-9-2-赋值运算符" class="headerlink" title="1.9.2 赋值运算符"></a>1.9.2 赋值运算符</h3><img src="/2024/09/25/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/JavaScript%E6%95%99%E7%A8%8B/1727015649418-f016c348-5db4-41d0-94a8-20f4981d6622.png" style="zoom:67%;"><h3 id="1-9-3-自增-自减运算符"><a href="#1-9-3-自增-自减运算符" class="headerlink" title="1.9.3 自增&#x2F;自减运算符"></a>1.9.3 自增&#x2F;自减运算符</h3><img src="/2024/09/25/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/JavaScript%E6%95%99%E7%A8%8B/1727015694731-5125df66-a63e-4be8-ae22-e8de65cc52f2.png" style="zoom:67%;"><ul><li>++、– 可以在变量前面也可以在变量后面，在单独使用时并没有差别</li><li>++在后（后缀式）我们会使用更多</li><li>只有变量能够使用自增和自减运算符</li></ul><h3 id="1-9-4-比较运算符"><a href="#1-9-4-比较运算符" class="headerlink" title="1.9.4 比较运算符"></a>1.9.4 比较运算符</h3><img src="/2024/09/25/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/JavaScript%E6%95%99%E7%A8%8B/1727015878982-f1fb44e5-5457-4b58-b921-71af2fd9e4e4.png" style="zoom:67%;"><img src="/2024/09/25/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/JavaScript%E6%95%99%E7%A8%8B/1727016472926-1936392e-9ef3-4d5a-9ec4-15b8f3f13659.png" style="zoom:67%;"><h3 id="1-9-5-逻辑运算符"><a href="#1-9-5-逻辑运算符" class="headerlink" title="1.9.5 逻辑运算符"></a>1.9.5 逻辑运算符</h3><img src="/2024/09/25/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/JavaScript%E6%95%99%E7%A8%8B/1727016505220-e1446d0a-f9a2-4ea8-946a-3bf53ec66c1b.png" style="zoom:67%;"><h3 id="1-9-6-运算符优先级"><a href="#1-9-6-运算符优先级" class="headerlink" title="1.9.6 运算符优先级"></a>1.9.6 运算符优先级</h3><p> 逻辑运算符优先级： <code>！&gt; &amp;&amp; &gt; ||</code>  </p><h2 id="1-10-表达式"><a href="#1-10-表达式" class="headerlink" title="1.10 表达式"></a>1.10 表达式</h2><h3 id="1-10-1-表达式和语句"><a href="#1-10-1-表达式和语句" class="headerlink" title="1.10.1 表达式和语句"></a>1.10.1 表达式和语句</h3><p>表达式：可以被求值的代码，并将其计算出一个结果</p><p>语句：一段可以执行的代码，是一个行为</p><h3 id="1-10-2-分支和语句"><a href="#1-10-2-分支和语句" class="headerlink" title="1.10.2 分支和语句"></a>1.10.2 分支和语句</h3><p>分支语句可以根据条件判定真假，来选择性的执行想要的代码  </p><p><strong>if分支语句 - 范围判断</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span>(条件表达式) &#123;<br>  <span class="hljs-comment">// 满足条件要执行的语句</span><br>&#125;<br><br><span class="hljs-keyword">if</span> (条件表达式)&#123;<br>  <span class="hljs-comment">// 满足条件要执行的语句</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-comment">// 不满足条件要执行的语句</span><br>&#125;<br><br><span class="hljs-keyword">if</span> (score &gt;= <span class="hljs-number">90</span>) &#123;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;成绩优秀，宝贝，你是我的骄傲&#x27;</span>)<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt;= <span class="hljs-number">70</span>) &#123;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;成绩良好，宝贝，你要加油哦~~&#x27;</span>)<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt;= <span class="hljs-number">60</span>) &#123;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;成绩及格，宝贝，你很危险~&#x27;</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;成绩不及格，宝贝，我不想和你说话，我只想用鞭子和你说话~&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>三元运算符</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">条件 ? 表达式<span class="hljs-number">1</span> ： 表达式<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p><strong>switch语句 - 确定值、必须是全等（数据类型一致）、注意break</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">switch</span> (表达式) &#123;<br><span class="hljs-keyword">case</span> 值<span class="hljs-number">1</span>:<br>  代码<span class="hljs-number">1</span><br>  <span class="hljs-keyword">break</span><br><span class="hljs-keyword">case</span> 值<span class="hljs-number">2</span>:<br>  代码<span class="hljs-number">2</span><br>  <span class="hljs-keyword">break</span><br>  ...<br><span class="hljs-attr">default</span>:<br>  代码n<br>&#125;<br></code></pre></td></tr></table></figure><p>当分支比较少时，if…else语句执行效率高</p><p>当分支比较多时，switch语句执行效率高，而且结构更清晰</p><p>内部生成一个跳表，每个常量对应一个内存地址，通过二分查找，锁定常量，跳转至指定位置</p><h3 id="1-10-3-循环语句"><a href="#1-10-3-循环语句" class="headerlink" title="1.10.3 循环语句"></a>1.10.3 循环语句</h3><p><strong>while循环 - 不确定循环次数</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">while</span> (条件表达式) &#123;<br>  <span class="hljs-comment">//循环体</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>break 中止整个循环  </li><li>continue 中止本次循环</li></ul><p><strong>无限循环</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>  <br>&#125;<br><br><span class="hljs-keyword">for</span>(;;) &#123;<br>  <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>for循环 - 确定循环次数</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span>(起始值; 终止条件; 变化量) &#123;<br>  <span class="hljs-comment">//要重复执行的代码</span><br>&#125;<br></code></pre></td></tr></table></figure><p>:::success<br> 注意： for 的语法结构更简洁，故 for 循环的使用频次会更多</p><p>:::</p><p><strong>循环嵌套</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span>(外部声明记录循环次数的变量; 循环条件; 变化量) &#123;<br>  <span class="hljs-keyword">for</span>(内部声明记录循环次数的变量; 循环条件; 变化量) &#123;<br>    <span class="hljs-comment">//循环体</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-11-数组"><a href="#1-11-数组" class="headerlink" title="1.11 数组"></a>1.11 数组</h2><h3 id="1-11-1-数组的概念"><a href="#1-11-1-数组的概念" class="headerlink" title="1.11.1 数组的概念"></a>1.11.1 数组的概念</h3><p><strong>数组：</strong>(Array)是一种可以按顺序保存数据的数据类型（属于对象）</p><h3 id="1-11-2-数组的基本使用"><a href="#1-11-2-数组的基本使用" class="headerlink" title="1.11.2 数组的基本使用"></a>1.11.2 数组的基本使用</h3><p><strong>定义数组和数组单元</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>  <span class="hljs-comment">// 1. 语法，使用 [] 来定义一个空数组</span><br>  <span class="hljs-comment">// 定义一个空数组，然后赋值给变量 classes</span><br>  <span class="hljs-comment">// let classes = [];</span><br>  <span class="hljs-comment">// 2. 定义非空数组</span><br>  <span class="hljs-keyword">let</span> classes = [<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-string">&#x27;小刚&#x27;</span>, <span class="hljs-string">&#x27;小红&#x27;</span>, <span class="hljs-string">&#x27;小丽&#x27;</span>, <span class="hljs-string">&#x27;小米&#x27;</span>]<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><strong>访问数组和数组索引</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">1.</span> 访问数组，语法格式为：变量名[索引值]<br><span class="hljs-number">2.</span> 通过索引值还可以为数组单元重新赋值<br></code></pre></td></tr></table></figure><p>**数据单元值类型 **</p><ul><li>数组做为数据的集合，它的单元值可以是任意数据类型</li></ul><p>**数组长度属性  **</p><ul><li>数组对应着一个 length 属性，它的含义是获取数组的长度</li></ul><p><strong>数组map方法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>    <span class="hljs-keyword">const</span> arr = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;pink&#x27;</span>]<br>    <span class="hljs-comment">// 1. 数组 map方法 处理数据并且 返回一个数组</span><br>    <span class="hljs-keyword">const</span> newArr = arr.<span class="hljs-title function_">map</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">ele, index</span>) &#123;<br>    <span class="hljs-comment">// console.log(ele) // 数组元素</span><br>    <span class="hljs-comment">// console.log(index) // 索引号</span><br>    <span class="hljs-keyword">return</span> ele + <span class="hljs-string">&#x27;颜色&#x27;</span><br>    &#125;)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newArr)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><strong>数组join方法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>    <span class="hljs-comment">// 数组join方法 把数组转换为字符串</span><br>    <span class="hljs-comment">// 小括号为空则逗号分割</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newArr.<span class="hljs-title function_">join</span>()) <span class="hljs-comment">// red颜色,blue颜色,pink颜色</span><br>    <span class="hljs-comment">// 小括号是空字符串，则元素之间没有分隔符</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newArr.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>)) <span class="hljs-comment">//red颜色blue颜色pink颜色</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newArr.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;|&#x27;</span>)) <span class="hljs-comment">//red颜色|blue颜色|pink颜色</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="1-11-3-操作数组"><a href="#1-11-3-操作数组" class="headerlink" title="1.11.3 操作数组"></a>1.11.3 操作数组</h3><ol><li><code>push</code> 动态向数组的尾部添加一个单元</li><li><code>unshit</code> 动态向数组头部添加一个单元</li><li><code>pop</code> 删除最后一个单元</li><li><code>shift</code> 删除第一个单元</li><li><code>splice</code> 动态删除任意单元</li></ol><ul><li>删除数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>]<br>arr.<span class="hljs-title function_">splice</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>) <span class="hljs-comment">// 删除green元素</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr) <span class="hljs-comment">// [&#x27;red, &#x27;blue&#x27;]</span><br></code></pre></td></tr></table></figure><ul><li>添加元素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>]<br><span class="hljs-comment">//arr.splice(1, 0, &#x27;pink&#x27;) // 在索引号是1的位置添加 pink</span><br><span class="hljs-comment">//console.log(arr) // [&#x27;red&#x27;, &#x27;pink&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;]</span><br>arr.<span class="hljs-title function_">splice</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;pink&#x27;</span>, <span class="hljs-string">&#x27;hotpink&#x27;</span>) <span class="hljs-comment">// 在索引号是1的位置添加 pink hotpink</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr) <span class="hljs-comment">// [&#x27;red&#x27;, &#x27;pink&#x27;, &#x27;hotpink&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;]</span><br></code></pre></td></tr></table></figure><p>以上方法都是对原数组进行操作</p><h2 id="1-12-函数"><a href="#1-12-函数" class="headerlink" title="1.12 函数"></a>1.12 函数</h2><h3 id="1-12-1-声明和调用"><a href="#1-12-1-声明和调用" class="headerlink" title="1.12.1 声明和调用"></a>1.12.1 声明和调用</h3><p>函数可以把具有相同或相似逻辑的代码“包裹”起来，通过函数调用执行这些被“包裹”的代码逻辑</p><p>这么做的优势是有利于精简代码、方便复用</p><p><strong>声明（定义）</strong><br>声明（定义）一个完整函数包括关键字、函数名、形式参数、函数体、返回值5个部分  </p><p><img src="/2024/09/25/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/JavaScript%E6%95%99%E7%A8%8B/1727048704660-4f5b1097-39a3-4bc7-84e4-9a615326a8a1.png"></p><p><strong>调用</strong></p><ul><li>声明（定义）的函数必须调用才会真正被执行，使用<code>函数名()</code>调用函数  </li><li>函数名的命名规则与变量是一致的，并且尽量保证函数名的语义</li></ul><p><strong>参数</strong></p><ul><li>声明（定义）函数时的形参没有数量限制，当有多个形参时使用 , 分隔  </li><li>调用函数传递的实参要与形参的顺序一致  </li><li>形参和实参<ul><li>形参：声明函数时写在函数名右边小括号里的叫形参（形式上的参数）  </li><li>实参：调用函数时写在函数名右边小括号里的叫实参（实际上的参数）</li></ul></li></ul><p><strong>返回值</strong></p><p>要想获得函数内部逻辑的执行结果，需要通过 return 这个关键字，将内部执行结果传递到函数外部，这个被传递到外部的结果就是返回值  </p><ul><li>在函数体中使用return 关键字能将内部的执行结果交给函数外部使用  </li><li>函数内部只能出现1 次 return，并且 return 下一行代码不会再被执行，所以return 后面的 数据不要换行写</li><li>return会立即结束当前函数  </li><li>函数可以没有return，这种情况默认返回值为 unde</li></ul><p><strong>作用域</strong></p><p>通常来说，一段程序代码中所用到的名字并不总是有效和可用的，而限定这个名字的可用性的代码范围就是这个名字的作用域  </p><p>作用域的使用提高了程序逻辑的局部性，增强了程序的可靠性，减少了名字冲突  </p><ul><li>全局作用域<ul><li>作用于所有代码执行的环境(整个 script 标签内部)或者一个独立的 js 文件  </li><li>处于全局作用域内的变量，称为全局变量</li></ul></li><li>局部作用域<ul><li>作用于函数内的代码环境，就是局部作用域。 因为跟函数有关系，所以也称为函数作用域  </li><li>处于局部作用域内的变量称为局部变量</li></ul></li></ul><p>如果函数内部，变量没有声明，直接赋值，也当全局变量看，但是强烈不推荐</p><p>但是有一种情况，函数内部的形参可以看做是局部变量</p><h3 id="1-12-2-匿名函数"><a href="#1-12-2-匿名函数" class="headerlink" title="1.12.2 匿名函数"></a>1.12.2 匿名函数</h3><p>函数可以分为具名函数和匿名函数  </p><p>匿名函数：没有名字的函数，无法直接使用  </p><p><strong>函数表达式</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 声明</span><br><span class="hljs-keyword">let</span> fn = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;函数表达式&#x27;</span>)<br>&#125;<br><span class="hljs-comment">// 调用</span><br><span class="hljs-title function_">fn</span>()<br></code></pre></td></tr></table></figure><p><strong>立即执行函数</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; xxx &#125;)();<br>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;xxxx&#125;());<br></code></pre></td></tr></table></figure><ul><li>无需调用，立即执行</li><li>多个立即执行函数之间用分号隔开</li></ul><h2 id="1-13-对象"><a href="#1-13-对象" class="headerlink" title="1.13 对象"></a>1.13 对象</h2><h3 id="1-13-1-语法"><a href="#1-13-1-语法" class="headerlink" title="1.13.1 语法"></a>1.13.1 语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 声明对象类型变量，使用一对花括号</span><br><span class="hljs-comment">// user 便是一个对象了，目前它是一个空对象</span><br><span class="hljs-keyword">let</span> user = &#123;&#125;<br></code></pre></td></tr></table></figure><h3 id="1-13-2-属性和访问"><a href="#1-13-2-属性和访问" class="headerlink" title="1.13.2 属性和访问"></a>1.13.2 属性和访问</h3><ol><li>属性都是成对出现的，包括属性名和值，它们之间使用英文<code>:</code>分隔</li><li>多个属性之间使用英文 <code>,</code>分隔</li><li>属性就是依附在对象上的变量</li><li>属性名可以使用<code>&quot;&quot;</code> 或 <code>&#39;&#39;</code> ，一般情况下省略，除非名称遇到特殊符号如空格、中横线等</li></ol><p>可以使用<code>.</code>或<code>[]</code>获得对象中属性对应的值，称之为属性访问</p><p>可以动态为对象添加属性，动态添加与直接定义是一样的</p><h3 id="1-13-3-方法和调用"><a href="#1-13-3-方法和调用" class="headerlink" title="1.13.3 方法和调用"></a>1.13.3 方法和调用</h3><p>数据行为性的信息称为方法，其本质是函数</p><ol><li>方法是由方法名和函数两部分构成，它们之间使用<code>:</code>分隔</li><li>多个方法之间使用英文<code>,</code>分隔</li><li>方法是依附在对象中的函数</li><li>方法名可以使用<code>&quot;&quot;</code>或<code>&#39;&#39;</code>，一般情况下省略，除非名称遇到特殊符号如空格、中横线等</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>  <span class="hljs-comment">// 方法是依附在对象上的函数</span><br>  <span class="hljs-keyword">let</span> person = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;小红&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>    <span class="hljs-comment">// 方法是由方法名和函数两部分构成，它们之间使用 : 分隔</span><br>    <span class="hljs-attr">singing</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;两只老虎，两只老虎，跑的快，跑的快...&#x27;</span>)<br>    &#125;,<br>    <span class="hljs-attr">run</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我跑的非常快...&#x27;</span>)<br>    &#125;<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>可以使用<code>.</code>或<code>[]</code>调用对象中的函数，称之为方法调用</p><p>可以动态为对象添加方法，动态添加与直接定义是一样的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>    <span class="hljs-keyword">let</span> student = &#123;<br>        <span class="hljs-attr">run</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;跑步中~&#x27;</span>);<br>        &#125;<br>    &#125;<br>    student.<span class="hljs-title function_">run</span>()<br>    student[<span class="hljs-string">&#x27;run&#x27;</span>]()<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>无论是属性或是方法，同一个对象中出现名称一样的，后面的会覆盖前面的 </p><h3 id="1-13-4-null"><a href="#1-13-4-null" class="headerlink" title="1.13.4 null"></a>1.13.4 null</h3><p><code>null</code> 也是 JavaScript 中数据类型的一种，通常只用它来表示不存在的对象  </p><p>通过<code>typeof</code>检测其数据类型，结果是<code>Object</code></p><h3 id="1-13-5-遍历对象"><a href="#1-13-5-遍历对象" class="headerlink" title="1.13.5 遍历对象"></a>1.13.5 遍历对象</h3><p>既遍历对象中的属性，也遍历对象中的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;<br>  <span class="hljs-attr">uname</span>: <span class="hljs-string">&#x27;pink&#x27;</span><br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> k <span class="hljs-keyword">in</span> obj) &#123;<br>  <span class="hljs-comment">// k是属性名，数据类型是字符串</span><br>  <span class="hljs-comment">// obj[k] 属性值</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-14-内置对象"><a href="#1-14-内置对象" class="headerlink" title="1.14 内置对象"></a>1.14 内置对象</h2><h3 id="1-14-1-Math"><a href="#1-14-1-Math" class="headerlink" title="1.14.1 Math"></a>1.14.1 Math</h3><p><strong>属性</strong></p><p><code>Math.PI</code> 获取圆周率  </p><p><strong>方法</strong></p><p><code>Math.random</code> 生成 0 到 1 间的随机数（包含 0 不包含 1）</p><p><code>Math.ceil</code> 数字向上取整  </p><p><code>Math.floor</code> 数字向下取整</p><p><code>Math.round</code> 四舍五入取整  </p><p><code>Math.max</code>在一组数中找出最大的  </p><p><code>Math.min</code> 在一组数中找出最小的  </p><p><code>Math.pow</code> 幂方法  </p><p><code>Math.sqrt</code> 平方根  </p><h1 id="二、Web-API"><a href="#二、Web-API" class="headerlink" title="二、Web API"></a>二、Web API</h1><h2 id="2-1-概念"><a href="#2-1-概念" class="headerlink" title="2.1 概念"></a>2.1 概念</h2><p><code>ES</code>和<code>JS</code>的关系</p><p><img src="/2024/09/25/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/JavaScript%E6%95%99%E7%A8%8B/1727051124251-0177b633-45d8-417a-a044-2c826a386bc9.png"></p><p><code>DOM（Document Object Model）</code>是将整个 HTML 文档的每一个标签元素视为一个对象，这个 对象下包含了</p><p>许多的属性和方法，通过操作这些属性或者调用这些方法实现对 HTML 的动态 更新，为实现网页特效以及用户交</p><p>互提供技术支撑 </p><h3 id="2-1-1-DOM树"><a href="#2-1-1-DOM树" class="headerlink" title="2.1.1 DOM树"></a>2.1.1 DOM树</h3><p><img src="/2024/09/25/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/JavaScript%E6%95%99%E7%A8%8B/1727051478697-4c751076-3429-4f08-ae57-27fa3508f62d.png"></p><h3 id="2-1-2-DOM节点"><a href="#2-1-2-DOM节点" class="headerlink" title="2.1.2 DOM节点"></a>2.1.2 DOM节点</h3><p>节点是文档树的组成部分，每一个节点都是一个 DOM 对象，主要分为</p><p><strong>元素节点：HTML标签</strong></p><p><strong>属性节点：HTML标签中的属性</strong></p><p><strong>文本节点：HTML标签中的文本内容</strong></p><p><strong>根节点：</strong>&#96;<strong><html>标签</html></strong></p><h3 id="2-1-3-Docment"><a href="#2-1-3-Docment" class="headerlink" title="2.1.3 Docment"></a>2.1.3 Docment</h3><p><code>document</code> 是 JavaScript 内置的专门用于 DOM 的对象  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>  <span class="hljs-comment">// document 是内置的对象</span><br>  <span class="hljs-comment">// console.log(typeof document);</span><br>  <span class="hljs-comment">// 1. 通过 document 获取根节点</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>); <span class="hljs-comment">// 对应 html 标签</span><br>  <span class="hljs-comment">// 2. 通过 document 节取 body 节点</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>); <span class="hljs-comment">// 对应 body 标签</span><br>  <span class="hljs-comment">// 3. 通过 document.write 方法向网页输出内容</span><br>  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;Hello World!&#x27;</span>);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="2-2-获取DOM对象"><a href="#2-2-获取DOM对象" class="headerlink" title="2.2 获取DOM对象"></a>2.2 获取DOM对象</h2><ul><li><code>querySelector</code>获取满足条件的第一个元素（写选择器）</li><li><code>querySelectorAll</code>获取满足条件的所有元素，返回伪数组（写选择器）</li><li><code>getElementById</code>通过id获取元素节点（直接写ID名称）</li><li><code>getElementByClassName</code>通过class获取元素节点（直接写类名）</li></ul><p>任意 DOM 对象都包含 nodeType 属性，用来检检测节点类型</p><h2 id="2-3-操作元素内容"><a href="#2-3-操作元素内容" class="headerlink" title="2.3 操作元素内容"></a>2.3 操作元素内容</h2><p>修改DOM的文本内容</p><p><code>innerText</code> 将文本内容添加&#x2F;更新到任意标签位置，文本中包含的标签不会被解析</p><p><code>innerHTML</code> 将文本内容添加&#x2F;更新到任意标签位置，文本中包含的标签会被解析</p><h2 id="2-4-操作元素属性"><a href="#2-4-操作元素属性" class="headerlink" title="2.4 操作元素属性"></a>2.4 操作元素属性</h2><h3 id="2-4-1-常用属性修改"><a href="#2-4-1-常用属性修改" class="headerlink" title="2.4.1 常用属性修改"></a>2.4.1 常用属性修改</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>    <span class="hljs-comment">// 1. 获取 img 对应的 DOM 元素</span><br>    <span class="hljs-keyword">const</span> pic = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.pic&#x27;</span>)<br>    <span class="hljs-comment">// 2. 修改属性</span><br>    pic.<span class="hljs-property">src</span> = <span class="hljs-string">&#x27;./images/lion.webp&#x27;</span><br>    pic.<span class="hljs-property">width</span> = <span class="hljs-number">400</span>;<br>    pic.<span class="hljs-property">alt</span> = <span class="hljs-string">&#x27;图片不见了...&#x27;</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="2-4-2-控制样式属性"><a href="#2-4-2-控制样式属性" class="headerlink" title="2.4.2 控制样式属性"></a>2.4.2 控制样式属性</h3><ul><li>修改行内样式 <code>style</code> 属性</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>练习 - 修改样式<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>随便一些文本内容<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 获取 DOM 节点</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> box = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.intro&#x27;</span>)</span><br><span class="language-javascript">        box.<span class="hljs-property">style</span>.<span class="hljs-property">color</span> = <span class="hljs-string">&#x27;red&#x27;</span></span><br><span class="language-javascript">        box.<span class="hljs-property">style</span>.<span class="hljs-property">width</span> = <span class="hljs-string">&#x27;300px&#x27;</span></span><br><span class="language-javascript">        <span class="hljs-comment">// css 属性的 - 连接符与 JavaScript 的 减运算符</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 冲突，所以要改成驼峰法</span></span><br><span class="language-javascript">        box.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&#x27;pink&#x27;</span></span><br><span class="language-javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>CSS属性若含有 - ，应该用小驼峰命名法 </p><p>background-color 改为 backgroundColor</p></blockquote><ul><li>操作类名 <code>className</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>练习 - 修改样式<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">            <span class="hljs-selector-class">.pink</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: pink;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: hotpink;</span><br><span class="language-css">            &#125;</span><br><span class="language-css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>随便一些文本内容<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// 获取 DOM 节点</span></span><br><span class="language-javascript">            <span class="hljs-keyword">const</span> box = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.intro&#x27;</span>)</span><br><span class="language-javascript">            box.<span class="hljs-property">className</span> = <span class="hljs-string">&#x27;pink&#x27;</span></span><br><span class="language-javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>className的方式是新值换旧值</p></blockquote><ul><li>通过 <code>classList</code> 操作类</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">            <span class="hljs-selector-tag">div</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: pink;</span><br><span class="language-css">                &#125;</span><br><span class="language-css">            <span class="hljs-selector-class">.active</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: hotpink;</span><br><span class="language-css">            <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            &#125;</span><br><span class="language-css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// 1.获取元素</span></span><br><span class="language-javascript">            <span class="hljs-comment">// let box = document.querySelector(&#x27;css选择器&#x27;)</span></span><br><span class="language-javascript">            <span class="hljs-keyword">let</span> box = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>)</span><br><span class="language-javascript">            <span class="hljs-comment">// add是个方法 添加 追加</span></span><br><span class="language-javascript">            <span class="hljs-comment">// box.classList.add(&#x27;active&#x27;)</span></span><br><span class="language-javascript">            <span class="hljs-comment">// remove() 移除 类</span></span><br><span class="language-javascript">            <span class="hljs-comment">// box.classList.remove(&#x27;one&#x27;)</span></span><br><span class="language-javascript">            <span class="hljs-comment">// 切换类</span></span><br><span class="language-javascript">            box.<span class="hljs-property">classList</span>.<span class="hljs-title function_">toggle</span>(<span class="hljs-string">&#x27;one&#x27;</span>)</span><br><span class="language-javascript">            <span class="hljs-comment">//查看是否有类</span></span><br><span class="language-javascript">            box.<span class="hljs-property">classList</span>.<span class="hljs-title function_">contains</span>(<span class="hljs-string">&#x27;aaa&#x27;</span>)</span><br><span class="language-javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-4-3-操作表单元素属性"><a href="#2-4-3-操作表单元素属性" class="headerlink" title="2.4.3 操作表单元素属性"></a>2.4.3 操作表单元素属性</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;请输入&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">disabled</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;agree&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 1. 获取元素</span></span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> input = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;input&#x27;</span>)</span><br><span class="language-javascript">        <span class="hljs-comment">// 2. 取值或者设置值 得到input里面的值可以用 value</span></span><br><span class="language-javascript">        <span class="hljs-comment">// console.log(input.value)</span></span><br><span class="language-javascript">        input.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;小米手机&#x27;</span></span><br><span class="language-javascript">        input.<span class="hljs-property">type</span> = <span class="hljs-string">&#x27;password&#x27;</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 2. 启用按钮</span></span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>)</span><br><span class="language-javascript">        <span class="hljs-comment">// disabled 不可用 = false 这样可以让按钮启用</span></span><br><span class="language-javascript">        btn.<span class="hljs-property">disabled</span> = <span class="hljs-literal">false</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 3. 勾选复选框</span></span><br><span class="language-javascript">        <span class="hljs-keyword">let</span> checkbox = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.agree&#x27;</span>)</span><br><span class="language-javascript">        checkbox.<span class="hljs-property">checked</span> = <span class="hljs-literal">false</span></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-4-4-自定义属性"><a href="#2-4-4-自定义属性" class="headerlink" title="2.4.4 自定义属性"></a>2.4.4 自定义属性</h3><blockquote><p>HTML5 专有的 data- 自定义属性</p><p>在DOM对象上一律以 dataset 对象方式获取</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">data-id</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span> 自定义属性 <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">// 1. 获取元素</span></span><br><span class="language-javascript">            <span class="hljs-keyword">let</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;div&#x27;</span>)</span><br><span class="language-javascript">            <span class="hljs-comment">// 2. 获取自定义属性值</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(div.<span class="hljs-property">dataset</span>.<span class="hljs-property">id</span>)</span><br><span class="language-javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-5-间歇函数"><a href="#2-5-间歇函数" class="headerlink" title="2.5 间歇函数"></a>2.5 间歇函数</h2><p> <code>setInterval</code> 是 JavaScript 中内置的函数，它的作用是间隔固定的时间自动重复执行另一个 函数，也叫定时器函数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 1. 定义一个普通函数</span></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">repeat</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;不知疲倦的执行下去....&#x27;</span>)</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-comment">// 2. 使用 setInterval 调用 repeat 函数</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 间隔 1000 毫秒，重复调用 repeat</span></span><br><span class="language-javascript">    <span class="hljs-built_in">setInterval</span>(repeat, <span class="hljs-number">1000</span>)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-6-事件"><a href="#2-6-事件" class="headerlink" title="2.6 事件"></a>2.6 事件</h2><p>事件是用来描述程序的行为或状态的，一旦行为或状态发生改变， 便立即调用一个函数</p><h3 id="2-6-1-事件监听"><a href="#2-6-1-事件监听" class="headerlink" title="2.6.1 事件监听"></a>2.6.1 事件监听</h3><p><code>addEventListener</code> 是 DOM 对象专门用来添加事件监听的方法，它的两个参数分别为【事件类型】和【事件回调】</p><p>完成事件监听的三个步骤：</p><ol><li>获取 DOM 元素 </li><li>通过 addEventListener 方法为 DOM 节点添加事件监听</li><li>等待事件触发，如用户点击了某个按钮时便会触发 click 事件类型</li><li>事件触发后，相对应的回调函数会被执行</li></ol><h3 id="2-6-2-事件类型"><a href="#2-6-2-事件类型" class="headerlink" title="2.6.2 事件类型"></a>2.6.2 事件类型</h3><p><code>click</code></p><p><code>dblclick</code></p><h3 id="2-6-3-事件处理程序"><a href="#2-6-3-事件处理程序" class="headerlink" title="2.6.3 事件处理程序"></a>2.6.3 事件处理程序</h3><p>事件处理程序决定了事件触发后应该执行的逻辑</p><h2 id="2-7-事件类型"><a href="#2-7-事件类型" class="headerlink" title="2.7 事件类型"></a>2.7 事件类型</h2><h3 id="2-7-1-鼠标事件"><a href="#2-7-1-鼠标事件" class="headerlink" title="2.7.1 鼠标事件"></a>2.7.1 鼠标事件</h3><p>鼠标事件是指跟鼠标操作相关的事件，如单击、双击、移动等</p><p><code>mouseenter</code></p><p><code>mouseleave</code></p><h3 id="2-7-2-键盘事件"><a href="#2-7-2-键盘事件" class="headerlink" title="2.7.2 键盘事件"></a>2.7.2 键盘事件</h3><p><code>keydown</code></p><p><code>keyup</code></p><h3 id="2-7-3-焦点事件"><a href="#2-7-3-焦点事件" class="headerlink" title="2.7.3 焦点事件"></a>2.7.3 焦点事件</h3><p><code>focus</code></p><p><code>blur</code></p><h3 id="2-7-4-文本框输入事件"><a href="#2-7-4-文本框输入事件" class="headerlink" title="2.7.4 文本框输入事件"></a>2.7.4 文本框输入事件</h3><p><code>input</code></p><h2 id="2-8-事件对象"><a href="#2-8-事件对象" class="headerlink" title="2.8 事件对象"></a>2.8 事件对象</h2><p>任意事件类型被触发时与事件相关的信息会被以对象的形式记录下来，我们称这个对象为事件对象</p><p>事件回调函数的【第1个参数】即所谓的事件对象，通常习惯性的将这个对象命名为 event 、 ev 、 e</p><p>ev.type 当前事件的类型</p><p>ev.clientX&#x2F;Y 光标相对浏览器窗口的位置</p><p>ev.offsetX&#x2F;Y 光标相于当前 DOM 元素的位置</p><p>在事件回调函数内部通过 window.event 同样可以获取事件对象</p><h2 id="2-9-环境对象"><a href="#2-9-环境对象" class="headerlink" title="2.9 环境对象"></a>2.9 环境对象</h2><p>环境对象指的是函数内部特殊的变量 this ，它代表着当前函数运行时所处的环境</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 声明函数</span></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// this 是一个变量</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-comment">// 声明一个对象</span></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> user = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">sayHi</span>: sayHi <span class="hljs-comment">// 此处把 sayHi 函数，赋值给 sayHi 属性</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> person = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;李四&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">sayHi</span>: sayHi</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-comment">// 直接调用</span></span><br><span class="language-javascript">    <span class="hljs-title function_">sayHi</span>() <span class="hljs-comment">// window</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">sayHi</span>() <span class="hljs-comment">// window</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 做为对象方法调用</span></span><br><span class="language-javascript">    user.<span class="hljs-title function_">sayHi</span>()<span class="hljs-comment">// user</span></span><br><span class="language-javascript">    person.<span class="hljs-title function_">sayHi</span>()<span class="hljs-comment">// person</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>this 本质上是一个变量，数据类型为对象 </p></li><li><p>函数的调用方式不同 this 变量的值也不同</p></li><li><p>【谁调用 this 就是谁】是判断 this 值的粗略规则 </p></li><li><p>函数直接调用时实际上 window.sayHi() 所以 this 的值为 window</p></li></ul><h2 id="2-10-回调函数"><a href="#2-10-回调函数" class="headerlink" title="2.10 回调函数"></a>2.10 回调函数</h2><p>将函数A作为参数传递给函数B，函数A称为回调函数</p><ul><li><p>回调函数本质还是函数，只不过把它当成参数使用</p></li><li><p>使用匿名函数做为回调函数比较常见</p></li></ul><h2 id="2-11-事件流"><a href="#2-11-事件流" class="headerlink" title="2.11 事件流"></a>2.11 事件流</h2><p>事件流是对事件执行过程的描述</p><p><img src="/2024/09/25/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/JavaScript%E6%95%99%E7%A8%8B/image-20240925201835847.png" alt="image-20240925201835847"></p><p>任意事件被触发时总会经历两个阶段：【捕获阶段】和【冒泡阶段】</p><p>捕获阶段是【从父到子】的传导过程，冒泡阶段是【从子向父】的传导过程</p><h3 id="2-11-1-事件和冒泡"><a href="#2-11-1-事件和冒泡" class="headerlink" title="2.11.1 事件和冒泡"></a>2.11.1 事件和冒泡</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>事件流<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>事件流是事件在执行时的底层机制，主要体现在父子盒子之间事件的执行上。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;outer&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inner&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;child&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 获取嵌套的3个节点</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> outer = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.outer&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> inner = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.inner&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> child = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.child&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">// html 元素添加事件</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;html...&#x27;</span>)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        <span class="hljs-comment">// body 元素添加事件</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;body...&#x27;</span>)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        <span class="hljs-comment">// 外层的盒子添加事件</span></span><br><span class="language-javascript">        outer.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;outer...&#x27;</span>)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        <span class="hljs-comment">// 中间的盒子添加事件</span></span><br><span class="language-javascript">        outer.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;inner...&#x27;</span>)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        <span class="hljs-comment">// 内层的盒子添加事件</span></span><br><span class="language-javascript">        outer.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;child...&#x27;</span>)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当某个元素的事件被触发时，事件总是会先经过其祖先才能到 达当前元素，然后再由当前元素向祖先传递，事件在流动的过程中遇到相</p><p>同的事件便会被触发。</p><p>事件的执行顺序是可控制的，即可以在捕获阶段被执行，也可以在冒泡阶段被执行</p><p>如果事件是在冒泡阶段执行的，我们称为冒泡模式，它会先执行子盒子事件再去执行父盒子 事件，默认是冒泡模式</p><p>如果事件是在捕获阶段执行的，我们称为捕获模式，它会先执行父盒子事件再去执行子盒子 事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>事件流<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>事件流是事件在执行时的底层机制，主要体现在父子盒子之间事件的执行上。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;outer&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inner&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 获取嵌套的3个节点</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> outer = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.outer&#x27;</span>)</span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> inner = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.inner&#x27;</span>)</span><br><span class="language-javascript">        <span class="hljs-comment">// 外层的盒子</span></span><br><span class="language-javascript">        outer.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;outer...&#x27;</span>)</span><br><span class="language-javascript">        &#125;, <span class="hljs-literal">true</span>) <span class="hljs-comment">// true 表示在捕获阶段执行事件</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 中间的盒子</span></span><br><span class="language-javascript">        outer.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;inner...&#x27;</span>)</span><br><span class="language-javascript">        &#125;, <span class="hljs-literal">true</span>)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>addEventListener 第3个参数决定了事件是在捕获阶段触发还是在冒泡阶段触发 </p><p>addEventListener 第3个参数为 true 表示捕获阶段触发， false 表示冒泡阶段触发， 默认值为 false </p><p>事件流只会在父子元素具有相同事件类型时才会产生影响 </p><p>绝大部分场景都采用默认的冒泡模式（其中一个原因是早期 IE 不支持捕获）</p><h3 id="2-11-2-阻止冒泡"><a href="#2-11-2-阻止冒泡" class="headerlink" title="2.11.2 阻止冒泡"></a>2.11.2 阻止冒泡</h3><p>阻止冒泡是指阻断事件的流动，保证事件只在当前元素被执行，而不再去影响到其对应的祖先元素</p><p>事件对象中的 <code>ev.stopPropagation</code> 方法，专门用来阻止事件冒泡</p><blockquote><p>鼠标经过事件：</p><p>mouseover 和 mouseout 会有冒泡效果</p><p>mouseenter 和 mouseleave 没有冒泡效果 (推荐)</p></blockquote><h2 id="2-12-事件委托"><a href="#2-12-事件委托" class="headerlink" title="2.12 事件委托"></a>2.12 事件委托</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 假设页面中有 10000 个 button 元素</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> buttons = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;table button&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt;= buttons.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 为 10000 个 button 元素添加了事件</span></span><br><span class="language-javascript">            buttons.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 省略具体执行逻辑...</span></span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 假设页面中有 10000 个 button 元素</span></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> buttons = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;table button&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-comment">// 假设上述的 10000 个 buttom 元素共同的祖先元素是 table</span></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> parents = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;table&#x27;</span>);</span><br><span class="language-javascript">    parents.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;点击任意子元素都会触发事件...&#x27;</span>);</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>事件对象中的属性 target 或 srcElement 属性表示真正触发事件的元素，它是一个元素类型的节点</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 假设页面中有 10000 个 button 元素</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> buttons = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;table button&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-comment">// 假设上述的 10000 个 buttom 元素共同的祖先元素是 table</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> parents = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;table&#x27;</span>)</span><br><span class="language-javascript">    parents.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">ev</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// console.log(ev.target);</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 只有 button 元素才会真正去执行逻辑</span></span><br><span class="language-javascript">        <span class="hljs-keyword">if</span>(ev.<span class="hljs-property">target</span>.<span class="hljs-property">tagName</span> === <span class="hljs-string">&#x27;BUTTON&#x27;</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 执行的逻辑</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="2-13-其他事件"><a href="#2-13-其他事件" class="headerlink" title="2.13 其他事件"></a>2.13 其他事件</h2><h3 id="2-13-1-页面加载事件"><a href="#2-13-1-页面加载事件" class="headerlink" title="2.13.1 页面加载事件"></a>2.13.1 页面加载事件</h3><p>加载外部资源（如图片、外联CSS和JavaScript等）加载完毕时触发的事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// xxxxx</span><br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="2-13-2-元素滚动事件"><a href="#2-13-2-元素滚动事件" class="headerlink" title="2.13.2 元素滚动事件"></a>2.13.2 元素滚动事件</h3><p>滚动条在滚动的时候持续触发的事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;scroll&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// xxxxx</span><br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="2-13-3-页面尺寸事件"><a href="#2-13-3-页面尺寸事件" class="headerlink" title="2.13.3 页面尺寸事件"></a>2.13.3 页面尺寸事件</h3><p>会在窗口尺寸改变的时候触发事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// xxxxx</span><br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="2-14-元素尺寸与位置"><a href="#2-14-元素尺寸与位置" class="headerlink" title="2.14 元素尺寸与位置"></a>2.14 元素尺寸与位置</h2><p>获取元素自身的宽高</p><p><code>offsetWidth</code></p><p><code>offsetHeight</code></p><p>获取元素的位置</p><p><code>getBoundingClientRect()</code></p><p>**<code>rect.left</code>**：元素的左边距，表示元素左侧到视口左侧的距离</p><p>**<code>rect.top</code>**：元素的上边距，表示元素顶部到视口顶部的距离</p><p>**<code>rect.right</code>**：元素的右边距，表示元素右侧到视口左侧的距离</p><p>**<code>rect.bottom</code>**：元素的下边距，表示元素底部到视口顶部的距离</p><p>**<code>rect.width</code>**：元素的宽度</p><p>**<code>rect.height</code>**：元素的高度</p><h2 id="2-15-日期对象"><a href="#2-15-日期对象" class="headerlink" title="2.15 日期对象"></a>2.15 日期对象</h2><h3 id="2-15-1-实例化"><a href="#2-15-1-实例化" class="headerlink" title="2.15.1 实例化"></a>2.15.1 实例化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> date = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&#x27;2024-09-26&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="2-15-2-方法"><a href="#2-15-2-方法" class="headerlink" title="2.15.2 方法"></a>2.15.2 方法</h3><blockquote><p>getFullYear 获取四位年份</p><p>getMonth 获取月份，取值为 0 ~ 11 </p><p>getDate 获取月份中的每一天，不同月份取值也不相同 </p><p>getDay 获取星期，取值为 0 ~ 6 </p><p>getHours 获取小时，取值为 0 ~ 23 </p><p>getMinutes 获取分钟，取值为 0 ~ 59 </p><p>getSeconds 获取秒，取值为 0 ~ 59</p></blockquote><h3 id="2-15-3-时间戳"><a href="#2-15-3-时间戳" class="headerlink" title="2.15.3 时间戳"></a>2.15.3 时间戳</h3><p>时间戳是指1970年01月01日00时00分00秒起至现在的总秒数或毫秒数，它是一种特殊的计量 时间的方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1. 实例化</span><br><span class="hljs-keyword">const</span> date = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()<br><span class="hljs-comment">// 2. 获取时间戳</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(date.<span class="hljs-title function_">getTime</span>())<br><span class="hljs-comment">// 还有一种获取时间戳的方法</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(+<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>())<br><span class="hljs-comment">// 还有一种获取时间戳的方法</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>())<br></code></pre></td></tr></table></figure><h2 id="2-16-DOM节点"><a href="#2-16-DOM节点" class="headerlink" title="2.16 DOM节点"></a>2.16 DOM节点</h2><h2 id="2-16-1-插入节点"><a href="#2-16-1-插入节点" class="headerlink" title="2.16.1 插入节点"></a>2.16.1 插入节点</h2><blockquote><p>createElement 动态创建任意 DOM 节点 </p><p>cloneNode 复制现有的 DOM 节点，传入参数 true 会复制所有子节点 </p><p>appendChild 在末尾（结束标签前）插入节点</p><p>insertBefore 在父节点中任意子节点之前插入新节点</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;body&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>插入节点<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>在现有 dom 结构基础上插入新的元素节点<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>    &lt;hr&gt;<br>    &lt;!-- 普通盒子 --&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    &lt;!-- 点击按钮向 box 盒子插入节点 --&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>插入节点<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 点击按钮，在网页中插入节点</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">const</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.btn&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">        btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// 1. 获得一个 DOM 元素节点</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">const</span> p = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;p&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">            p.<span class="hljs-property">innerText</span> = <span class="hljs-string">&#x27;创建的新的p标签&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">            p.<span class="hljs-property">className</span> = <span class="hljs-string">&#x27;info&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// 复制原有的 DOM 节点</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-keyword">const</span> p2 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;p&#x27;</span>).<span class="hljs-title function_">cloneNode</span>(<span class="hljs-literal">true</span>)</span></span><br><span class="language-javascript"><span class="language-xml">            p2.<span class="hljs-property">style</span>.<span class="hljs-property">color</span> = <span class="hljs-string">&#x27;red&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// 2. 插入盒子 box 盒子</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.box&#x27;</span>).<span class="hljs-title function_">appendChild</span>(p)</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.box&#x27;</span>).<span class="hljs-title function_">appendChild</span>(p2)</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p><img src="/2024/09/25/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/JavaScript%E6%95%99%E7%A8%8B/image-20240926084654608.png" alt="image-20240926084654608"></p><h3 id="2-16-2-删除节点"><a href="#2-16-2-删除节点" class="headerlink" title="2.16.2 删除节点"></a>2.16.2 删除节点</h3><p>删除现有的 DOM 节点，也需要关注两个因素：首先由父节点删除子节点，其次是要删除哪个子节点</p><blockquote><p>removeChild 删除节点时一定是由父子关系</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 点击按钮删除节点 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>删除节点<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>HTML<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>CSS<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Web APIs<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>)</span><br><span class="language-javascript">        btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 获取 ul 父节点</span></span><br><span class="language-javascript">            <span class="hljs-keyword">let</span> ul = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;ul&#x27;</span>)</span><br><span class="language-javascript">            <span class="hljs-comment">// 待删除的子节点</span></span><br><span class="language-javascript">            <span class="hljs-keyword">let</span> lis = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;li&#x27;</span>)</span><br><span class="language-javascript">            <span class="hljs-comment">// 删除节点</span></span><br><span class="language-javascript">            ul.<span class="hljs-title function_">removeChild</span>(lis[<span class="hljs-number">0</span>])</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-16-3-查找节点"><a href="#2-16-3-查找节点" class="headerlink" title="2.16.3 查找节点"></a>2.16.3 查找节点</h3><ul><li><p>父子关系</p><blockquote><p>childNodes 获取全部的子节点，回车换行会被认为是空白文本节点 </p><p>children 只获取元素类型节点</p><p>parentNode 获取父节点，以相对位置查找节点</p></blockquote></li><li><p>兄弟关系</p></li></ul><blockquote><p>previousSibling 获取前一个节点，以相对位置查找节点，实际应用中非常灵活</p><p>nextSibling 获取后一个节点，以相对位置查找节点，实际应用中非常灵活</p></blockquote><h2 id="2-17-JS组成"><a href="#2-17-JS组成" class="headerlink" title="2.17 JS组成"></a>2.17 JS组成</h2><img src="/2024/09/25/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/JavaScript%E6%95%99%E7%A8%8B/image-20240926102416061.png" alt="image-20240926102416061" style="zoom:50%;"><p>ECMAScript: 规定了js基础语法核心知识</p><p>Web APIs : </p><p>DOM 文档对象模型， 定义了一套操作HTML文档的API </p><p>BOM 浏览器对象模型，定义了一套操作浏览器窗口的API</p><h2 id="2-18-window对象"><a href="#2-18-window对象" class="headerlink" title="2.18 window对象"></a>2.18 window对象</h2><ul><li><p>BOM (Browser Object Model ) 是浏览器对象模型</p><ul><li><p>window对象是一个全局对象，也可以说是JavaScript中的顶级对象 </p></li><li><p>像document、alert()、console.log()这些都是window的属性，基本BOM的属性和方法都是 window的</p></li><li><p>所有通过var定义在全局作用域中的变量、函数都会变成window对象的属性和方法</p></li><li><p>window对象下的属性和方法调用的时候可以省略window</p></li></ul></li></ul><img src="/2024/09/25/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/JavaScript%E6%95%99%E7%A8%8B/image-20240926103043593.png" alt="image-20240926103043593" style="zoom: 67%;"><h2 id="2-19-定时器"><a href="#2-19-定时器" class="headerlink" title="2.19 定时器"></a>2.19 定时器</h2><p>JavaScript 内置的一个用来让代码延迟执行的函数，叫 setTimeout</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">setTimeout</span>(回调函数, 延迟时间)<br></code></pre></td></tr></table></figure><blockquote><p>延迟函数仅执行一次</p><p>延时函数需要等待,所以后面的代码先执行</p><p>返回值是一个正整数，表示定时器的编号</p></blockquote><p>清除延迟函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">clearTimeout</span>(timerId)<br></code></pre></td></tr></table></figure><h2 id="2-20-location对象"><a href="#2-20-location对象" class="headerlink" title="2.20 location对象"></a>2.20 location对象</h2><p>location (地址) 它拆分并保存了 URL 地址的各个组成部分， 它是一个对象</p><img src="/2024/09/25/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/JavaScript%E6%95%99%E7%A8%8B/image-20240926103517141.png" alt="image-20240926103517141" style="zoom:67%;"><h2 id="2-21-navigator对象"><a href="#2-21-navigator对象" class="headerlink" title="2.21 navigator对象"></a>2.21 navigator对象</h2><p>navigator是对象，该对象下记录了浏览器自身的相关信息</p><p>通过 userAgent 检测浏览器的版本及平台</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 检测 userAgent（浏览器信息）</span><br>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> userAgent = navigator.<span class="hljs-property">userAgent</span><br>    <span class="hljs-comment">// 验证是否为Android或iPhone</span><br>    <span class="hljs-keyword">const</span> android = userAgent.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/(Android);?[\s\/]+([\d.]+)?/</span>)<br>    <span class="hljs-keyword">const</span> iphone = userAgent.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/(iPhone\sOS)\s([\d_]+)/</span>)<br>    <span class="hljs-comment">// 如果是Android或iPhone，则跳转至移动站点</span><br>    <span class="hljs-keyword">if</span> (android || iphone) &#123;<br>    location.<span class="hljs-property">href</span> = <span class="hljs-string">&#x27;http://m.itcast.cn&#x27;</span><br>&#125;&#125;)();<br></code></pre></td></tr></table></figure><h2 id="2-22-history对象"><a href="#2-22-history对象" class="headerlink" title="2.22 history对象"></a>2.22 history对象</h2><p>history (历史)是对象，主要管理历史记录， 该对象与浏览器地址栏的操作相对应，如前进、 后退等</p><img src="/2024/09/25/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/JavaScript%E6%95%99%E7%A8%8B/image-20240926103751723.png" alt="image-20240926103751723" style="zoom:80%;"><h2 id="2-23-本地存储"><a href="#2-23-本地存储" class="headerlink" title="2.23 本地存储"></a>2.23 本地存储</h2><p>本地存储：将数据存储在本地浏览器中</p><p>优点：</p><p>1、页面刷新或者关闭不丢失数据，实现数据持久化 </p><p>2、容量较大，sessionStorage和 localStorage 约 5M 左右</p><h3 id="2-23-1-localStorage"><a href="#2-23-1-localStorage" class="headerlink" title="2.23.1 localStorage"></a>2.23.1 localStorage</h3><p>数据可以长期保留在本地浏览器中，刷新页面和关闭页面，数据也不会丢失</p><p>以键值对的形式存储，并且存储的是字符串， 省略了window</p><img src="/2024/09/25/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/JavaScript%E6%95%99%E7%A8%8B/image-20240926104153833.png" alt="image-20240926104153833" style="zoom: 50%;"><h3 id="2-23-2-sessionStorage"><a href="#2-23-2-sessionStorage" class="headerlink" title="2.23.2 sessionStorage"></a>2.23.2 sessionStorage</h3><p>当页面浏览器被关闭时，存储在 sessionStorage 的数据会被清除</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">存储：<span class="hljs-variable language_">sessionStorage</span>.<span class="hljs-title function_">setItem</span>(key,value)<br>获取：<span class="hljs-variable language_">sessionStorage</span>.<span class="hljs-title function_">getItem</span>(key)<br>删除：<span class="hljs-variable language_">sessionStorage</span>.<span class="hljs-title function_">removeItem</span>(key)<br></code></pre></td></tr></table></figure><h3 id="2-23-3-localStorage存储复杂数据类型"><a href="#2-23-3-localStorage存储复杂数据类型" class="headerlink" title="2.23.3 localStorage存储复杂数据类型"></a>2.23.3 localStorage存储复杂数据类型</h3><p>将复杂类型转换为JSON字符串</p><p><code>JSON.stringify(复杂数据类型)</code></p><blockquote><p>JSON字符串： </p><p>​首先是1个字符串 </p><p>​属性名使用双引号引起来，不能单引号 </p><p>​属性值如果是字符串型也必须双引号</p></blockquote><p><code>JSON.parse(JSON字符串)</code></p><h2 id="2-24-正则表达式"><a href="#2-24-正则表达式" class="headerlink" title="2.24 正则表达式"></a>2.24 正则表达式</h2><p>正则表达式（Regular Expression）是一种字符串匹配的模式（规则）</p><h3 id="2-24-1-正则基本使用"><a href="#2-24-1-正则基本使用" class="headerlink" title="2.24.1 正则基本使用"></a>2.24.1 正则基本使用</h3><p>定义规则</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> reg = <span class="hljs-regexp">/表达式/</span><br></code></pre></td></tr></table></figure><ul><li>其中 <code>/ /</code> 是字面量</li><li>正则表达式也是对象</li></ul><p>使用正则</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>    <span class="hljs-comment">// 正则表达式的基本使用</span><br>    <span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;web前端开发&#x27;</span><br>    <span class="hljs-comment">// 1. 定义规则</span><br>    <span class="hljs-keyword">const</span> reg = <span class="hljs-regexp">/web/</span><br>    <span class="hljs-comment">// 2. 使用正则 test()</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(str)) <span class="hljs-comment">// true 如果符合规则匹配上则返回true</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;java开发&#x27;</span>)) <span class="hljs-comment">// false 如果不符合规则匹配上则返回 false</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="2-24-2-元字符"><a href="#2-24-2-元字符" class="headerlink" title="2.24.2 元字符"></a>2.24.2 元字符</h3><p>元字符：是一些具有特殊含义的字符，可以极大提高了灵活性和强大的匹配功能</p><ul><li>边界符</li></ul><p>​正则表达式中的边界符（位置符）用来提示字符所处的位置，主要有两个字符</p><img src="/2024/09/25/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/JavaScript%E6%95%99%E7%A8%8B/image-20240926105645148.png" alt="image-20240926105645148" style="zoom:67%;"><p>​如果 ^ 和 $ 在一起，表示必须是精确匹配</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>    <span class="hljs-comment">// 元字符之边界符</span><br>    <span class="hljs-comment">// 1. 匹配开头的位置 ^</span><br>    <span class="hljs-keyword">const</span> reg = <span class="hljs-regexp">/^web/</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;web前端&#x27;</span>)) <span class="hljs-comment">// true</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;前端web&#x27;</span>)) <span class="hljs-comment">// false</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;前端web学习&#x27;</span>)) <span class="hljs-comment">// false</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;we&#x27;</span>)) <span class="hljs-comment">// false</span><br>    <span class="hljs-comment">// 2. 匹配结束的位置 $</span><br>    <span class="hljs-keyword">const</span> reg1 = <span class="hljs-regexp">/web$/</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg1.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;web前端&#x27;</span>)) <span class="hljs-comment">// false</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg1.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;前端web&#x27;</span>)) <span class="hljs-comment">// true</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg1.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;前端web学习&#x27;</span>)) <span class="hljs-comment">// false</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg1.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;we&#x27;</span>)) <span class="hljs-comment">// false</span><br>    <span class="hljs-comment">// 3. 精确匹配 ^ $</span><br>    <span class="hljs-keyword">const</span> reg2 = <span class="hljs-regexp">/^web$/</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg2.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;web前端&#x27;</span>)) <span class="hljs-comment">// false</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg2.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;前端web&#x27;</span>)) <span class="hljs-comment">// false</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg2.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;前端web学习&#x27;</span>)) <span class="hljs-comment">// false</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg2.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;we&#x27;</span>)) <span class="hljs-comment">// false</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg2.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;web&#x27;</span>)) <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg2.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;webweb&#x27;</span>)) <span class="hljs-comment">// flase</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><ul><li>量词</li></ul><p>​量词用来设定某个模式重复次数</p><p>​逗号左右两侧千万不要出现空格</p><p>​<img src="/2024/09/25/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/JavaScript%E6%95%99%E7%A8%8B/image-20240926105803531.png" alt="image-20240926105803531" style="zoom:67%;"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>    <span class="hljs-comment">// 元字符之量词</span><br>    <span class="hljs-comment">// 1. * 重复次数 &gt;= 0 次</span><br>    <span class="hljs-keyword">const</span> reg1 = <span class="hljs-regexp">/^w*$/</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg1.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;&#x27;</span>)) <span class="hljs-comment">// true</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg1.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;w&#x27;</span>)) <span class="hljs-comment">// true</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg1.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;ww&#x27;</span>)) <span class="hljs-comment">// true</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;-----------------------&#x27;</span>)<br><br>    <span class="hljs-comment">// 2. + 重复次数 &gt;= 1 次</span><br>    <span class="hljs-keyword">const</span> reg2 = <span class="hljs-regexp">/^w+$/</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg2.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;&#x27;</span>)) <span class="hljs-comment">// false</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg2.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;w&#x27;</span>)) <span class="hljs-comment">// true</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg2.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;ww&#x27;</span>)) <span class="hljs-comment">// true</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;-----------------------&#x27;</span>)<br><br>    <span class="hljs-comment">// 3. ? 重复次数 0 || 1</span><br>    <span class="hljs-keyword">const</span> reg3 = <span class="hljs-regexp">/^w?$/</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg3.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;&#x27;</span>)) <span class="hljs-comment">// true</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg3.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;w&#x27;</span>)) <span class="hljs-comment">// true</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg3.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;ww&#x27;</span>)) <span class="hljs-comment">// false</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;-----------------------&#x27;</span>)<br><br>    <span class="hljs-comment">// 4. &#123;n&#125; 重复 n 次</span><br>    <span class="hljs-keyword">const</span> reg4 = <span class="hljs-regexp">/^w&#123;3&#125;$/</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg4.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;&#x27;</span>)) <span class="hljs-comment">// false</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg4.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;w&#x27;</span>)) <span class="hljs-comment">// flase</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg4.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;ww&#x27;</span>)) <span class="hljs-comment">// false</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg4.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;www&#x27;</span>)) <span class="hljs-comment">// true</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg4.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;wwww&#x27;</span>)) <span class="hljs-comment">// false</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;-----------------------&#x27;</span>)<br><br>    <span class="hljs-comment">// 5. &#123;n,&#125; 重复次数 &gt;= n</span><br>    <span class="hljs-keyword">const</span> reg5 = <span class="hljs-regexp">/^w&#123;2,&#125;$/</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg5.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;&#x27;</span>)) <span class="hljs-comment">// false</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg5.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;w&#x27;</span>)) <span class="hljs-comment">// false</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg5.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;ww&#x27;</span>)) <span class="hljs-comment">// true</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg5.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;www&#x27;</span>)) <span class="hljs-comment">// true</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;-----------------------&#x27;</span>)<br><br>    <span class="hljs-comment">// 6. &#123;n,m&#125; n =&lt; 重复次数 &lt;= m</span><br>    <span class="hljs-keyword">const</span> reg6 = <span class="hljs-regexp">/^w&#123;2,4&#125;$/</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg6.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;w&#x27;</span>)) <span class="hljs-comment">// false</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg6.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;ww&#x27;</span>)) <span class="hljs-comment">// true</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg6.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;www&#x27;</span>)) <span class="hljs-comment">// true</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg6.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;wwww&#x27;</span>)) <span class="hljs-comment">// true</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg6.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;wwwww&#x27;</span>)) <span class="hljs-comment">// false</span><br><br>    <span class="hljs-comment">// 7. 注意事项： 逗号两侧千万不要加空格否则会匹配失败</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><ul><li>范围</li></ul><p>​表示字符的范围，定义的规则限定在某个范围，比如只能是英文字母，或者数字等等，用表示范围</p><img src="/2024/09/25/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/JavaScript%E6%95%99%E7%A8%8B/image-20240926110035740.png" alt="image-20240926110035740" style="zoom: 67%;"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>    <span class="hljs-comment">// 元字符之范围 []</span><br>    <span class="hljs-comment">// 1. [abc] 匹配包含的单个字符， 多选1</span><br>    <span class="hljs-keyword">const</span> reg1 = <span class="hljs-regexp">/^[abc]$/</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg1.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;a&#x27;</span>)) <span class="hljs-comment">// true</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg1.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;b&#x27;</span>)) <span class="hljs-comment">// true</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg1.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;c&#x27;</span>)) <span class="hljs-comment">// true</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg1.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;d&#x27;</span>)) <span class="hljs-comment">// false</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg1.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;ab&#x27;</span>)) <span class="hljs-comment">// false</span><br>    <br>    <span class="hljs-comment">// 2. [a-z] 连字符 单个</span><br>    <span class="hljs-keyword">const</span> reg2 = <span class="hljs-regexp">/^[a-z]$/</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg2.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;a&#x27;</span>)) <span class="hljs-comment">// true</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg2.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;p&#x27;</span>)) <span class="hljs-comment">// true</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg2.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;0&#x27;</span>)) <span class="hljs-comment">// false</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg2.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;A&#x27;</span>)) <span class="hljs-comment">// false</span><br>    <br>    <span class="hljs-comment">// 想要包含小写字母，大写字母 ，数字</span><br>    <span class="hljs-keyword">const</span> reg3 = <span class="hljs-regexp">/^[a-zA-Z0-9]$/</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg3.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;B&#x27;</span>)) <span class="hljs-comment">// true</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg3.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;b&#x27;</span>)) <span class="hljs-comment">// true</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg3.<span class="hljs-title function_">test</span>(<span class="hljs-number">9</span>)) <span class="hljs-comment">// true</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg3.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;,&#x27;</span>)) <span class="hljs-comment">// flase</span><br>    <br>    <span class="hljs-comment">// 用户名可以输入英文字母，数字，可以加下划线，要求 6~16位</span><br>    <span class="hljs-keyword">const</span> reg4 = <span class="hljs-regexp">/^[a-zA-Z0-9_]&#123;6,16&#125;$/</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg4.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;abcd1&#x27;</span>)) <span class="hljs-comment">// false</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg4.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;abcd12&#x27;</span>)) <span class="hljs-comment">// true</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg4.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;ABcd12&#x27;</span>)) <span class="hljs-comment">// true</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg4.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;ABcd12_&#x27;</span>)) <span class="hljs-comment">// true</span><br>    <br>    <span class="hljs-comment">// 3. [^a-z] 取反符</span><br>    <span class="hljs-keyword">const</span> reg5 = <span class="hljs-regexp">/^[^a-z]$/</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg5.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;a&#x27;</span>)) <span class="hljs-comment">// false</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg5.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;A&#x27;</span>)) <span class="hljs-comment">// true</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg5.<span class="hljs-title function_">test</span>(<span class="hljs-number">8</span>)) <span class="hljs-comment">// true</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><ul><li>字符类</li></ul><p>​某些常见模式的简写方式，区分字母和数字</p><img src="/2024/09/25/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/JavaScript%E6%95%99%E7%A8%8B/image-20240926110404204.png" alt="image-20240926110404204" style="zoom:80%;"><h2 id="2-25-替换和修饰符"><a href="#2-25-替换和修饰符" class="headerlink" title="2.25 替换和修饰符"></a>2.25 替换和修饰符</h2><p>replace 替换方法，可以完成字符的替换</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">字符串.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/正则表达式/</span>,<span class="hljs-string">&#x27;替换的文本&#x27;</span>)<br></code></pre></td></tr></table></figure><p>修饰符约束正则执行的某些细节行为，如是否区分大小写、是否支持多行匹配等</p><ul><li>i 是单词 ignore 的缩写，正则匹配时字母不区分大小写 、</li><li>g 是单词 global 的缩写，匹配所有满足正则表达式的结果</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>    <span class="hljs-comment">// 替换和修饰符</span><br>    <span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;欢迎大家学习前端，相信大家一定能学好前端，都成为前端大神&#x27;</span><br>    <span class="hljs-comment">// 1. 替换 replace 需求：把前端替换为 web</span><br>    <span class="hljs-comment">// 1.1 replace 返回值是替换完毕的字符串</span><br>    <span class="hljs-comment">// const strEnd = str.replace(/前端/, &#x27;web&#x27;) 只能替换一个</span><br>    <span class="hljs-comment">// 2. 修饰符 g 全部替换</span><br>    <span class="hljs-keyword">const</span> strEnd = str.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/前端/g</span>, <span class="hljs-string">&#x27;web&#x27;</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(strEnd)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="2-26-正则插件"><a href="#2-26-正则插件" class="headerlink" title="2.26 正则插件"></a>2.26 正则插件</h2><img src="/2024/09/25/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/JavaScript%E6%95%99%E7%A8%8B/image-20240926111239876.png" alt="image-20240926111239876" style="zoom: 67%;"><h2 id="2-27-change事件"><a href="#2-27-change事件" class="headerlink" title="2.27 change事件"></a>2.27 change事件</h2><p>给input注册 change 事件，值被修改并且失去焦点后触发</p><ul><li>JavaScript诞生于1995年，主要用于处理网页中的前端验证，即检查用户输入的内容是否符合一定的规则</li><li>由Netscape 和 SUN公司研发</li><li>ECMAScript是JS的标准，简称ES  </li><li>一个完整的JavaScript组成：</li></ul><p><img src="/2024/09/25/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/JavaScript%E6%95%99%E7%A8%8B/1726995898016-f2282a19-a42e-417a-a4d6-23423100b032.png"></p><ul><li>JS特点<ul><li>解释性语言  </li><li>动态语言</li><li>基于原型的面向对象</li></ul></li></ul><h1 id="Upk61">二、JS的HelloWorld</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;helloworld&quot;</span>)<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;你好~&quot;</span>)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;这是一行代码&quot;</span>);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h1 id="Px1rJ">三、JS编写位置</h1><ol><li>写在<code>button</code>按钮的<code>onclick</code>属性里面，点击按钮，执行JS代码</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;button onclick=<span class="hljs-string">&quot;console.log(&#x27;点击按钮&#x27;)&quot;</span>&gt;点击按钮&lt;/button&gt;<br></code></pre></td></tr></table></figure><ol start="2"><li>写在超链接的href属性中，点击超链接，执行JS代码（不推荐使用）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;a href=<span class="hljs-string">&quot;javascript:alert(&#x27;让你点你就点！&#x27;);&quot;</span>&gt;你也点我一下&lt;/a&gt;<br>&lt;!-- 没有javascript限定符，点击超链接会显示一串英文 --&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:;&quot;</span>&gt;</span>你也点我一下<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br>&lt;!-- 点击没有任何反应，只是用于<span class="hljs-variable constant_">JS</span>处理一些功能 --&gt;<br></code></pre></td></tr></table></figure><ol start="3"><li>写在<code>script</code>标签里面</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;写在script标签里面的JS代码&quot;</span>);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><ol start="4"><li>写在外部的JS文件中，通过<code>script</code>标签引入（推荐使用）</li></ol><p>此时不能在标签内部写代码，即使编写，浏览器也会忽略</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script src=<span class="hljs-string">&quot;./js/script.js&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><h1 id="TMcoc">ES6+</h1><p>DOM树一共有12种节点类型，常用的有4种：</p><p>1、Document类型（document节点）——DOM的“入口点”</p><p>2、Element节点（元素节点）——HTML标签，树构建块</p><p>3、Text类型（文本节点）——包含文本</p><p>4、Comment类型（注释节点）——有时我们可以将一些信息放入其中，它不会显示，但JS可以从DOM中读取它。</p><h1 id="CJMMg">JS Tips</h1><h2 id="kC9x0">DocumentFragment加快DOM渲染速度</h2><p><code>DocumentFragment</code></p><p><strong>概念：</strong>文档片段接口，表示一个没有父对象的最小文档对象</p><p>它被作为一个轻量版的 Document 使用，就像标准的 document 一样，存储由节点（nodes）组成的文档结</p><p>构。与 document 相比，最大的区别是它不是真实 DOM 树的一部分，它的变化不会触发 DOM 树的重新渲</p><p>染，且不会对性能产生影响。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;ul id=&quot;list&quot;&gt;<br>        &lt;li&gt;第一项&lt;/li&gt;<br>        &lt;li&gt;第二项&lt;/li&gt;<br>        &lt;li&gt;第三项&lt;/li&gt;<br>    &lt;/ul&gt;<br>    &lt;script&gt;<br>        console.time(&#x27;执行一万次需要用的时间&#x27;)<br>        let list = document.getElementById(&#x27;list&#x27;);<br>        for(let i = 0; i &lt; 10000; i++) &#123;<br>            let tempLi = document.createElement(&#x27;li&#x27;);<br>            tempLi.innerHTML = i;<br>            list.append(tempLi);<br>        &#125;<br>        //执行一万次需要用的时间: 12.816162109375 ms<br>        console.timeEnd(&#x27;执行一万次需要用的时间&#x27;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;ul id=&quot;list&quot;&gt;<br>        &lt;li&gt;第一项&lt;/li&gt;<br>        &lt;li&gt;第二项&lt;/li&gt;<br>        &lt;li&gt;第三项&lt;/li&gt;<br>    &lt;/ul&gt;<br>    &lt;script&gt;<br>        let list = document.getElementById(&#x27;list&#x27;);<br>        let df = document.createDocumentFragment();<br>        for(let i = 0; i &lt; 10000; i++) &#123;<br>            let tempLi = document.createElement(&#x27;li&#x27;);<br>            tempLi.innerHTML = i;<br>            df.append(tempLi);<br>        &#125;<br>        console.time(&#x27;执行一万次需要用的时间&#x27;)<br>        list.append(df);<br>        //执行一万次需要用的时间: 2.6708984375 ms<br>        console.timeEnd(&#x27;执行一万次需要用的时间&#x27;)<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h2 id="lSQQd">JS计算程序运行时间</h2><p><strong>方法一</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">time</span>(<span class="hljs-string">&#x27;执行一万次需要用的时间&#x27;</span>)<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10000</span>;i++)&#123;<br><br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">timeEnd</span>(<span class="hljs-string">&#x27;执行一万次需要用的时间&#x27;</span>)<span class="hljs-comment">//执行一万次需要用的时间: 0.523193359375 ms</span><br></code></pre></td></tr></table></figure><p><strong><font style="color:rgb(77,77,77);">JSON和XML之间的区别：</font></strong></p><p><font style="color:rgb(77,77,77);"> 1、JSON是JavaScript Object Notation；XML是可扩展标记语言。 </font></p><p><font style="color:rgb(77,77,77);"> 2、JSON是基于JavaScript语言；XML源自SGML。 </font></p><p><font style="color:rgb(77,77,77);"> 3、JSON是一种表示对象的方式；XML是一种标记语言，使用标记结构来表示数据项。 </font></p><p><font style="color:rgb(77,77,77);"> 4、JSON不提供对命名空间的任何支持；XML支持名称空间。 </font></p><p><font style="color:rgb(77,77,77);"> 5、JSON支持数组；XML不支持数组。 </font></p><p><font style="color:rgb(77,77,77);"> 6、XML的文件相对难以阅读和解释；与XML相比，JSON的文件非常易于阅读。 </font></p><p><font style="color:rgb(77,77,77);"> 7、JSON不使用结束标记；XML有开始和结束标签。 </font></p><p><font style="color:rgb(77,77,77);"> 8、JSON的安全性较低；XML比JSON更安全。 </font></p><p><font style="color:rgb(77,77,77);"> 9、JSON不支持注释；XML支持注释。 </font></p><p><font style="color:rgb(77,77,77);"> 10、JSON仅支持UTF-8编码；XML支持各种编码。</font></p><p><font style="color:rgb(77,77,77);"></font></p><p><font style="color:rgb(34, 34, 34);background-color:rgb(248, 248, 248);">Domtree的根节点是document</font></p><p><font style="color:rgb(34, 34, 34);background-color:rgb(248, 248, 248);"></font></p><p><a href="https://gw-c.nowcoder.com/api/sparta/jump/link?link=https://www.cnblogs.com/cangqinglang/p/8963557.html"><font style="color:rgb(34, 34, 34);background-color:rgb(248, 248, 248);">https://www.cnblogs.com/cangqinglang/p/8963557.html</font></a></p><p><font style="color:rgb(34, 34, 34);background-color:rgb(248, 248, 248);"></font></p><p><font style="color:rgb(51, 51, 51);background-color:rgb(248, 248, 248);">如果文档包含框架（<frame> 或 <iframe> 标签），浏览器会为 HTML 文档创建一个 window 对象，并为每个框架创建一个额外的 window 对象</iframe></font></p>]]></content>
    
    
    <categories>
      
      <category>前端入门</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo搭建个人博客教程</title>
    <link href="/2024/09/24/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/"/>
    <url>/2024/09/24/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<!-- more --><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><table><thead><tr><th align="left">环境名称</th><th align="left">环境版本</th><th align="left">命令</th><th>官网</th></tr></thead><tbody><tr><td align="left">Git</td><td align="left"><code>2.42.0</code></td><td align="left"><code>git --version</code></td><td><a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a></td></tr><tr><td align="left">Node.js</td><td align="left"><code>18.18.0</code></td><td align="left"><code>node -v</code></td><td><a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a></td></tr></tbody></table><h2 id="安装Hexo框架"><a href="#安装Hexo框架" class="headerlink" title="安装Hexo框架"></a>安装Hexo框架</h2><ul><li>安装 <code>cnpm</code> 工具</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g cnpm --registry==https://registry.npm.taobao.org<br></code></pre></td></tr></table></figure><ul><li>安装 <code>Hexo</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cnpm install -g hexo-cli<br></code></pre></td></tr></table></figure><ul><li>查看 <code>Hexo</code> 版本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo -v<br></code></pre></td></tr></table></figure><h2 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h2><ol><li><p>创建存放 <code>Hexo</code> 项目的文件夹，在文件夹内右键选择 <code>Open Git Bash here</code></p></li><li><p>输入命令 <code>hexo init</code>，进行项目初始化</p><p><img src="/2024/09/24/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/image-20240924153541810.png" alt="image-20240924153541810"></p></li><li><p>输入命令 <code>hexo s</code> 开启本地预览服务，打开浏览器访问 <code>http://localhost:4000</code> 即可看到博客内容</p></li><li><p>更换主题</p><ol><li><p>官方网址： <a href="https://hexo.io/themes/">Themes | Hexo</a></p></li><li><p>选择一款自己喜欢的主题，点击链接跳转至 <code>github</code> 页面</p><p><img src="/2024/09/24/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/image-20240924170106568.png" alt="image-20240924170106568"></p></li><li><p>复制主题的http链接和主题名</p><p><img src="/2024/09/24/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/image-20240924170143311.png" alt="image-20240924170143311"></p></li><li><p>在项目文件夹下的 <code>git</code> 窗口中</p><p>执行命令 <code>git clone https://github.com/fluid-dev/hexo-theme-fluid.git themes/fluid</code>  </p><p><img src="/2024/09/24/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/image-20240924170229541.png" alt="image-20240924170229541"></p></li><li><p>修改 <code>_config.yml</code> 文件</p><p><img src="/2024/09/24/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/image-20240924170254639.png" alt="image-20240924170254639"></p></li><li><p>预览效果</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">hexo</span> <span class="hljs-selector-tag">clean</span> <span class="hljs-comment">//执行此命令后继续下一条</span><br><span class="hljs-selector-tag">hexo</span> <span class="hljs-selector-tag">g</span> <span class="hljs-comment">//生成博客目录</span><br><span class="hljs-selector-tag">hexo</span> <span class="hljs-selector-tag">s</span> <span class="hljs-comment">//本地预览</span><br></code></pre></td></tr></table></figure><blockquote><p>配置指南：<a href="https://hexo.fluid-dev.com/docs/guide/">配置指南 | Hexo Fluid 用户手册 (fluid-dev.com)</a></p></blockquote></li></ol></li></ol><h2 id="部署至Github-Page"><a href="#部署至Github-Page" class="headerlink" title="部署至Github Page"></a>部署至Github Page</h2><p>默认已有 <code>Github</code> 账号</p><ol><li><p>使用 <code>git</code> 设置 <code>github</code> 的用户名和邮箱</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;GitHub 用户名&quot;</span><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;GitHub 邮箱&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>创建添加密钥，一路回车</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C <span class="hljs-string">&quot;GitHub 邮箱&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>复制 <code>id_rsa.pub</code> 文件中的内容</p><img src="/2024/09/24/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/image-20240925093411581.png" alt="image-20240925093411581" style="zoom: 67%;"></li><li><p>在 <code>Github</code> 中创建SSH Key</p><p><img src="/2024/09/24/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/image-20240925100731665.png" alt="image-20240925100731665"></p></li><li><p>验证是否成功 <code>ssh -T git@github.com</code></p><img src="/2024/09/24/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/image-20240925110035432.png" alt="image-20240925110035432" style="zoom: 80%;"></li><li><p>安装部署工具 <code>npm install hexo-deployer-git --save</code></p></li><li><p>在 <code>Github</code> 上创建一个仓库，命名格式：<code>用户名.github.io</code></p><img src="/2024/09/24/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/image-20240925110449357.png" alt="image-20240925110449357" style="zoom:67%;"></li><li><p>修改 <code>_config.yml</code> 文件</p><img src="/2024/09/24/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/image-20240925110154243.png" alt="image-20240925110154243" style="zoom:80%;"></li><li><p>在git中执行命令 <code>hexo d</code></p></li><li><p>在浏览器输入网址：<code>用户名.github.io</code> ，即可自动补全https</p></li></ol><blockquote><p>在后续更新博客，想要部署上线时，执行 <code>hexo d -g</code> 命令，重新编译项目</p></blockquote><h2 id="进阶玩法"><a href="#进阶玩法" class="headerlink" title="进阶玩法"></a>进阶玩法</h2><h3 id="网页访问统计"><a href="#网页访问统计" class="headerlink" title="网页访问统计"></a>网页访问统计</h3><p>打开 <a href="https://tongji.baidu.com/sc-web/10000033910/home/site/getjs?siteId=13751376">https://tongji.baidu.com/sc-web/10000033910/home/site/getjs?siteId=13751376</a></p><p>在网站列表页新增网站</p><p><img src="/2024/09/24/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/image-20240924191809599.png" alt="image-20240924191809599"></p><p>在代码获取页复制百度的 <code>ID</code></p><p><img src="/2024/09/24/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/image-20240924191939530.png" alt="image-20240924191939530"></p><p>添加到 <code>_config.yml</code> 中</p><p><img src="/2024/09/24/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/image-20240924192025066.png" alt="image-20240924192025066"></p><p>安装插件，检查百度是否成功检测自己的网站</p><p>​网址：<a href="https://chromewebstore.google.com/detail/library-sniffer/fhhdlnnepfjhlhilgmeepgkhjmhhhjkh">https://chromewebstore.google.com/detail/library-sniffer/fhhdlnnepfjhlhilgmeepgkhjmhhhjkh</a></p><p><img src="/2024/09/24/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/image-20240924192207520.png" alt="image-20240924192207520"></p><h3 id="UV、PV统计"><a href="#UV、PV统计" class="headerlink" title="UV、PV统计"></a>UV、PV统计</h3><blockquote><p>使用不蒜子进行统计，不需要申请账号，直接开启即可</p><p><a href="https://busuanzi.ibruce.info/">不蒜子 - 极简网页计数器 (ibruce.info)</a></p></blockquote><p>引入不蒜子</p><p><code>header.ejs</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">async</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>添加标签</p><p><code>footer.ejs</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;busuanzi_container_site_pv&quot;</span>&gt;</span><br>本站总访问量<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;busuanzi_value_site_pv&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>次<br><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;busuanzi_container_site_uv&quot;</span>&gt;</span><br>本站访客数<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;busuanzi_value_site_uv&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>人次<br><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="优化建议"><a href="#优化建议" class="headerlink" title="优化建议"></a>优化建议</h1><h2 id="修改文章模板"><a href="#修改文章模板" class="headerlink" title="修改文章模板"></a>修改文章模板</h2><p>文章的默认模板位置在此处：</p><p><img src="/2024/09/24/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/image-20240924151722109.png" alt="image-20240924151722109"></p><p>文章的默认模板是：</p><p><img src="/2024/09/24/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/image-20240924151835509.png" alt="image-20240924151835509"></p><p>我的模板：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-string">title:&#123;&#123;</span> <span class="hljs-string">title</span> <span class="hljs-string">&#125;&#125;</span><br><span class="hljs-string">date:&#123;&#123;</span> <span class="hljs-string">date</span> <span class="hljs-string">&#125;&#125;</span><br><span class="hljs-string">tags:[]</span><br><span class="hljs-string">categories:环境搭建</span><br><span class="hljs-string">index_img:/img/default.jpg</span><br><span class="hljs-string">banner_img:/img/default.jpg</span><br><span class="hljs-string">excerpt:这是摘要</span><br><span class="hljs-string">hide:false</span><br><span class="hljs-string">archive:false</span><br><span class="hljs-string">sticky:0</span><br><span class="hljs-attr">description:</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">&lt;!--more--&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>冒号后面不能有空格！！！</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>环境搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>个人博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML教程</title>
    <link href="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/"/>
    <url>/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>致谢 尚硅谷、MDN、掘金、Google 等平台</p><p>本篇笔记综合以上平台相关内容，结合自己理解写成！</p><p>整理时间：🍅🍅🍅🍅🍅🍅🍅</p><h1 id="一、前置知识"><a href="#一、前置知识" class="headerlink" title="一、前置知识"></a>一、前置知识</h1><h2 id="1-1-计算机先驱者"><a href="#1-1-计算机先驱者" class="headerlink" title="1.1 计算机先驱者"></a>1.1 计算机先驱者</h2><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/1715591509858-81f97fca-b709-41d5-b3ea-2cefc364c870.png" alt="1715591509858-81f97fca-b709-41d5-b3ea-2cefc364c870" style="zoom: 33%;"><blockquote><p>二战时期破译德军的战争编码：英格玛</p><p>让二战提前2年结束，拯救了上千万人的生命</p><p>设立图灵奖，被后人誉为：”人工智能之父”</p></blockquote><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/1715591509791-ad621c09-aa52-4312-b11c-daf6e189d302.png" alt="1715591509791-ad621c09-aa52-4312-b11c-daf6e189d302" style="zoom:33%;"><blockquote><p>制定了现代计算机标准：冯诺依曼体系结构</p><p>提出计算机要采用二进制，明确计算机组成部分</p><p>被后人誉为：”现代计算机之父”</p></blockquote><h2 id="1-2-计算机基础知识"><a href="#1-2-计算机基础知识" class="headerlink" title="1.2 计算机基础知识"></a>1.2 计算机基础知识</h2><p><strong>计算机：</strong>俗称电脑，是现代一种用于高速计算的电子计算机器，可以进行数值计算，又可以进行逻辑计算，还具有</p><p>存储记忆功能</p><p><strong>计算机组成：</strong>硬件(物理部件) + 软件(控制指令)</p><p><strong>软件分类：</strong>系统软件(Windows、Linux) + 应用软件(微信、QQ)</p><h2 id="1-3-系统结构"><a href="#1-3-系统结构" class="headerlink" title="1.3 系统结构"></a>1.3 系统结构</h2><p><strong>C&#x2F;S架构：</strong>需要安装、偶尔更新、不跨平台、开发更具针对性</p><p><strong>B&#x2F;S架构：</strong>无需安装、无需更新、可跨平台、开发更具通用性</p><p><strong>名词解释：</strong>C &#x3D;&gt; client（客户端）、B &#x3D;&gt; browser（浏览器）、S &#x3D;&gt; server（服务器）</p><p><strong>前端工程师：</strong>主要负责编写 B&#x2F;S架构中的网页（呈现界面、实现交互）</p><h2 id="1-4-浏览器相关"><a href="#1-4-浏览器相关" class="headerlink" title="1.4 浏览器相关"></a>1.4 浏览器相关</h2><p><strong>浏览器：</strong>是网页运行的平台，常见的有谷歌(Chrome) 、 Edge、 IE 、 火狐(Firefox)等</p><p><strong>浏览器内核：</strong>浏览器最核心的部分，负责对网页语法的解释并渲染网页，常见的有webkit内核、Blink内核、</p><p>Trident内核、Gecko内核等</p><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/image-20240926162701142.png" alt="image-20240926162701142" style="zoom: 50%;"><p><strong>浏览器原理：</strong></p><p>Google开发者团队指导：<a href="https://web.dev/about?hl=zh-cn">https://web.dev/about?hl=zh-cn</a></p><p>Google文档：<a href="https://developer.chrome.com/docs?hl=zh-cn">https://developer.chrome.com/docs?hl=zh-cn</a></p><p>《深入了解现代网络浏览器》</p><p><a href="https://developer.chrome.com/blog/inside-browser-part1">https://developer.chrome.com/blog/inside-browser-part1</a></p><p><a href="https://developer.chrome.com/blog/inside-browser-part2">https://developer.chrome.com/blog/inside-browser-part2</a></p><p><a href="https://developer.chrome.com/blog/inside-browser-part3">https://developer.chrome.com/blog/inside-browser-part3</a></p><p><a href="https://developer.chrome.com/blog/inside-browser-part4">https://developer.chrome.com/blog/inside-browser-part4</a></p><h2 id="1-5-网页相关"><a href="#1-5-网页相关" class="headerlink" title="1.5 网页相关"></a>1.5 网页相关</h2><p><strong>网址：</strong>我们在浏览器中输入的地址</p><p><strong>网页：</strong>浏览器所呈现的每一个页面</p><p><strong>网站：</strong>多个网页构成了一个网站</p><p><strong>网页标准：</strong>HTML(结构)、CSS(表现)、JavaScript(行为)</p><h2 id="1-6-其他"><a href="#1-6-其他" class="headerlink" title="1.6 其他"></a>1.6 其他</h2><h3 id="1-6-1-⽂件夹、⽂件命名规则"><a href="#1-6-1-⽂件夹、⽂件命名规则" class="headerlink" title="1.6.1 ⽂件夹、⽂件命名规则"></a>1.6.1 ⽂件夹、⽂件命名规则</h3><ul><li>⽂件夹名称 和 ⽂件名称 使⽤⼩写，⽤ 短横线 来分隔</li><li>⽆空格、⽆下划线</li></ul><h3 id="1-6-2-代码命名规则"><a href="#1-6-2-代码命名规则" class="headerlink" title="1.6.2 代码命名规则"></a>1.6.2 代码命名规则</h3><p>变量&#x2F;函数 “小驼峰式命名法”</p><p>常量          “全部大写 + 下划线”</p><p>类的私有属性&#x2F;方法 “_小驼峰式命名法”</p><h3 id="1-6-2-网站结构"><a href="#1-6-2-网站结构" class="headerlink" title="1.6.2 网站结构"></a>1.6.2 网站结构</h3><ul><li>index.html主⻚ </li><li>images⽂件夹 </li><li>styles⽂件夹 </li><li>scripts⽂件夹</li></ul><h1 id="二、HTML简介"><a href="#二、HTML简介" class="headerlink" title="二、HTML简介"></a>二、HTML简介</h1><h2 id="2-1-什么是HTML"><a href="#2-1-什么是HTML" class="headerlink" title="2.1 什么是HTML"></a>2.1 什么是HTML</h2><p><strong>HTML：</strong>（超文本标记语言 - HyperText Markup Language）</p><ul><li>定义网页内容的含义和结构</li><li>“超⽂本”（hypertext）是指连接单个⽹站内或多个⽹站间的网页链接</li><li>“标记”（markup）来注明⽂本、图片和其他内容</li><li>HTML标签⾥的元素名不区分⼤⼩写</li></ul><p><strong>HTML文件后缀名：</strong><code>.html</code>或<code>.htm</code></p><p>元素间对空格、换行、缩进等形成的空白不敏感，有无空白对在浏览器中加载的效果没有影响</p><p><strong>HTML中的空白折叠现象：</strong> ⽆论你在HTML元素的内容中使⽤多少空格（包括⼀个或多个空⽩字符或换⾏），当渲染这些代</p><p>码的时候，HTML解释器会将连续出现的空⽩字符减少为⼀个单独的空格符  </p><p><strong>和XML的区别</strong></p><p><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/image-20240927215419478.png" alt="image-20240927215419478"></p><h2 id="2-2-相关国际组织"><a href="#2-2-相关国际组织" class="headerlink" title="2.2 相关国际组织"></a>2.2 相关国际组织</h2><p><strong>W3C(万维网联盟)：</strong><a href="https://www.w3.org/">https://www.w3.org/</a></p><h2 id="2-3-HTML发展历史"><a href="#2-3-HTML发展历史" class="headerlink" title="2.3 HTML发展历史"></a>2.3 HTML发展历史</h2><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/image-20240926201109337.png" alt="image-20240926201109337" style="zoom: 50%;"><h2 id="2-4-开发者文档"><a href="#2-4-开发者文档" class="headerlink" title="2.4 开发者文档"></a>2.4 开发者文档</h2><p><strong>W3School：</strong><a href="https://www.w3school.com.cn/">https://www.w3school.com.cn/</a></p><p><strong>MDN：</strong><a href="https://developer.mozilla.org/zh-CN/docs/learn/HTML">https://developer.mozilla.org/zh-CN/docs/learn/HTML</a></p><h2 id="2-5-HTML语法检查"><a href="#2-5-HTML语法检查" class="headerlink" title="2.5 HTML语法检查"></a>2.5 HTML语法检查</h2><p>网站：<a href="https://validator.w3.org/">https://validator.w3.org/</a></p><h2 id="2-6-SEO"><a href="#2-6-SEO" class="headerlink" title="2.6 SEO"></a>2.6 SEO</h2><h3 id="2-6-1-SEO权重标签"><a href="#2-6-1-SEO权重标签" class="headerlink" title="2.6.1 SEO权重标签"></a>2.6.1 SEO权重标签</h3><p>突出网页中关键词或重要主题的HTML标签、语义化清晰的标签</p><h3 id="2-6-2-SEO标签属性"><a href="#2-6-2-SEO标签属性" class="headerlink" title="2.6.2 SEO标签属性"></a>2.6.2 SEO标签属性</h3><p>突出网页中关键词的HTML标签属性，如meta的name属性（keywords、description）,超级链接和图片的title、alt属性</p><h1 id="三、准备工作"><a href="#三、准备工作" class="headerlink" title="三、准备工作"></a>三、准备工作</h1><h2 id="3-1-安装VSCode-代码编辑器"><a href="#3-1-安装VSCode-代码编辑器" class="headerlink" title="3.1 安装VSCode_代码编辑器"></a>3.1 安装VSCode_代码编辑器</h2><p><strong>网址：</strong><a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></p><p><strong>插件：</strong></p><ol><li>Chinese (Simplified) (简体中文) Language Pack</li><li>Live Server</li></ol><p><strong>快捷键：</strong></p><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/image-20240926203541949.png" alt="image-20240926203541949" style="zoom: 50%;"><h2 id="3-2-安装Chrome-浏览器"><a href="#3-2-安装Chrome-浏览器" class="headerlink" title="3.2 安装Chrome_浏览器"></a>3.2 安装Chrome_浏览器</h2><p><strong>网址：</strong><a href="https://www.google.cn/chrome/">https://www.google.cn/chrome/</a></p><h1 id="四、HTML4基础"><a href="#四、HTML4基础" class="headerlink" title="四、HTML4基础"></a>四、HTML4基础</h1><p><code>HTML4.01</code>诞生于1999年</p><h2 id="4-1-第一个Hello-World"><a href="#4-1-第一个Hello-World" class="headerlink" title="4.1 第一个Hello World"></a>4.1 第一个Hello World</h2><p>学一门新的编程语言，最最最开始的第一步就是写一个Hello World</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Hello World<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/1715591509836-a285ca72-95c6-4d2e-a3bd-39d78c346edc.png" alt="1715591509836-a285ca72-95c6-4d2e-a3bd-39d78c346edc"></p><h2 id="4-2-HTML文档声明-DTD"><a href="#4-2-HTML文档声明-DTD" class="headerlink" title="4.2 HTML文档声明 DTD"></a>4.2 HTML文档声明 DTD</h2><p><strong>作用：</strong>告诉浏览器当前网页的版本</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>  //代表HTML5版本解析该网页<br>或<br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">HTML</span>&gt;</span><br>或<br><span class="hljs-meta">&lt;!doctype <span class="hljs-keyword">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>注：</strong>必须在网页的第一行，且在html标签的外侧</p><p><strong>DOCTYPE(⽂档类型) 的作用？</strong></p><p>DOCTYPE是HTML5中一种标准通用标记语言的文档类型声明，它的目的是告诉浏览器（解析器）应该以什么样</p><p>（html或xhtml）的文档类型定义来解析文档，不同的渲染模式会影响浏览器对 CSS 代码甚⾄ JavaScript 脚本的</p><p>解析。它必须声明在HTML⽂档的第⼀⾏。</p><p>浏览器渲染页面的两种模式（可通过document.compatMode获取）</p><ul><li>CSS1Compat：标准模式（Strick mode），默认模式，浏览器使用W3C的标准解析渲染页面。在标准模式中，浏览器以其支持的最高标准呈现页面。</li><li>BackCompat：怪异模式(混杂模式)(Quick mode)，浏览器使用自己的怪异模式解析渲染页面。在怪异模式中，页面以一种比较宽松的向后兼容的方式显示。</li></ul><p><strong>标准模式和怪异模式的区别：</strong></p><ol><li><p>盒模型的差异：</p></li><li><p>标准模式 - W3C盒模型 - 盒子总宽度&#x2F;高度 &#x3D; 内容区宽度&#x2F;高度 + padding + border + margin</p></li><li><p>怪异模式 - IE盒模型 - 盒子总宽度&#x2F;高度 &#x3D; width&#x2F;height + margin</p><p><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/1716948331492-6beb7bf2-0473-4072-b776-90d29f652bf7.png" alt="1716948331492-6beb7bf2-0473-4072-b776-90d29f652bf7"></p></li></ol><h2 id="4-3-HTML基本结构-元信息"><a href="#4-3-HTML基本结构-元信息" class="headerlink" title="4.3 HTML基本结构&#x2F;元信息"></a>4.3 HTML基本结构&#x2F;元信息</h2><p><strong>Quick写法：</strong>vscode中输入 ! 快速生成基本结构</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>标题<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>&lt;html&gt;</code>元素</p><ul><li><p><code>lang</code>属性</p><ul><li>为站点设定语⾔ <code>&lt;html lang=&quot;zh-CN&quot;&gt;</code> &#x2F; <code>&lt;html lang=&quot;en&quot;&gt;</code></li><li>为分段设定语⾔ <code>&lt;p&gt;Japanese example: &lt;span lang=&quot;ja&quot;&gt;ご飯が熱い。&lt;/span&gt;.&lt;/p&gt;</code></li></ul></li><li><p>命名空间xmlns</p></li></ul><p><code>&lt;head&gt;</code>元素</p><ul><li><p><code>&lt;meta&gt;</code>元素（详见：4.11）</p></li><li><p><code>&lt;title&gt;</code>元素 - <strong>唯一必须的元素</strong></p><ul><li>网页的标题</li><li>页面标签的建议名，提高SEO搜索引擎的优化</li><li>显示在搜索引擎结果页面的标题</li><li>收藏夹默认的书签名称</li></ul></li><li><p><code>&lt;link&gt;</code>元素</p><ul><li><p>⾃定义网站图标 </p><ul><li><code>&lt;link rel=&quot;icon&quot; href=&quot;favicon.ico&quot; type=&quot;image/x-icon&quot; /&gt;</code></li><li><code>&lt;link rel=&quot;icon&quot; type=&quot;image/svg&quot; href=&quot;favicon.svg&quot;&gt;</code></li><li>如果修改图标文件，对应网页上未更新，请<code>Ctrl + F5</code>强制刷新</li></ul></li><li><p>引⽤CSS⽂件 <code>&lt;link rel=&quot;stylesheet&quot; href=&quot;my-css-file.css&quot; /&gt;</code></p></li><li><p>link元素如果写在body标签内部结构后面，会先显示没有样式的元素，然后加载样式，发现样式改变，重新渲染元素</p></li><li><p>建议写在head标签内部</p></li></ul></li><li><p><code>&lt;script&gt;</code>元素</p><ul><li><p>加载JS⽂件 <code>&lt;script src=&quot;my-js-file.js&quot; defer&gt;&lt;/script&gt;</code></p><ul><li><p><code>defer</code>属性</p><ul><li>请求脚本的网络是异步的，不会阻止浏览器解析HTML，等待HTML解析完再执行JS代码</li></ul></li><li><p><code>async</code>属性</p><ul><li>请求脚本的网络是异步的，不会阻止浏览器解析HTML，暂停解析HTML</li></ul></li></ul></li><li><p>直接在标签内书写JS代码</p></li></ul></li><li><p><code>&lt;style&gt;</code>元素</p><ul><li>直接在标签内书写CSS代码【内嵌样式表】</li></ul></li><li><p><code>&lt;base&gt;</code>元素</p><ul><li>该标签作为HTML⽂档中所有的链接标签的默认链接</li></ul></li></ul><p><code>&lt;body&gt;</code>元素</p><p><strong>注：</strong></p><ol><li>在存放代码的文件夹中，存放一个 favicon.ico 图片，可配置网站图标</li></ol><h3 id="4-3-1-元数据内容标签"><a href="#4-3-1-元数据内容标签" class="headerlink" title="4.3.1 元数据内容标签"></a>4.3.1 元数据内容标签</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">base</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">noscript</span>&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span></span></span><br></code></pre></td></tr></table></figure><h2 id="4-4-HTML标签"><a href="#4-4-HTML标签" class="headerlink" title="4.4 HTML标签"></a>4.4 HTML标签</h2><p><strong>标签：</strong>又称元素，是HTML的基本组成元素</p><ul><li><strong>双标签：</strong><code>&lt;标签名&gt;标签体&lt;/标签名&gt;</code></li><li><strong>单标签：</strong><code>&lt;标签名/&gt;</code><ul><li>仅一个开始标签</li><li>用于在元素所在位置插入&#x2F;嵌入一些内容</li><li>在开始标签加斜杠，是关闭空元素的正确⽅法</li></ul></li></ul><p><strong>标签名：</strong>不区分大小写，但推荐小写，因为小写更规范</p><p><strong>标签之间的关系：</strong></p><ul><li>并列关系</li><li>嵌套关系<ul><li>一个元素置于其他元素之中</li><li><strong>元素嵌套顺序要正确</strong></li></ul></li></ul><p><strong>容器级标签和文本级标签</strong>：</p><p>容器级标签：可以存放任意内容</p><p>文本级标签：只能存放文字或类似文字的内容</p><h3 id="4-4-1-排版标签"><a href="#4-4-1-排版标签" class="headerlink" title="4.4.1 排版标签"></a>4.4.1 排版标签</h3><p><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/1715592035335-f9e59080-6873-4b17-84c5-e8fb430728ac.png" alt="1715592035335-f9e59080-6873-4b17-84c5-e8fb430728ac"></p><p><strong>注：</strong></p><ol><li>h1标签至多一个，h2 ~ h6可多写（约定俗称）</li><li>h1 ~ h6不能互相嵌套</li><li>h1到h6重要程度递减</li><li><code>&lt;hgroup&gt;</code>标签 组合标题</li><li>每个页面最好不超过三个标题层次</li><li>p标签内部不能写排版标签（甚至不能写块级标签）</li></ol><h3 id="4-4-2-语义化标签"><a href="#4-4-2-语义化标签" class="headerlink" title="4.4.2 语义化标签"></a>4.4.2 语义化标签</h3><p><strong>语义化标签的理解？</strong></p><p>语义化是指根据内容的结构化（内容语义化），选择合适的标签（代码语义化）</p><p>语义化的优点如下：</p><ul><li>代码结构清晰，可读性强</li><li>有利于SEO，即搜索引擎优化</li></ul><p>常见的语义化标签：<header><nav><main><article><aside><footer></footer></aside></article></main></nav></header></p><p><strong>注：</strong></p><ol><li><p>标签的默认效果不重要（后面可以通过CSS任意修改）</p></li><li><p>SEO中的TDK：title、description、keywords这三个标签，title表示标题标签，description是描述标签，</p><p>keywords是关键词标签</p></li></ol><h3 id="4-4-3-块级标签与行内标签"><a href="#4-4-3-块级标签与行内标签" class="headerlink" title="4.4.3 块级标签与行内标签"></a>4.4.3 块级标签与行内标签</h3><p><strong>块级标签&#x2F;块级元素：</strong>独占一行（排版标签是块级标签）</p><p><strong>行内标签&#x2F;内联元素：</strong>不独占一行（input标签、img标签）</p><p><strong>注：</strong></p><ol><li>块级标签中能写块级标签和行内标签，占据父元素全部宽度</li><li>行内标签能写行内标签，不能写块级标签，占据必要的宽度</li></ol><h3 id="4-4-4-文本标签"><a href="#4-4-4-文本标签" class="headerlink" title="4.4.4 文本标签"></a>4.4.4 文本标签</h3><p><strong>概念：</strong>文本标签用于包裹短语、词汇等，通常都是行内标签</p><p><strong>通常写在排版标签中：</strong>排版标签更宏观（大段的文字），文本标签更微观（词汇、短语）</p><p><strong>常用文本标签：</strong></p><p><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/1715592147087-ff5ceb74-edb5-4c97-8b01-ba141e51d182.png" alt="1715592147087-ff5ceb74-edb5-4c97-8b01-ba141e51d182"></p><p><strong>不常用文本标签：</strong></p><p><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/1715592165291-1eec6e42-9373-44c4-9210-f07e01d12e2c.png" alt="1715592165291-1eec6e42-9373-44c4-9210-f07e01d12e2c"></p><h3 id="4-4-5-图片标签"><a href="#4-4-5-图片标签" class="headerlink" title="4.4.5 图片标签"></a>4.4.5 图片标签</h3><p><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/1715592242937-67e135ce-8396-4fb1-8420-fa3343e4ba4b.png" alt="1715592242937-67e135ce-8396-4fb1-8420-fa3343e4ba4b"></p><p><strong>border属性</strong></p><ul><li>边框属性，可以设置边框的厚度</li></ul><p><strong>title属性</strong></p><ul><li>设置提示文字</li></ul><p><strong>src属性值（图片路径）：</strong></p><p>引⽤⽂件路径的通⽤规则</p><ul><li><p>若引⽤的⽬标⽂件与HTML⽂件同级，只需直接使⽤⽂件名，例如：<code>my-image.jpg</code></p></li><li><p>要引⽤⼦⽬录中的⽂件，请在路径前⾯写上⽬录名，再加上⼀个正斜杠，例如：<code>subdirectory/my-</code></p><p><code>image.jpg</code></p></li><li><p>若引⽤的⽬标⽂件位于HTML⽂件的上级，需要加上两个点。例如：<code>../my-image.jpg</code></p></li><li><p>以上⽅法可以随意组合，⽐如：<code>../subdirectory/another-subdirectory/my-image.jpg</code></p></li></ul><p><strong>alt属性的作用：</strong></p><ul><li>搜索引擎通过alt属性，得知图片内容</li><li>图片无法展示时，显示alt属性的值</li><li>盲人阅读器会阅读alt属性的值</li></ul><p><strong>width、height属性</strong></p><ul><li>设置一个，另一个等比缩放</li><li>同时设置，图片会被拉伸</li></ul><p><strong>常见图片格式：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jpg、png、bmp、gif、webp、<span class="hljs-built_in">base64</span><br></code></pre></td></tr></table></figure><p><code>&lt;figure&gt;元素</code> <code>&lt;figcaption&gt;元素</code></p><ul><li>为图⽚提供⼀个语义容器，在标题和图⽚之间建⽴清晰的关联</li><li>figure⾥可以任意的独⽴内容单元</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/MyTestImage.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;⻛景图&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;⻛景图&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">figure</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/MyTestImage.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;⻛景图&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;200&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;⻛景图&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">figcaption</span>&gt;</span><br>    这是⼀张⻛景图⽚<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">figcaption</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">figure</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>响应式图片</strong></p><p> <code>srcset</code>属性  </p><ul><li>定义了浏览器可选择的图⽚设置以及每个图⽚的⼤⼩</li><li>每张图⽚信息的设置和前⼀个⽤逗号隔开</li><li>每个设置 ⼀个⽂件名 ⼀个空格 图⽚的固有宽度</li></ul><p> <code>sizes</code>属性  </p><ul><li><p>定义了⼀组媒体条件（例如屏幕宽度）并且指明当某些媒体条件为真时，什么样的图⽚尺⼨是最佳选择  </p></li><li><p>每个设置 ⼀个媒体条件 ⼀个空格 当媒体条件为真时，图像将填充的槽的宽度 </p><p><code>sizes=&quot;[media query] [length], [media query] [length] ... &quot;</code></p></li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;img<br>  <span class="hljs-attribute">srcset</span>=<span class="hljs-string">&quot;images/elva-fairy-480w.jpg 480w, images/elva-fairy-800w.jpg 800w&quot;</span><br>  <span class="hljs-attribute">sizes</span>=<span class="hljs-string">&quot;(max-width: 600px) 480px,</span><br><span class="hljs-string">  800px&quot;</span><br>  <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;images/elva-fairy-800w.jpg&quot;</span><br>  <span class="hljs-attribute">alt</span>=<span class="hljs-string">&quot;Elva dressed as a fairy&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p>分辨率切换：相同的尺⼨，不同的分辨率</p><ul><li>不需要sizes属性，系统会根据屏幕的分辨率⾃动选择合适的图⽚</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span></span><br><span class="hljs-tag">  <span class="hljs-attr">srcset</span>=<span class="hljs-string">&quot;elva-fairy-320w.jpg, elva-fairy-480w.jpg 1.5x, elva-fairy-640w.jpg 2x&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;elva-fairy-640w.jpg&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Elva dressed as a fairy&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p><strong>src和href的区别？</strong></p><p>src和href都是用来引用外部的资源，它们的区别如下：</p><ul><li>src：表示对资源的引用，它指向的内容会嵌入到当前标签所在的位置。src会将其指向的资源下载并应⽤到⽂档内，如请求js脚本。当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执⾏完毕，所以⼀般js脚本会放在页面底部。</li><li>href：表示超文本引用，它指向一些网络资源，建立和当前元素或本文档的链接关系。当浏览器识别到它他指向的⽂件时，就会并⾏下载资源，不会停⽌对当前⽂档的处理。 常用在a、link等标签上。</li></ul><h3 id="4-4-6-超链接标签"><a href="#4-4-6-超链接标签" class="headerlink" title="4.4.6 超链接标签"></a>4.4.6 超链接标签</h3><p><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/1715592345508-59fc8756-5675-4a4d-88d2-d53e3a0e347a.png" alt="1715592345508-59fc8756-5675-4a4d-88d2-d53e3a0e347a"></p><p><strong>注：</strong></p><ol><li><p><code>title</code>属性：鼠标悬停进行文字提示，是有必要的！</p></li><li><p><code>download</code>属性：提供一个默认的保存文件名</p></li><li><p>如何写一个块级链接？</p><ol><li><p>将块级元素包裹在<code>&lt;a&gt;</code>元素中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot; https://www.baidu.com&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;搜索引擎&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">”_blank”</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>百度<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol></li><li><p>统一资源定位符 URL</p><ol><li><p>定义在⽹络上的位置的⼀个⽂本字符串</p></li><li><p>万维网用url统一资源定位符标识分布因特网上的各种文档</p></li><li><p>格式</p><ol><li><code>scheme://host.domain:port/path/filename</code></li><li><code>scheme</code> - 定义因特⽹服务的类型。最常⻅的类型是 http</li><li><code>host</code> - 定义域主机（http 的默认主机是 www）</li><li><code>domain</code> - 定义因特⽹域名，⽐如 runoob.com</li><li><code>:port</code> - 定义主机上的端⼝号（http 的默认端⼝号是 80）</li><li><code>path</code> - 定义服务器上的路径（如果省略，则⽂档必须位于⽹站的根⽬录中）</li><li><code>filename</code> - 定义⽂档&#x2F;资源的名称</li></ol></li><li><p>URL Scheme<img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/1716364472610-34deeb27-cdb8-48ea-8e1b-bd1c38ad4444.png" alt="1716364472610-34deeb27-cdb8-48ea-8e1b-bd1c38ad4444"></p></li><li><p>绝对URL和相对URL</p></li><li><p>注意</p><ol><li>不要将URL作为链接⽂本的⼀部分</li><li>不要在链接⽂本中说链接或链接到</li><li>保持链接⽂本尽可能短</li><li>尽量减少相同⽂本的多个副本链接到不同地⽅的情况</li></ol></li></ol></li><li><p>假链接中我们通常在a标签的href中添加什么能使得页面不跳转？</p></li><li><p>a标签未添加href属性，是不能获取焦点的</p></li></ol><p><strong>写法：</strong></p><ul><li>跳转至指定页面</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 跳转其他网页 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.jd.com/&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>去京东<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 跳转本地网页 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./10_HTML排版标签.html&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_self&quot;</span>&gt;</span>去看排版标签<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>跳转至指定文件  <ul><li>若浏览器无法打开文件，会引导用户下载文件</li><li>若想强制触发下载，请使用 download 属性，属性值即为下载文件的名称</li></ul></li></ul><p></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 浏览器能直接打开的文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./resource/自拍.jpg&quot;</span>&gt;</span>看自拍<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./resource/小电影.mp4&quot;</span>&gt;</span>看小电影<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./resource/小姐姐.gif&quot;</span>&gt;</span>看小姐姐<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./resource/如何一夜暴富.pdf&quot;</span>&gt;</span>点我一夜暴富<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 浏览器不能打开的文件，会自动触发下载 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./resource/内部资源.zip&quot;</span>&gt;</span>内部资源<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 强制触发下载 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./resource/小电影.mp4&quot;</span> <span class="hljs-attr">download</span>=<span class="hljs-string">&quot;电影片段.mp4&quot;</span>&gt;</span>下载电影<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>跳转至锚点位置</p><ul><li><p>设置瞄点</p><ul><li><p>name 和 id 都是区分大小写的，且 id 最好别是数字开头</p></li><li><p>具有 href 属性的 a 标签是超链接，具有 name 属性的 a 标签是锚点 </p><ul><li><pre><code class="html">&lt;!-- 第一种方式：a标签配合name属性 --&gt;&lt;a name=&quot;test1&quot;&gt;&lt;/a&gt;&lt;!-- 第二种方式：其他标签配合id属性 --&gt;&lt;h2 id=&quot;test2&quot;&gt;我是一个位置&lt;/h2&gt;<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br>- 跳转瞄点<br><br>- ```html<br>  <span class="hljs-comment">&lt;!-- 跳转到test1锚点--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#test1&quot;</span>&gt;</span>去test1锚点<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 跳到本页面顶部 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>回到顶部<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 跳转到其他页面锚点 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;demo.html#test1&quot;</span>&gt;</span>去demo.html页面的test1锚点<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 刷新本页面 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>刷新本页面<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 执行一段js,如果还不知道执行什么，可以留空，javascript:; --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:alert(1);&quot;</span>&gt;</span>点我弹窗<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:void(0);&quot;</span>&gt;</span>点我弹窗<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 防止a标签跳转 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:;&quot;</span>&gt;</span>点我弹窗<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 防止a标签跳转 --&gt;</span><br>  <br>- 唤起指定应用<br><br>- ```<br>  <span class="hljs-comment">&lt;!-- 唤起设备拨号 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;tel:10010&quot;</span>&gt;</span>电话联系<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 唤起设备发送邮件 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;mailto:10010@qq.com&quot;</span>&gt;</span>邮件联系<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;mailto:nowhere@mozilla.org?cc=name2@rapidtables.com&amp;bcc=name3@rapidtables.com&amp;subject=The%20subject%20of%20</span></span><br><span class="hljs-string"><span class="hljs-tag">    the%20email&amp;body=The%20body%20of%20the%20email&quot;</span>&gt;</span> 发送含有 cc、bcc、主题和主体的邮件<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 唤起设备发送短信 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;sms:10086&quot;</span>&gt;</span>短信联系<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure></code></pre></li></ul></li></ul></li></ul></li></ul><p><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/1716434595284-189021d5-3ea5-4a18-bceb-93b2d74ccb43.png" alt="1716434595284-189021d5-3ea5-4a18-bceb-93b2d74ccb43"></p><h3 id="4-4-7-列表标签"><a href="#4-4-7-列表标签" class="headerlink" title="4.4.7 列表标签"></a>4.4.7 列表标签</h3><ul><li>有序列表</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第一步<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第二步<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第三步<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>无序列表</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>成都<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>上海<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>西安<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>武汉<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>描述列表</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>做好笔记<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>笔记是我们以后复习的一个抓手<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>笔记可以是电子版，也可以是纸质版<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>多加练习<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>只有敲出来的代码，才是自己的<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>别怕出错<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>错很正常，改正后并记住，就是经验<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>注：</strong></p><ol><li>列表可以嵌套使用，形成多级列表</li><li><code>li</code>元素的祖先元素可能是<code>li</code>，但父元素不可能是<code>li</code></li><li>一组dl标签最好只有一组dt和dd</li></ol><h3 id="4-4-8-表格标签"><a href="#4-4-8-表格标签" class="headerlink" title="4.4.8 表格标签"></a>4.4.8 表格标签</h3><p><strong>概念：</strong>一个完整的表格由：表格标题、表格头部、表格主体、表格脚注，四部分组成</p><p><strong>图示：</strong></p><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/1715591509843-e0694b69-1fed-434b-aa7d-3ab53e6fcdab.png" alt="1715591509843-e0694b69-1fed-434b-aa7d-3ab53e6fcdab" style="zoom: 67%;"><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/1715591510474-80e3bc61-4a09-4465-b6d8-1f78ba91596f.png" alt="1715591510474-80e3bc61-4a09-4465-b6d8-1f78ba91596f" style="zoom:67%;"><p><strong>基本代码：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 表格标题 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span><br>    学生信息<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">caption</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 表格头部 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>性别<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>民族<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>政治面貌<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 表格主体 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>18<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>汉族<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>团员<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>李四<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>20<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>满族<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>群众<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>王五<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>20<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>回族<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>党员<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>赵六<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>21<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>壮族<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>团员<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 表格脚注 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tfoot</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>共计：4人<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tfoot</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>常用属性：</strong></p><p><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/1715591510869-40554077-4646-4f57-8ab8-e0fecdaf7ebc.png" alt="1715591510869-40554077-4646-4f57-8ab8-e0fecdaf7ebc"><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/1715591510657-0cd6262d-7523-48c9-b897-89f90b422c06.gif" alt="img"></p><p><strong>注：</strong></p><ol><li>元素的 border 属性可以控制表格边框，但 border 值的大小，并不控制单元格边框的宽度，只能控制表格最外侧边框的宽度 </li><li>默认情况下，每列的宽度，得看这一列单元格最长的那个文字 </li><li>给某个 th 或 td 设置了宽度之后，他们所在的那一列的宽度就确定了 </li><li>给某个 th 或 td 设置了高度之后，他们所在的那一行的高度就确定了 </li><li><code>&lt;table&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</code>这么写也是可以的</li></ol><p><strong>单线表格</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border-collapse: collapse;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1-1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1-2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1-3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1-4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2-1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2-2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2-3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2-4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/image-20240927160511345.png" alt="image-20240927160511345"></p><p><strong>跨行跨列：</strong></p><p><code>rowspan</code>：指定要跨的行数</p><p><code>colspan</code> ：指定要跨的列数</p><p>制作技巧：</p><ul><li>先列出所有行<code>&lt;tr&gt;</code>，以最小单元格为标准</li><li>再添加每一行的td和th</li></ul><p><strong>小练习：</strong></p><p><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/1715591510939-9b3396bb-4191-4102-8964-1e1fd0b70d12.png" alt="1715591510939-9b3396bb-4191-4102-8964-1e1fd0b70d12"><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/1715591511233-cad33230-a8aa-4eee-b4cc-fa7c63cf36d5.gif" alt="img"></p><p><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/image-20240927160843371.png" alt="image-20240927160843371"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border-collapse: collapse; width: 500px;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>6<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>7<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>9<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>10<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>12<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>13<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-4-9-表单标签"><a href="#4-4-9-表单标签" class="headerlink" title="4.4.9 表单标签"></a>4.4.9 表单标签</h3><p><strong>概念：</strong>收集用户提供的数据，向Web服务器提交信息</p><p><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/1715591511640-d8e6c0c3-0ce3-46b8-a3b0-163dacdc6ebb.png" alt="1715591511640-d8e6c0c3-0ce3-46b8-a3b0-163dacdc6ebb"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;https://www.baidu.com/s&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;first&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;wd&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>去百度搜索<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/1715593450505-c670619c-0b29-45cc-adc3-88a7e9837f4e.png" alt="1715593450505-c670619c-0b29-45cc-adc3-88a7e9837f4e"></p><p><code>enctype</code>属性</p><p><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/1716619414153-86461ebc-b6d4-4e2c-ac95-2fe66bb2fbef.png" alt="1716619414153-86461ebc-b6d4-4e2c-ac95-2fe66bb2fbef"></p><p>input标签属性</p><ul><li>type、name、value、size、checked、maxlength</li></ul><p><strong>常用表单控件：</strong></p><p><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/1715593534051-84e6a5d5-c113-4c74-a71e-92de50d26b68.png" alt="1715593534051-84e6a5d5-c113-4c74-a71e-92de50d26b68"></p><p><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/1715593569682-19ec6cdb-898f-4806-9c1a-0ab0d1a60c1e.png" alt="img"></p><p><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/1715593584562-0eb7eeaa-e950-4d0f-b8c5-7e891dd533d5.png" alt="1715593584562-0eb7eeaa-e950-4d0f-b8c5-7e891dd533d5"></p><p><strong>解决文本框被拖拽的方法</strong></p><p>在CSS样式中设置<code>resize:none</code></p><p><strong>select标签中的optgroup标签 - 分组管理</strong></p><optgroup> <p>​label属性：为这一组选项添加分组标签名</p><p><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/image-20240927164655749.png" alt="image-20240927164655749"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;xxx&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">optgroup</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;中国&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;辽宁&quot;</span>&gt;</span>辽宁<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;上海&quot;</span>&gt;</span>上海<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">optgroup</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">optgroup</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;俄罗斯&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;莫斯科&quot;</span>&gt;</span>莫斯科<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">optgroup</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">图像上传：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/1.jpg&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">单个文件上传：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span><br>多个文件上传：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">multiple</span>=<span class="hljs-string">&quot;multiple&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>禁用表单控件：</strong></p><ul><li>给表单控件的标签设置 <code>disabled</code> 既可禁用表单控件</li><li><code>input</code> 、 <code>textarea</code> 、 <code>button</code> 、 <code>select</code> 、 <code>option</code> 都可以设置 <code>disabled</code> 属性</li></ul><p><code>&lt;label&gt;</code><strong>标签：</strong></p><pre><code class="hljs"> `label` 标签可与表单控件相关联，关联之后点击文字，与之对应的表单控件就会获取焦点  </code></pre><p> 两种与 label 关联方式如下：</p><ul><li>让 label 标签的 for 属性的值等于表单控件的 id</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;https://www.baidu.com/s&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;keyword&quot;</span>&gt;</span>获取输入框焦点<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;keyword&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;wd&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>去百度搜索<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/1715593969632-a242e43e-332a-41bf-b58c-5e91a34bea11.png" alt="1715593969632-a242e43e-332a-41bf-b58c-5e91a34bea11"></p><ul><li>把表单控件套在 label 标签的里面</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;https://www.baidu.com/s&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><br>    点我获取焦点<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;keyword&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;wd&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>去百度搜索<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/1715594031006-225abaf6-ddd8-4b8f-b0c2-afda06130535.png" alt="1715594031006-225abaf6-ddd8-4b8f-b0c2-afda06130535"></p><p><strong>fieldset 与 legend 的使用（了解）：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">legend</span>&gt;</span>主要信息<span class="hljs-tag">&lt;/<span class="hljs-name">legend</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;zhanghu&quot;</span>&gt;</span>账户：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;zhanghu&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;account&quot;</span> <span class="hljs-attr">maxlength</span>=<span class="hljs-string">&quot;10&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><br>    密码：<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mima&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">maxlength</span>=<span class="hljs-string">&quot;6&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>  性别：<br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;male&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;nan&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;nan&quot;</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;female&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;nv&quot;</span> /&gt;</span>女<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/1715598623484-683339b2-c040-48a5-894d-62661eb1969d.png" alt="1715598623484-683339b2-c040-48a5-894d-62661eb1969d"></p><p><code>&lt;optgroup&gt;</code><strong>标签</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">optgroup</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Swedish Cars&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;volvo&quot;</span>&gt;</span>Volvo<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;saab&quot;</span>&gt;</span>Saab<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">optgroup</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">optgroup</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;German Cars&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mercedes&quot;</span>&gt;</span>Mercedes<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;audi&quot;</span>&gt;</span>Audi<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">optgroup</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/1716948953319-d4e22e2e-88fe-4d05-bb5a-2a755ac2ec39.png" alt="1716948953319-d4e22e2e-88fe-4d05-bb5a-2a755ac2ec39"></p><h3 id="4-4-10-框架标签"><a href="#4-4-10-框架标签" class="headerlink" title="4.4.10 框架标签"></a>4.4.10 框架标签</h3><p><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/1715598669456-403bce0c-4d91-4b75-b444-f1ddc30bccd0.png" alt="1715598669456-403bce0c-4d91-4b75-b444-f1ddc30bccd0"></p><p><code>iframe</code>标签的实际应用：</p><ul><li>在网页中嵌入广告</li><li>与超链接 &#x2F; 表单的<code>target</code>配合，展示不同的内容</li></ul><p><code>iframe</code>标签阻塞页面加载的问题：</p><ul><li>在 Safari 和 Chrome 里，通过 JavaScript 动态设置 iframe 的 SRC 可以避免这种阻塞情况</li></ul><p><code>iframe</code>标签的使用场景：</p><ul><li>与第三方域名下的页面共享cookie</li><li>上传图片，避免当前页刷新</li><li>左边固定、右边自适应布局</li><li>资源加载</li></ul><h3 id="4-4-11-矢量图形标签"><a href="#4-4-11-矢量图形标签" class="headerlink" title="4.4.11 矢量图形标签"></a>4.4.11 矢量图形标签</h3><p><code>&lt;svg&gt;标签</code></p><h3 id="4-4-12-其他标签"><a href="#4-4-12-其他标签" class="headerlink" title="4.4.12 其他标签"></a>4.4.12 其他标签</h3><p><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/1715591511785-b8132c12-a89f-41e0-99ee-477fb0926855.png" alt="1715591511785-b8132c12-a89f-41e0-99ee-477fb0926855"></p><p><strong>注：</strong></p><ol><li>不要用 <code>&lt;br&gt;</code> 来增加文本之间的行间隔，应使用 <code>&lt;p&gt;</code>元素，或后面即将学到的 CSS</li><li><code>&lt;hr&gt;</code> 的语义是分隔，如果不想要语义，只是想画一条水平线，那么应当使用 CSS 完成</li></ol><h2 id="4-5-HTML标签属性"><a href="#4-5-HTML标签属性" class="headerlink" title="4.5 HTML标签属性"></a>4.5 HTML标签属性</h2><p><strong>标签属性：</strong>给标签提供附加信息，不显示在内容中，写在双标签的起始位置 &#x2F; 单标签中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">标签名</span> <span class="hljs-attr">key</span> = <span class="hljs-string">&quot;value&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">标签名</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>包含：</strong></p><ul><li>在属性与元素名称（或上⼀个属性，如果有超过⼀个属性的话）之间的空格符</li><li>属性的名称，并接上⼀个等号</li><li>由双引号所包围的属性值</li><li>⼀种引号可以嵌套另⼀种引号</li></ul><p><strong>布尔属性：</strong></p><ul><li>只有⼀个值，如：<code>&lt;input type=&quot;text&quot; disabled /&gt;</code></li></ul><p><strong>注：</strong></p><ul><li>有些标签属性没有属性名，只有属性值，如 <code>disabled</code></li><li>不同的标签有不同的属性，也有一些通用属性</li><li>属性名、属性值不能乱写，都是W3C规定好的</li><li>属性名、属性值，都不区分大小写，但推荐小写</li><li>标签中不要出现同名属性，否则后写的会失效</li><li>有的属性可以有多个属性值，比如 <code>class</code> ，写在同一个引号中，用空格分隔</li></ul><h2 id="4-6-HTML注释"><a href="#4-6-HTML注释" class="headerlink" title="4.6 HTML注释"></a>4.6 HTML注释</h2><p><strong>概念：</strong>注释的内容会被浏览器忽略，在源码中可见</p><p><strong>写法：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 注释内容 --&gt;</span><br></code></pre></td></tr></table></figure><p><strong>注：</strong></p><ul><li>注释不可以嵌套</li></ul><h2 id="4-7-HTML字符编码"><a href="#4-7-HTML字符编码" class="headerlink" title="4.7 HTML字符编码"></a>4.7 HTML字符编码</h2><p>计算机对数据的操作：</p><ul><li>编码：存储数据</li><li>解码：读取数据</li></ul><p>编码和解码遵循一定的规范 – 字符集</p><p>字符集：</p><ul><li>ASCII ：大写字母、小写字母、数字、一些符号，共计128个</li><li>ISO 8859-1 ：在 ASCII 基础上，扩充了一些希腊字符等，共计是256个</li><li>GB2312 ：继续扩充，收录了 6763 个常用汉字、682个字符</li><li>GBK ：收录了的汉字和符号达到 20000+ ，支持繁体中文</li><li>UTF-8 ：包含世界上所有语言的：所有文字与符号（常用）</li></ul><p>使用原则：  </p><ul><li>存储时，采用合适的字符编码</li><li>存储的编码方式和读取的解码方式要一致</li><li>统一采用UTF-8编码</li></ul><p>写法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-8-HTML语言设置"><a href="#4-8-HTML语言设置" class="headerlink" title="4.8 HTML语言设置"></a>4.8 HTML语言设置</h2><p><strong>作用：</strong></p><ul><li>让浏览器显示对应的翻译提示</li><li>有利于搜索引擎优化</li></ul><p><strong>写法：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 中文-中国大陆 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 中文-中国台湾 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-TW&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 中文 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh&quot;</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- 英语-美国 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en-US&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 英语-英国 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en-GB&quot;</span>&gt;</span><br>          <span class="hljs-comment">&lt;!-- 英语 --&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-9-HTML实体"><a href="#4-9-HTML实体" class="headerlink" title="4.9 HTML实体"></a>4.9 HTML实体</h2><p><strong>概念：</strong>字符实体由三部分组成：一个<code>&amp;</code>和一个实体名称（或者一个<code>#</code>和一个实体编号），最后加上一个分号<code>;</code></p><p><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/1715598890798-14253f4e-f988-4cb5-bc51-91386610dfd7.png" alt="1715598890798-14253f4e-f988-4cb5-bc51-91386610dfd7"></p><h2 id="4-10-HTML全局属性"><a href="#4-10-HTML全局属性" class="headerlink" title="4.10 HTML全局属性"></a>4.10 HTML全局属性</h2><p><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/1715598935111-0f365ee3-901e-44d5-bfad-b888ab666c7a.png" alt="1715598935111-0f365ee3-901e-44d5-bfad-b888ab666c7a"></p><h2 id="4-11-meta元信息"><a href="#4-11-meta元信息" class="headerlink" title="4.11 meta元信息"></a>4.11 meta元信息</h2><p><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/1715599031455-bf102ae3-2325-4b54-a5e0-3f4493514f05.png" alt="1715599031455-bf102ae3-2325-4b54-a5e0-3f4493514f05"></p><p><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/1715599047339-68463e15-81e0-4b17-af33-fb84c0ce6602.png" alt="img"></p><p><strong>注：</strong></p><ol><li>文档编码和<code>meta</code>标签中的字符编码要一致，否则会出现乱码</li><li><code>&lt;meta&gt;</code>标签中<code>name</code>等于<code>viewport</code>的<code>content</code>值为：</li></ol><p><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/1716439364811-a5ca4081-1acc-4ce9-aa2d-c111cf7f1485.png" alt="1716439364811-a5ca4081-1acc-4ce9-aa2d-c111cf7f1485"></p><ol start="3"><li>字符集编码<ol><li>种类<ol><li>UTF-8【国际通用】</li><li>gb2312【中文国标】</li><li>gbk【中文国标、收录汉字更多】</li></ol></li><li>字符编码使用建议<ol><li>若无网页加载速度要求 &#x2F; 制作外文网站 - 选择utf-8</li><li>网页含有大量中文，要求加载速度较快 - 选择gbk</li><li>meta规定的字符集要和编辑器的字符集一致</li></ol></li></ol></li></ol><h2 id="4-12-HTML颜色"><a href="#4-12-HTML颜色" class="headerlink" title="4.12 HTML颜色"></a>4.12 HTML颜色</h2><ul><li>由红⾊、绿⾊和蓝⾊组成的值</li><li>每种颜⾊的最⼩值是0（⼗六进制：#00），最⼤值是255（⼗六进制：#FF）</li><li>Web安全⾊ 216种</li><li>颜⾊名 141种</li></ul><h2 id="4-13-HTML脚本"><a href="#4-13-HTML脚本" class="headerlink" title="4.13 HTML脚本"></a>4.13 HTML脚本</h2><p><code>&lt;script&gt;</code> 标签</p><p><code>&lt;noscript&gt;</code> 标签：若浏览器不支持<code>script</code>脚本，作为备选方案</p><p><strong>script标签中defer和async的区别？</strong></p><p>如果没有defer或async属性，浏览器会立即加载并执行相应的脚本。它不会等待后续加载的文档元素，读取到就</p><p>会开始加载和执行，这样就阻塞了后续文档的加载。</p><p>defer 和 async属性都是去异步加载外部的JS脚本文件，它们都不会阻塞页面的解析，其区别如下：</p><ul><li><p>执行顺序： 多个带async属性的标签，不能保证加载的顺序；多个带defer属性的标签，按照加载顺序执行；</p></li><li><p>脚本是否并行执行：async属性，表示后续文档的加载和执行与js脚本的加载和执行是并行进行的，即异步执</p><p>行；defer属性，加载后续文档的过程和js脚本的加载(此时仅加载不执行)是并行进行的(异步)，js脚本需要等到</p><p>文档所有元素解析完成之后才执行，DOMContentLoaded事件触发执行之前。</p></li></ul><h2 id="4-14-Frames"><a href="#4-14-Frames" class="headerlink" title="4.14 Frames"></a>4.14 Frames</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">frameset</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;25%,75%&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">frame</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../asdocs/html_tutorials/Frame_a.html&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">frame</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../asdocs/html_tutorials/Frame_b.html&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">frameset</span>&gt;</span> <br></code></pre></td></tr></table></figure><h2 id="4-15-data-自定义数据"><a href="#4-15-data-自定义数据" class="headerlink" title="4.15 data-* 自定义数据"></a>4.15 data-* 自定义数据</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pid&quot;</span> <span class="hljs-attr">data-name</span>=<span class="hljs-string">&quot;磊&quot;</span>&gt;</span>这是一个段落标签<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> p = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;pid&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p.<span class="hljs-property">dataset</span>.<span class="hljs-property">name</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/1716949245681-bd5ec8eb-09a5-4dbe-9f14-685aafdbb49a.png" alt="1716949245681-bd5ec8eb-09a5-4dbe-9f14-685aafdbb49a"></p><h1 id="五、HTML5基础"><a href="#五、HTML5基础" class="headerlink" title="五、HTML5基础"></a>五、HTML5基础</h1><h2 id="5-1-HTML5简介"><a href="#5-1-HTML5简介" class="headerlink" title="5.1 HTML5简介"></a>5.1 HTML5简介</h2><h3 id="5-1-1-什么是HTML5"><a href="#5-1-1-什么是HTML5" class="headerlink" title="5.1.1 什么是HTML5"></a>5.1.1 什么是HTML5</h3><ul><li><p><code>HTML5</code> 是新一代的 <code>HTML</code> 标准，2014年10月由万维网联盟（ W3C ）完成标准制定</p></li><li><p>官网地址： </p></li><li><p>WHATWG 提供： <a href="https://html.spec.whatwg.org/multipage/index.html">https://html.spec.whatwg.org/multipage/index.html</a></p></li><li><p>HTML5 在狭义上是指新一代的 HTML 标准，在广义上是指：整个前端</p></li></ul><h3 id="5-1-2-HTML5优势"><a href="#5-1-2-HTML5优势" class="headerlink" title="5.1.2 HTML5优势"></a>5.1.2 HTML5优势</h3><ol><li>针对 JavaScript ，新增了很多可操作的接口</li><li>新增了一些语义化标签、全局属性</li><li>新增了多媒体标签，可以很好的替代 flash</li><li>更加侧重语义化，对于 SEO 更友好</li><li>可移植性好，可以大量应用在移动设备上</li></ol><h3 id="5-1-3-HTML5兼容性"><a href="#5-1-3-HTML5兼容性" class="headerlink" title="5.1.3 HTML5兼容性"></a>5.1.3 HTML5兼容性</h3><ul><li>支持：<code>Chrome</code>、<code>Safari</code>、<code>Opera</code>、<code>Firefox</code> 等主流浏览器  </li><li><code>IE</code>浏览器必须是 9 及以上版本 才支持，且<code>IE9</code>仅支持部分HTML5新特性</li></ul><h3 id="5-1-4-HTML5设计目的"><a href="#5-1-4-HTML5设计目的" class="headerlink" title="5.1.4 HTML5设计目的"></a>5.1.4 HTML5设计目的</h3><p>为了在移动设备上支持多媒体</p><h2 id="5-2-新增语义化标签"><a href="#5-2-新增语义化标签" class="headerlink" title="5.2 新增语义化标签"></a>5.2 新增语义化标签</h2><h3 id="5-2-1-布局标签"><a href="#5-2-1-布局标签" class="headerlink" title="5.2.1 布局标签"></a>5.2.1 布局标签</h3><p><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/1716187062456-3b9e242d-a21f-4067-9b00-d561d8d630f0.png" alt="1716187062456-3b9e242d-a21f-4067-9b00-d561d8d630f0"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">article</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aside</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aside</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>IE9以下浏览器不支持，需要转为块元素：</p><p>header,nav… {</p><p>​display:none</p><p>}</p></blockquote><h3 id="5-2-2-状态标签"><a href="#5-2-2-状态标签" class="headerlink" title="5.2.2 状态标签"></a>5.2.2 状态标签</h3><p><code>meter</code>标签</p><ul><li>定义已知范围内的标量测量，也被称为尺度</li><li>双标签</li><li>例如电量、磁盘用量等  </li><li>常用属性</li></ul><p><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/1716187372242-3f6908e9-e3d9-43ad-b854-a8fe755086ff.png" alt="1716187372242-3f6908e9-e3d9-43ad-b854-a8fe755086ff"></p><p><code>progress</code>标签</p><ul><li>显示某个任务完成的进度的指示器，一般用于表示进度条</li><li>双标签</li><li>例如工作完成进度等</li><li>常用属性</li></ul><p><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/1716187448882-b06907b0-1a8d-475d-81e3-96a5d88e5a4c.png" alt="1716187448882-b06907b0-1a8d-475d-81e3-96a5d88e5a4c">  </p><h3 id="5-2-3-列表标签"><a href="#5-2-3-列表标签" class="headerlink" title="5.2.3 列表标签"></a>5.2.3 列表标签</h3><p><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/1716187721292-73e45738-9a44-4e63-a729-dfd532eb9c12.png" alt="1716187721292-73e45738-9a44-4e63-a729-dfd532eb9c12"></p><h3 id="5-2-4-文本标签"><a href="#5-2-4-文本标签" class="headerlink" title="5.2.4 文本标签"></a>5.2.4 文本标签</h3><p><strong>文本注音</strong></p><p><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/1716188975465-96bcec75-10e8-44d8-8582-88bd00143c3b.png" alt="1716188975465-96bcec75-10e8-44d8-8582-88bd00143c3b"></p><p><strong>文本标记</strong></p><p><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/1716188985498-b480c73c-43f4-47d3-9bdd-98dc52c1da87.png" alt="1716188985498-b480c73c-43f4-47d3-9bdd-98dc52c1da87"></p><h3 id="5-2-5-画布标签"><a href="#5-2-5-画布标签" class="headerlink" title="5.2.5 画布标签"></a>5.2.5 画布标签</h3><p><code>&lt;canvas&gt;</code>标签</p><h3 id="5-2-6-其他标签"><a href="#5-2-6-其他标签" class="headerlink" title="5.2.6 其他标签"></a>5.2.6 其他标签</h3><p><code>&lt;embed&gt;</code>标签</p><p>​定义了一个容器，用来嵌入外部应用或者互动程序（插件）【不建议使用】</p><p><code>&lt;small&gt;</code>标签</p><p><code>&lt;menu&gt;</code>标签</p><p>​定义菜单列表。当希望列出表单控件时使用该标签</p><p><code>&lt;command&gt;</code>标签</p><p>​定义命令按钮，比如单选按钮、复选框或按钮</p><p><code>&lt;manifest&gt;</code>标签</p><p><code>&lt;picture&gt;</code>标签</p><p><strong>已删除的标签</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">big</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">font</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">tt</span>&gt;</span>、<span class="hljs-tag">&lt;<span class="hljs-name">strike</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="5-3-新增表单功能"><a href="#5-3-新增表单功能" class="headerlink" title="5.3 新增表单功能"></a>5.3 新增表单功能</h2><h3 id="5-3-1-表单控件新增属性"><a href="#5-3-1-表单控件新增属性" class="headerlink" title="5.3.1 表单控件新增属性"></a>5.3.1 表单控件新增属性</h3><p><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/1716189067788-d176a227-b78e-4f86-90eb-ff03b6aa0778.png" alt="1716189067788-d176a227-b78e-4f86-90eb-ff03b6aa0778"></p><p><code>list</code>属性</p><p>规定输⼊域的 datalist（datalist 是输⼊域的选项列表）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">list</span>=<span class="hljs-string">&quot;browsers&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">datalist</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;browsers&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Internet Explorer&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Firefox&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Chrome&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Opera&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Safari&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">datalist</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>min</code> 和 <code>max</code> 属性</p><p>​适⽤于以下类型的<code>&lt;input&gt;</code> 标签 <code>date pickers</code>、<code>number</code> 以及 <code>range</code></p><p><code>multiple</code> 属性</p><p>​⼀个 boolean 属性</p><p>​规定<input> 元素中可选择多个值</p><p><code>step</code> 属性</p><p>​为输⼊域规定合法的数字间隔</p><p>​如果 step&#x3D;”3”，则合法的数是 -3,0,3,6</p><p>​step 属性可以与 max 和 min 属性创建⼀个区域值</p><h3 id="5-3-2-input新增type属性值"><a href="#5-3-2-input新增type属性值" class="headerlink" title="5.3.2 input新增type属性值"></a>5.3.2 input新增type属性值</h3><p><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/1716189107359-a4a3cf63-25f4-420d-85a3-e5db3a4e951f.png" alt="1716189107359-a4a3cf63-25f4-420d-85a3-e5db3a4e951f"></p><p><strong>date 和 datetime-local</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;date&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bday&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;datetime-local&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bdaytime&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/1716615846694-d9652195-c342-4ba7-ae6c-5dc28adf632b.png" alt="1716615846694-d9652195-c342-4ba7-ae6c-5dc28adf632b"></p><ul><li>两者都可以绘制日历</li><li>后者可以显示本地时间，时间可以修改</li><li>日历的样式可以通过CSS修改</li><li>日历的样式可应用于多个浏览器</li></ul><h3 id="5-3-3-form标签新增属性"><a href="#5-3-3-form标签新增属性" class="headerlink" title="5.3.3 form标签新增属性"></a>5.3.3 form标签新增属性</h3><p><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/1716189137752-a419c0de-ab1c-48d4-b0d4-fb9f601182a6.png" alt="1716189137752-a419c0de-ab1c-48d4-b0d4-fb9f601182a6"></p><h3 id="5-3-4-新增表单控件"><a href="#5-3-4-新增表单控件" class="headerlink" title="5.3.4 新增表单控件"></a>5.3.4 新增表单控件</h3><p><code>&lt;keygen&gt;</code> 元素</p><ul><li>提供⼀种验证⽤户的可靠⽅法</li><li>规定⽤于表单的密钥对⽣成器字段</li><li>当提交表单时，会⽣成两个键，⼀个是私钥，⼀个公钥</li><li>私钥（private key）存储于客户端，公钥（public key）则被发送到服务器。公钥可⽤于之后验证⽤户的客户端证书（client certificate）</li></ul><p><code>&lt;output&gt;</code> 元素</p><ul><li>⽤于不同类型的输出，⽐如计算或脚本输出</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">oninput</span>=<span class="hljs-string">&quot;x.value=parseInt(a.value)+parseInt(b.value)&quot;</span>&gt;</span>0<br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;range&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;a&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;50&quot;</span>&gt;</span>100 +<br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;b&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;50&quot;</span>&gt;</span>=<br>  <span class="hljs-tag">&lt;<span class="hljs-name">output</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;a b&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">output</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="5-4-新增多媒体标签"><a href="#5-4-新增多媒体标签" class="headerlink" title="5.4 新增多媒体标签"></a>5.4 新增多媒体标签</h2><p><code>video</code>标签</p><p><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/1716189268921-bdeb24df-0ea1-463c-84b2-b20a6ca2d8a2.png" alt="1716189268921-bdeb24df-0ea1-463c-84b2-b20a6ca2d8a2"></p><p><code>audio</code>标签</p><p><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/1716189294229-c67e129e-52c1-47da-a50e-b64b24ba97e1.png" alt="1716189294229-c67e129e-52c1-47da-a50e-b64b24ba97e1"></p><p>方法：<code>load()</code> <code>play()</code> <code>pause()</code></p><p>事件：<code>play()</code> <code>playing()</code> <code>pause()</code> <code>seeked()</code> <code>seeking()</code> <code>abort()</code>    </p><p><code>&lt;source&gt;</code>标签</p><p><code>track</code>标签</p><p><strong>注：</strong></p><ul><li><code>&lt;audio&gt;</code>与<code>&lt;/audio&gt;</code>之间插入的内容是供不支持<code>audio</code>元素的浏览器显示的</li><li><code>audio</code>标签要加controls属性才能出现音频控制界面</li></ul><h2 id="5-5-新增全局属性"><a href="#5-5-新增全局属性" class="headerlink" title="5.5 新增全局属性"></a>5.5 新增全局属性</h2><p><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/1716189386385-053d121a-69b5-46a8-bfbe-4dbfde2c07b7.png" alt="1716189386385-053d121a-69b5-46a8-bfbe-4dbfde2c07b7"></p><h2 id="5-6-兼容性处理"><a href="#5-6-兼容性处理" class="headerlink" title="5.6 兼容性处理"></a>5.6 兼容性处理</h2><ul><li>添加元信息，让浏览器处于最优渲染模式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--设置IE总是使用最新的文档模式进行渲染--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=Edge&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--优先使用 webkit ( Chromium ) 内核进行渲染, 针对360等壳浏览器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;renderer&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;webkit&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>使用 html5shiv 让低版本浏览器认识 H5 的语义化标签</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--[if lt ie 9]&gt;</span><br><span class="hljs-comment">&lt;script src=&quot;../sources/js/html5shiv.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-comment">&lt;![endif]--&gt;</span><br></code></pre></td></tr></table></figure><ul><li>扩展</li></ul><p>​<code>lt</code>   小于</p><p>​<code>lte</code> 小于等于 </p><p>​<code>gt</code> 大于 </p><p>​<code>gte</code> 大于等于 </p><p>​<code>!</code> 逻辑非  </p><ul><li>示例</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--[if IE 8]&gt;仅IE8可见&lt;![endif]--&gt;</span><br><span class="hljs-comment">&lt;!--[if gt IE 8]&gt;仅IE8以上可见&lt;![endif]—&gt;</span><br><span class="hljs-comment">&lt;!--[if lt IE 8]&gt;仅IE8以下可见&lt;![endif]—&gt;</span><br><span class="hljs-comment">&lt;!--[if gte IE 8]&gt;IE8及以上可见&lt;![endif]—&gt;</span><br><span class="hljs-comment">&lt;!--[if lte IE 8]&gt;IE8及以下可见&lt;![endif]—&gt;</span><br><span class="hljs-comment">&lt;!--[if !IE 8]&gt;非IE8的IE可见&lt;![endif]--&gt;</span><br></code></pre></td></tr></table></figure><h2 id="5-7-添加新元素"><a href="#5-7-添加新元素" class="headerlink" title="5.7 添加新元素"></a>5.7 添加新元素</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>为 HTML 添加新元素<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;myHero&quot;</span>);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">      myHero &#123;</span><br><span class="language-css">        <span class="hljs-attribute">display</span>: block;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ddd</span>;</span><br><span class="language-css">        <span class="hljs-attribute">padding</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">      &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我的第⼀个标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我的第⼀个段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">myHero</span>&gt;</span>我的第⼀个新元素<span class="hljs-tag">&lt;/<span class="hljs-name">myHero</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="5-8-本地存储"><a href="#5-8-本地存储" class="headerlink" title="5.8 本地存储"></a>5.8 本地存储</h2><p>新增两种数据存储方式：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">WebStorage</span><br></code></pre></td></tr></table></figure><p>分为 <code>localStorage</code> 和 <code>sessionStorage</code></p><p>参考：<a href="https://blog.csdn.net/zhuanzhuantech/article/details/132049687">https://blog.csdn.net/zhuanzhuantech/article/details/132049687</a></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">WebSQLDatabase</span><br></code></pre></td></tr></table></figure><p>参考：<a href="https://blog.csdn.net/aa390481978/article/details/91125586">https://blog.csdn.net/aa390481978/article/details/91125586</a></p><h2 id="5-9-WebSocket"><a href="#5-9-WebSocket" class="headerlink" title="5.9  WebSocket"></a>5.9  WebSocket</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">前端<br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/I_loveCong/article/details/135332233">https://blog.csdn.net/I_loveCong/article/details/135332233</a></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Java</span><br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/stxyg/article/details/131756640">https://blog.csdn.net/stxyg/article/details/131756640</a></p><h2 id="5-10-Web-Worker"><a href="#5-10-Web-Worker" class="headerlink" title="5.10 Web Worker"></a>5.10 Web Worker</h2><p><strong>概念：</strong></p><p>Web Worker 是 HTML5 标准的一部分，这一规范定义了一套 API，允许我们在 js 主线程之外开辟新</p><p>的 Worker 线程，并将一段 js 脚本运行其中，它赋予了开发者利用 js 操作多线程的能力。</p><p>因为是独立的线程，Worker 线程与 js 主线程能够同时运行，互不阻塞。所以，在我们有大量运算任</p><p>务时，可以把运算任务交给 Worker 线程去处理，当 Worker 线程计算完成，再把结果返回给 js 主线程。</p><p>这样，js 主线程只用专注处理业务逻辑，不用耗费过多时间去处理大量复杂计算，从而减少了阻塞时间，</p><p>也提高了运行效率，页面流畅度和用户体验自然而然也提高了。</p><p>虽然 Worker 线程是在浏览器环境中被唤起，但是它与当前页面窗口运行在不同的全局上下文中，我</p><p>们常用的顶层对象 window，以及 parent 对象在 Worker 线程上下文中是不可用的。另外，在 Worker </p><p>线程上下文中，操作 DOM 的行为也是不可行的，document对象也不存在。但是，location和navigator</p><p>对象可以以可读方式访问。除此之外，绝大多数 Window 对象上的方法和属性，都被共享到 Worker 上下</p><p>文全局对象 WorkerGlobalScope 中。同样，Worker 线程上下文也存在一个顶级对象 self。</p><p><strong>如何使用 Web Worker：</strong></p><ol><li>创建 <code>worker</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">const worker = new Worker(path, options);<br></code></pre></td></tr></table></figure><p><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/1716440928986-fa646dd3-8629-4def-a358-236d3eacc522.png" alt="1716440928986-fa646dd3-8629-4def-a358-236d3eacc522"></p><ol><li><code>js</code>主线程与<code>worker</code>线程数据传递</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html">// main.js（主线程）<br><br>const myWorker = new Worker(&#x27;/worker.js&#x27;); // 创建worker<br><br>myWorker.addEventListener(&#x27;message&#x27;, e =&gt; &#123; // 接收消息<br>console.log(e.data); // Greeting from Worker.js，worker线程发送的消息<br>&#125;);<br><br>// 这种写法也可以<br>// myWorker.onmessage = e =&gt; &#123; // 接收消息<br>//    console.log(e.data);<br>// &#125;;<br><br>myWorker.postMessage(&#x27;Greeting from Main.js&#x27;); // 向 worker 线程发送消息，对应 worker 线程中的 e.data<br>// worker.js（worker线程）<br>self.addEventListener(&#x27;message&#x27;, e =&gt; &#123; // 接收到消息<br>console.log(e.data); // Greeting from Main.js，主线程发送的消息<br>self.postMessage(&#x27;Greeting from Worker.js&#x27;); // 向主线程发送消息<br>&#125;);<br></code></pre></td></tr></table></figure><ol><li>监听错误信息</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html">// main.js（主线程）<br>const myWorker = new Worker(&#x27;/worker.js&#x27;); // 创建worker<br><br>myWorker.addEventListener(&#x27;error&#x27;, err =&gt; &#123;<br>console.log(err.message);<br>&#125;);<br>myWorker.addEventListener(&#x27;messageerror&#x27;, err =&gt; &#123;<br>console.log(err.message)<br>&#125;);<br>// worker.js（worker线程）<br>self.addEventListener(&#x27;error&#x27;, err =&gt; &#123;<br>console.log(err.message);<br>&#125;);<br>self.addEventListener(&#x27;messageerror&#x27;, err =&gt; &#123;<br>console.log(err.message);<br>&#125;);<br></code></pre></td></tr></table></figure><ol><li>关闭<code>worker</code>线程</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">// main.js（主线程）<br>const myWorker = new Worker(&#x27;/worker.js&#x27;); // 创建worker<br>myWorker.terminate(); // 关闭worker<br>// worker.js（worker线程）<br>self.close(); // 直接执行close方法就ok了<br></code></pre></td></tr></table></figure><p>主线程和<code>worker</code>线程关闭的区别：</p><p>无论是在主线程关闭 worker，还是在 worker 线程内部关闭 worker，worker 线程当前的 Event Loop 中的任务会继续执行。至于 worker 线程下一个 Event Loop 中的任务，则会被直接忽略，不会继续执行。</p><p>区别是，在主线程手动关闭 worker，主线程与 worker 线程之间的连接都会被立刻停止，即使 worker 线程当前的 Event Loop 中仍有待执行的任务继续调用 postMessage() 方法，但主线程不会再接收到消息。</p><p>在 worker 线程内部关闭 worker，不会直接断开与主线程的连接，而是等 worker 线程当前的 Event Loop 所有任务执行完，再关闭。也就是说，在当前 Event Loop 中继续调用 postMessage() 方法，主线程还是能通过监听message事件收到消息的。</p><ol><li><code>Worker</code> 线程引用其他<code>js</code>文件</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html">// utils.js<br>const add = (a, b) =&gt; a + b;<br>// worker.js（worker线程）<br>// 使用方法：importScripts(path1, path2, ...); <br><br>importScripts(&#x27;./utils.js&#x27;);<br><br>console.log(add(1, 2)); // log 3<br></code></pre></td></tr></table></figure><ol><li><code>ESModule</code> 模式</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html">// main.js（主线程）<br>const worker = new Worker(&#x27;/worker.js&#x27;, &#123;<br>type: &#x27;module&#x27;  // 指定 worker.js 的类型<br>&#125;);<br>// utils.js<br>export default add = (a, b) =&gt; a + b;<br>// worker.js（worker线程）<br>import add from &#x27;./utils.js&#x27;; // 导入外部js<br><br>self.addEventListener(&#x27;message&#x27;, e =&gt; &#123; <br>postMessage(e.data);<br>&#125;);<br><br>add(1, 2); // log 3<br><br>export default self; // 只需把顶级对象self暴露出去即可<br></code></pre></td></tr></table></figure><p><strong>SharedWorker：多页面数据共享</strong></p><h2 id="5-11-拖放（Drag-和-Drop）"><a href="#5-11-拖放（Drag-和-Drop）" class="headerlink" title="5.11 拖放（Drag 和 Drop）"></a>5.11 拖放（Drag 和 Drop）</h2><p>参考：<a href="https://blog.csdn.net/delishcomcn/article/details/132400972">https://blog.csdn.net/delishcomcn/article/details/132400972</a></p><h2 id="5-12-地理定位"><a href="#5-12-地理定位" class="headerlink" title="5.12 地理定位"></a>5.12 地理定位</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-cn&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>编程笔记 html5&amp;css&amp;js HTML MathML<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">         <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">2em</span>;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: cyan;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: teal;</span><br><span class="language-css">         &#125;</span><br><span class="language-css">         <span class="hljs-selector-class">.container</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: cyan;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: teal;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>; <span class="hljs-comment">/* 设置容器的宽度 */</span></span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto; <span class="hljs-comment">/* 将左右边距设置为自动 */</span></span><br><span class="language-css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">2</span>;</span><br><span class="language-css">         &#125;</span><br><span class="language-css">         <span class="hljs-selector-tag">button</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.5em</span>;</span><br><span class="language-css">         &#125;</span><br><span class="language-css">         <span class="hljs-selector-tag">h1</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">         &#125;</span><br><span class="language-css">      </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>测试地理定位<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>            纬度:<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>            经度:<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>            位置精度:<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>            海拔:<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>            海拔精度:<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>            方向:<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>            速度(米/秒):<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>            定位时间: <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;getLocation()&quot;</span>&gt;</span>获得地理定位<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-keyword">let</span> x = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;demo&quot;</span>);</span><br><span class="language-javascript">            <span class="hljs-keyword">function</span> <span class="hljs-title function_">getLocation</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">               <span class="hljs-keyword">if</span> (navigator.<span class="hljs-property">geolocation</span>) &#123;</span><br><span class="language-javascript">                  navigator.<span class="hljs-property">geolocation</span>.<span class="hljs-title function_">getCurrentPosition</span>(showPosition);</span><br><span class="language-javascript">               &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                  x.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;Geolocation is not supported by this browser.&quot;</span>;</span><br><span class="language-javascript">               &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-comment">//coords.latitude十进制数的纬度</span></span><br><span class="language-javascript">            <span class="hljs-comment">// coords.longitude十进制数的经度</span></span><br><span class="language-javascript">            <span class="hljs-comment">// coords.accuracy位置精度</span></span><br><span class="language-javascript">            <span class="hljs-comment">// coords.altitude海拔，海平面以上以米计</span></span><br><span class="language-javascript">            <span class="hljs-comment">// coords.altitudeAccuracy位置的海拔精度</span></span><br><span class="language-javascript">            <span class="hljs-comment">// coords.heading方向，从正北开始以度计</span></span><br><span class="language-javascript">            <span class="hljs-comment">// coords.speed速度，以米/每秒计</span></span><br><span class="language-javascript">            <span class="hljs-comment">// timestamp响应的日期/时间</span></span><br><span class="language-javascript">            <span class="hljs-keyword">function</span> <span class="hljs-title function_">showPosition</span>(<span class="hljs-params">position</span>) &#123;</span><br><span class="language-javascript">               x.<span class="hljs-property">innerHTML</span> =</span><br><span class="language-javascript">                  <span class="hljs-string">&quot;纬度: &quot;</span> +</span><br><span class="language-javascript">                  position.<span class="hljs-property">coords</span>.<span class="hljs-property">latitude</span> +</span><br><span class="language-javascript">                  <span class="hljs-string">&quot;&lt;br /&gt;经度: &quot;</span> +</span><br><span class="language-javascript">                  position.<span class="hljs-property">coords</span>.<span class="hljs-property">longitude</span> +</span><br><span class="language-javascript">                  <span class="hljs-string">&quot;&lt;br /&gt;位置精度: &quot;</span> +</span><br><span class="language-javascript">                  position.<span class="hljs-property">coords</span>.<span class="hljs-property">accuracy</span> +</span><br><span class="language-javascript">                  <span class="hljs-string">&quot;&lt;br /&gt;海拔: &quot;</span> +</span><br><span class="language-javascript">                  position.<span class="hljs-property">coords</span>.<span class="hljs-property">altitude</span> +</span><br><span class="language-javascript">                  <span class="hljs-string">&quot;&lt;br /&gt;海拔精度: &quot;</span> +</span><br><span class="language-javascript">                  position.<span class="hljs-property">coords</span>.<span class="hljs-property">altitudeAccuracy</span> +</span><br><span class="language-javascript">                  <span class="hljs-string">&quot;&lt;br /&gt;方向: &quot;</span> +</span><br><span class="language-javascript">                  position.<span class="hljs-property">coords</span>.<span class="hljs-property">heading</span> +</span><br><span class="language-javascript">                  <span class="hljs-string">&quot;&lt;br /&gt;速度(米/秒): &quot;</span> +</span><br><span class="language-javascript">                  position.<span class="hljs-property">speed</span> +</span><br><span class="language-javascript">                  <span class="hljs-string">&quot;&lt;br /&gt;定位时间: &quot;</span> +</span><br><span class="language-javascript">                  position.<span class="hljs-property">timestamp</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">         </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/1717038625998-128d7aac-5261-4a7a-8245-45dec837af4b.png" alt="1717038625998-128d7aac-5261-4a7a-8245-45dec837af4b" style="zoom: 33%;"><p>参考：<a href="https://blog.51cto.com/u_16099265/9402558">https://blog.51cto.com/u_16099265/9402558</a></p><h2 id="5-13-服务器发送事件（SSE）"><a href="#5-13-服务器发送事件（SSE）" class="headerlink" title="5.13  服务器发送事件（SSE）"></a>5.13  服务器发送事件（SSE）</h2><p>参考：<a href="https://blog.csdn.net/daizikui/article/details/138185618">https://blog.csdn.net/daizikui/article/details/138185618</a></p><h2 id="5-14-跨文档消息传输"><a href="#5-14-跨文档消息传输" class="headerlink" title="5.14 跨文档消息传输"></a>5.14 跨文档消息传输</h2><p>参考：<a href="https://blog.csdn.net/Ferris_/article/details/103701582">https://blog.csdn.net/Ferris_/article/details/103701582</a></p><h2 id="5-15-相关框架或类库"><a href="#5-15-相关框架或类库" class="headerlink" title="5.15 相关框架或类库"></a>5.15 相关框架或类库</h2><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">ReactiveJS`、`Bootstrap`、`AngularJS<br></code></pre></td></tr></table></figure><h2 id="5-16-应用缓存"><a href="#5-16-应用缓存" class="headerlink" title="5.16 应用缓存"></a>5.16 应用缓存</h2><p><strong>启动</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">HTML</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">manifest</span>=<span class="hljs-string">&quot;demo.appcache&quot;</span>&gt;</span><br>  ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>优势</strong></p><p>应用程序缓存为应用带来三个优势：</p><ol><li>离线浏览 - 用户可在应用离线时使用它们</li><li>速度 - 已缓存资源加载得更快</li><li>减少服务器负载 - 浏览器将只从服务器下载更新过或更改过的资源</li></ol><p><strong>Manifest文件</strong></p><p>manifest 文件是简单的文本文件，它告知浏览器被缓存的内容（以及不缓存的内容）</p><p>manifest 文件有三个部分：</p><ul><li><p>CACHE MANIFEST - 在此标题下列出的文件将在首次下载后进行缓存</p></li><li><p>NETWORK - 在此标题下列出的文件需要与服务器的连接，且不会被缓存</p></li><li><p>可以使用星号来指示所有其他其他资源&#x2F;文件都需要因特网连接</p></li><li><p>FALLBACK - 在此标题下列出的文件规定当页面无法访问时的回退页面（比如 404 页面）</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">FALLBACK:<br>/html/ /offline.html<br></code></pre></td></tr></table></figure><p><strong>更新缓存</strong></p><p>一旦应用被缓存，它就会保持缓存直到发生下列情况：</p><ul><li>用户清空浏览器缓存</li><li>manifest 文件被修改（参阅下面的提示）</li><li>由程序来更新应用缓存</li></ul><p><strong>完整的 Cache Manifest 文件 -</strong> 更新注释行中的日期和版本号是一种使浏览器重新缓存文件的办法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html">CACHE MANIFEST<br># 2012-02-21 v1.0.0<br>/theme.css<br>/logo.gif<br>/main.js<br><br>NETWORK:<br>login.asp<br><br>FALLBACK:<br>/html/ /offline.html<br></code></pre></td></tr></table></figure><h2 id="5-17-无障碍"><a href="#5-17-无障碍" class="headerlink" title="5.17 无障碍"></a>5.17 无障碍</h2><ul><li><p>拥有标题、段落、列表等内容的良好结构</p></li><li><p>使用通俗易懂的语言：不使用方言</p></li><li><p>更现代的页面布局 <code>&lt;header&gt;&lt;nav&gt;&lt;main&gt;</code></p></li><li><p>UI控制：能够使用Tab切换按钮、输入框的焦点</p></li><li><p>重新建立键盘的无障碍：修改聚焦控件的顺序</p><ul><li><p><code>tabindex</code></p></li><li><pre><code class="hljs">document.onkeydown = function (e) &#123;  if (e.keyCode === 13) &#123;    // The Enter/Return key    document.activeElement.onclick(e);  &#125;&#125;;<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br><br>- 有意义的文字标签：对于按钮的文字描述要含义明确，不要只写Click it!<br><br>- 无障碍数据表格：使用语义化标签`&lt;th&gt;&lt;caption&gt;`<br><br>- 替代文本：解释图片的内容<br><br>  - `title`、`alt`属性<br><br>  - `aria-labelledby`属性<br><br>  - ```<br>    &lt;img src=<span class="hljs-string">&quot;dinosaur.png&quot;</span> aria-labelledby=<span class="hljs-string">&quot;dino-label&quot;</span> /&gt;<br>    &lt;p id=<span class="hljs-string">&quot;dino-label&quot;</span>&gt;The Mozilla red Tyrannosaurus ...&lt;/p&gt;<br></code></pre></td></tr></table></figure></code></pre></li><li><p><code>longdesc</code>属性</p></li><li><pre><code class="hljs">&lt;img src=&quot;dinosaur.png&quot; longdesc=&quot;dino-info.html&quot; /&gt;</code></pre></li></ul></li><li><p>空alt属性：对于装饰性的图片，<code>alt</code>属性为空，这样就不会被阅读器解析</p></li></ul><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="MVC模型"><a href="#MVC模型" class="headerlink" title="MVC模型"></a>MVC模型</h2><p>参考：<a href="https://www.runoob.com/design-pattern/mvc-pattern.html">https://www.runoob.com/design-pattern/mvc-pattern.html</a></p><h2 id="DHTML"><a href="#DHTML" class="headerlink" title="DHTML"></a>DHTML</h2><p>DHTML 意味着 HTML、样式表和 JavaScript 的组合</p><h2 id="Html全局属性"><a href="#Html全局属性" class="headerlink" title="Html全局属性"></a>Html全局属性</h2><p><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/1717039495266-c18dd120-7a28-46a3-9838-e5953c261c80.png" alt="1717039495266-c18dd120-7a28-46a3-9838-e5953c261c80"></p><h2 id="提高DOM元素操作效率"><a href="#提高DOM元素操作效率" class="headerlink" title="提高DOM元素操作效率"></a>提高DOM元素操作效率</h2><ul><li>处理列表子元素的点击事件时，使用事件代理</li><li>插入大量<code>DOM</code>元素时，使用<code>innerHTML</code>替代逐个构建元素</li><li>使用<code>DocumentFragment</code>替代多次<code>appendChild</code>操作</li></ul><h2 id="屏幕尺寸"><a href="#屏幕尺寸" class="headerlink" title="屏幕尺寸"></a>屏幕尺寸</h2><p><img src="/2024/09/24/%E5%89%8D%E7%AB%AF%E5%85%A5%E9%97%A8/HTML%E6%95%99%E7%A8%8B/1716794205483-be90d11e-3df3-44e4-8313-92668cfb2a20.png" alt="1716794205483-be90d11e-3df3-44e4-8313-92668cfb2a20"></p><h2 id="创建带有ID属性的DOM元素的副作用"><a href="#创建带有ID属性的DOM元素的副作用" class="headerlink" title="创建带有ID属性的DOM元素的副作用"></a>创建带有ID属性的DOM元素的副作用</h2><ul><li>增加内存负担</li><li>创建同名的全局变量</li></ul><h2 id="属性的继承"><a href="#属性的继承" class="headerlink" title="属性的继承"></a>属性的继承</h2><p><strong>一、无继承性的属性</strong></p><p>1、<code>display</code>：规定元素应该生成的框的类型</p><p>2、文本属性：</p><p>​vertical-align：垂直文本对齐 </p><p>​text-decoration：规定添加到文本的装饰 </p><p>​text-shadow：文本阴影效果</p><p>​white-space：空白符的处理</p><p>​unicode-bidi：设置文本的方向</p><p>3、盒子模型的属性：</p><p>​width、height、margin 、margin-top、margin-right、margin-bottom、margin-left、border、border-</p><p>style、border-top-style、border-right-style、border-bottom-style、border-left-style、border-width、</p><p>border-top-width、border-right-right、border-bottom-width、border-left-width、border-color、border-</p><p>top-color、border-right-color、border-bottom-color、border-left-color、border-top、border-right、</p><p>border-bottom、border-left、padding、padding-top、padding-right、padding-bottom、padding-left</p><p>4、背景属性：</p><p>​background、background-color、background-image、background-repeat、background-position、</p><p>background-attachment</p><p>5、定位属性：</p><p>​float、clear、position、top、right、bottom、left、min-width、min-height、max-width、max-height、</p><p>overflow、clip、z-index</p><p>6、生成内容属性：content、counter-reset、counter-increment</p><p>7、轮廓样式属性：outline-style、outline-width、outline-color、outline</p><p>8、页面样式属性：size、page-break-before、page-break-after</p><p>9、声音样式属性：pause-before、pause-after、pause、cue-before、cue-after、cue、play-during</p><p><strong>二、有继承性的属性</strong></p><p>1、字体系列属性 </p><p>​font：组合字体</p><p>​font-family：规定元素的字体系列</p><p>​font-weight：设置字体的粗细 </p><p>​font-size：设置字体的尺寸</p><p>​font-style：定义字体的风格</p><p>​font-variant：设置小型大写字母的字体显示文本，这意味着所有的小写字母均会被转换为大写，但是所有使</p><p>用小型大写字体的字母与其余文本相比，其字体尺寸更小。</p><p>​font-stretch：对当前的 font-family 进行伸缩变形。所有主流浏览器都不支持。</p><p>​font-size-adjust：为某个元素规定一个 aspect 值，这样就可以保持首选字体的 x-height。</p><p>2、文本系列属性</p><p>text-indent：文本缩进 </p><p>text-align：文本水平对齐 </p><p>line-height：行高</p><p>word-spacing：增加或减少单词间的空白（即字间隔）</p><p>letter-spacing：增加或减少字符间的空白（字符间距）</p><p>text-transform：控制文本大小写 </p><p>direction：规定文本的书写方向</p><p>color：文本颜色</p><p>3、元素可见性：visibility</p><p>4、表格布局属性：caption-side、border-collapse、border-spacing、empty-cells、table-layout</p><p>5、列表布局属性：list-style-type、list-style-image、list-style-position、list-style</p><p>6、生成内容属性：quotes</p><p>7、光标属性：cursor</p><p>8、页面样式属性：page、page-break-inside、windows、orphans</p><p>9、声音样式属性：</p><p>​speak、speak-punctuation、speak-numeral、speak-header、speech-rate、volume、voice-family、pitch、pitch-range、stress、richness、、azimuth、elevation</p><p><strong>三、所有元素可以继承的属性</strong></p><p>1、元素可见性：visibility</p><p>2、光标属性：cursor</p><p><strong>内联元素可以继承的属性</strong></p><p>1、字体系列属性</p><p>2、除text-indent、text-align之外的文本系列属性</p><p><strong>块级元素可以继承的元素</strong></p><p> 1、text-indent、text-align</p></optgroup>]]></content>
    
    
    
    <tags>
      
      <tag>前端入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/09/23/hello-world/"/>
    <url>/2024/09/23/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
